{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/","text":"Introduction \u00b6 This section serves as a reference for the available Solar Core APIs. These APIs expose configurable resources and data, such as the following: Public REST API Webhook API The API can also help monitor and troubleshoot your own node Since each Core instance operates with its own internal blockchain and state, it's possible for it to become out of sync or forked, which may result in query failures. This makes the Solar Core APIs a valuable resource for managing your node and troubleshooting issues by comparing its responses with those of other nodes.","title":"Introduction"},{"location":"api/#introduction","text":"This section serves as a reference for the available Solar Core APIs. These APIs expose configurable resources and data, such as the following: Public REST API Webhook API The API can also help monitor and troubleshoot your own node Since each Core instance operates with its own internal blockchain and state, it's possible for it to become out of sync or forked, which may result in query failures. This makes the Solar Core APIs a valuable resource for managing your node and troubleshooting issues by comparing its responses with those of other nodes.","title":"Introduction"},{"location":"api/public-rest-api/endpoints/","text":"Endpoints \u00b6 This section contains interactive documentation for Solar Core's public mainnet API and makes for a perfect companion for learning how to fetch blockchain data like node configurations, pending or confirmed transactions, wallet or voting information, and more without needing to run a Core node. Explore the testnet API here: tapi.solar.org","title":"Endpoints"},{"location":"api/public-rest-api/endpoints/#endpoints","text":"This section contains interactive documentation for Solar Core's public mainnet API and makes for a perfect companion for learning how to fetch blockchain data like node configurations, pending or confirmed transactions, wallet or voting information, and more without needing to run a Core node. Explore the testnet API here: tapi.solar.org","title":"Endpoints"},{"location":"api/public-rest-api/getting-started/","text":"Getting started \u00b6 Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections. This is the reference guide for the Public API. This API exposes all resources and data provided by a Solar Core node and is the preferred way of interacting with the Solar Network. If you have any problems or requests, please open an issue . Pagination \u00b6 Requests that return multiple items will be paginated to 100 items by default. You can specify further pages with the ?page parameter. For some resources, you can also set a custom page size up to 100 with the ?limit parameter. Note that for technical reasons not all endpoints respect the ?limit parameter. Public testing relay \u00b6 If you are not running a relay yourself you can test API calls using: Mainnet API api.solar.org Testnet API tapi.solar.org Self-hosted relay port \u00b6 When running a self-hosted Core relay instance, the default API port is 6003 . (e.g., <your_relay's_ip>:6003/api ). Be sure to configure your firewall appropriately. Warning It's strongly advised to only enable API access on a relay node and never on a delegate forging node. Happy Developing!","title":"Getting Started"},{"location":"api/public-rest-api/getting-started/#getting-started","text":"Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections. This is the reference guide for the Public API. This API exposes all resources and data provided by a Solar Core node and is the preferred way of interacting with the Solar Network. If you have any problems or requests, please open an issue .","title":"Getting started"},{"location":"api/public-rest-api/getting-started/#pagination","text":"Requests that return multiple items will be paginated to 100 items by default. You can specify further pages with the ?page parameter. For some resources, you can also set a custom page size up to 100 with the ?limit parameter. Note that for technical reasons not all endpoints respect the ?limit parameter.","title":"Pagination"},{"location":"api/public-rest-api/getting-started/#public-testing-relay","text":"If you are not running a relay yourself you can test API calls using: Mainnet API api.solar.org Testnet API tapi.solar.org","title":"Public testing relay"},{"location":"api/public-rest-api/getting-started/#self-hosted-relay-port","text":"When running a self-hosted Core relay instance, the default API port is 6003 . (e.g., <your_relay's_ip>:6003/api ). Be sure to configure your firewall appropriately. Warning It's strongly advised to only enable API access on a relay node and never on a delegate forging node. Happy Developing!","title":"Self-hosted relay port"},{"location":"api/public-rest-api/modify-response/","text":"Modify API Response \u00b6 In some cases users wants to alter existing HTTP API responses, by removing excess fields, changing content or modify result in any other way. In this chapter we will go trough process step by step and describe how to remove explorer property from the /node/configuration route accessible on GET method. { \"data\" : { \"symbol\" : \"tSXP\" , \"explorer\" : \"http://texplorer.solar.org\" , \"version\" : 30 , } } Desired response : { \"data\" : { \"symbol\" : \"tSXP\" , \"version\" : 30 , } } Process \u00b6 Get route \u00b6 First we need get existing route object that we want to modify. Be aware there can be two Server instances accessible via Identifiers.HTTP or Identifiers.HTTPS symbols. Each Server instance expose getRoute method which is used for obtaining ServerRoute . const route = this . app . get < Server > ( Identifiers . HTTP ). getRoute ( \"GET\" , \"/api/node/configuration\" ); Keep original handler \u00b6 Save the reference to existing handler. Use bind() function to bind original object which method belongs to, otherwise you will lose this reference if one is used inside the handler. const originalHandler = route . settings . handler . bind ( route . settings . bind ); Create new handler \u00b6 Replace route handler with new wrapper function. New function will call original handler and set desired property to undefined . JSON standard defined that undefined properties are not included in stringified response, which will result as removed field in response body. Finally return modified response. route . settings . handler = async ( request : Hapi.Request , h : Hapi.ResponseToolkit ) => { const response = await originalHandler ( arguments ); response . data . explorer = undefined ; return response ; }; API \u00b6 Methods \u00b6 Server.getRoute(method: string , path: string ) : ServerRoute | undefined \u00b6 Parameters : method - HTTP method eg. \"GET\", \"POST\" path - route path eg. \"/api/node/configuration\" Response : Returns ServerRoute object or undefined . Complete code sample \u00b6 // Import import Hapi from \"@hapi/hapi\" ; // Modify route const route = this . app . get < Server > ( Identifiers . HTTP ). getRoute ( \"GET\" , \"/api/node/configuration\" ); if ( route ) { const originalHandler = route . settings . handler . bind ( route . settings . bind ); route . settings . handler = async ( request : Hapi.Request , h : Hapi.ResponseToolkit ) => { const response = await originalHandler ( arguments ); response . data . explorer = undefined ; return response ; }; } Additional reading \u00b6 Hapi official documentation","title":"Modify API Response"},{"location":"api/public-rest-api/modify-response/#modify-api-response","text":"In some cases users wants to alter existing HTTP API responses, by removing excess fields, changing content or modify result in any other way. In this chapter we will go trough process step by step and describe how to remove explorer property from the /node/configuration route accessible on GET method. { \"data\" : { \"symbol\" : \"tSXP\" , \"explorer\" : \"http://texplorer.solar.org\" , \"version\" : 30 , } } Desired response : { \"data\" : { \"symbol\" : \"tSXP\" , \"version\" : 30 , } }","title":"Modify API Response"},{"location":"api/public-rest-api/modify-response/#process","text":"","title":"Process"},{"location":"api/public-rest-api/modify-response/#get-route","text":"First we need get existing route object that we want to modify. Be aware there can be two Server instances accessible via Identifiers.HTTP or Identifiers.HTTPS symbols. Each Server instance expose getRoute method which is used for obtaining ServerRoute . const route = this . app . get < Server > ( Identifiers . HTTP ). getRoute ( \"GET\" , \"/api/node/configuration\" );","title":"Get route"},{"location":"api/public-rest-api/modify-response/#keep-original-handler","text":"Save the reference to existing handler. Use bind() function to bind original object which method belongs to, otherwise you will lose this reference if one is used inside the handler. const originalHandler = route . settings . handler . bind ( route . settings . bind );","title":"Keep original handler"},{"location":"api/public-rest-api/modify-response/#create-new-handler","text":"Replace route handler with new wrapper function. New function will call original handler and set desired property to undefined . JSON standard defined that undefined properties are not included in stringified response, which will result as removed field in response body. Finally return modified response. route . settings . handler = async ( request : Hapi.Request , h : Hapi.ResponseToolkit ) => { const response = await originalHandler ( arguments ); response . data . explorer = undefined ; return response ; };","title":"Create new handler"},{"location":"api/public-rest-api/modify-response/#api","text":"","title":"API"},{"location":"api/public-rest-api/modify-response/#methods","text":"","title":"Methods"},{"location":"api/public-rest-api/modify-response/#servergetroutemethod-string-path-string-serverroute-undefined","text":"Parameters : method - HTTP method eg. \"GET\", \"POST\" path - route path eg. \"/api/node/configuration\" Response : Returns ServerRoute object or undefined .","title":"Server.getRoute(method: string, path: string) : ServerRoute | undefined"},{"location":"api/public-rest-api/modify-response/#complete-code-sample","text":"// Import import Hapi from \"@hapi/hapi\" ; // Modify route const route = this . app . get < Server > ( Identifiers . HTTP ). getRoute ( \"GET\" , \"/api/node/configuration\" ); if ( route ) { const originalHandler = route . settings . handler . bind ( route . settings . bind ); route . settings . handler = async ( request : Hapi.Request , h : Hapi.ResponseToolkit ) => { const response = await originalHandler ( arguments ); response . data . explorer = undefined ; return response ; }; }","title":"Complete code sample"},{"location":"api/public-rest-api/modify-response/#additional-reading","text":"Hapi official documentation","title":"Additional reading"},{"location":"api/public-rest-api/troubleshooting/","text":"Troubleshooting \u00b6 If you're encountering some oddities in the API, here's a list of resolutions to some of the problems you may be experiencing. \"Why am I getting a 404 error on a resource that exists?\" \u00b6 Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections. Typically, this means that the node you are sending your requests to is out of sync and missing data that exists on other nodes that are in sync. To troubleshoot, ensure you're querying a node that is in sync, and third-party application restrictions are not blocking access. Querying the public Mainnet API is usually a good start. \"Why am I not seeing all my results?\" \u00b6 Most API calls accessing a list of resources (e.g., blocks and transactions) support pagination. If you're making requests and receiving an incomplete set of results, you're probably only seeing the first page. You'll need to request the remaining pages to get more results. It's important not to try to guess the format of the pagination URL. Not every API call uses the same structure. Instead, extract the pagination information from the meta field, which is sent with every request. \"My node is running, but API keeps returning CONNECTION REFUSED ?\" \u00b6 Note that the Public API is only available after a node has fully synced. This ensures your data on the blockchain is up to date. A full sync may take up to 15h, depending on your hardware configuration and network speed. If your node is synced and you still get CONNECTION_REFUSED error, please check your firewall configuration and if needed whitelist your client.","title":"Troubleshooting"},{"location":"api/public-rest-api/troubleshooting/#troubleshooting","text":"If you're encountering some oddities in the API, here's a list of resolutions to some of the problems you may be experiencing.","title":"Troubleshooting"},{"location":"api/public-rest-api/troubleshooting/#why-am-i-getting-a-404-error-on-a-resource-that-exists","text":"Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections. Typically, this means that the node you are sending your requests to is out of sync and missing data that exists on other nodes that are in sync. To troubleshoot, ensure you're querying a node that is in sync, and third-party application restrictions are not blocking access. Querying the public Mainnet API is usually a good start.","title":"\"Why am I getting a 404 error on a resource that exists?\""},{"location":"api/public-rest-api/troubleshooting/#why-am-i-not-seeing-all-my-results","text":"Most API calls accessing a list of resources (e.g., blocks and transactions) support pagination. If you're making requests and receiving an incomplete set of results, you're probably only seeing the first page. You'll need to request the remaining pages to get more results. It's important not to try to guess the format of the pagination URL. Not every API call uses the same structure. Instead, extract the pagination information from the meta field, which is sent with every request.","title":"\"Why am I not seeing all my results?\""},{"location":"api/public-rest-api/troubleshooting/#my-node-is-running-but-api-keeps-returning-connection-refused","text":"Note that the Public API is only available after a node has fully synced. This ensures your data on the blockchain is up to date. A full sync may take up to 15h, depending on your hardware configuration and network speed. If your node is synced and you still get CONNECTION_REFUSED error, please check your firewall configuration and if needed whitelist your client.","title":"\"My node is running, but API keeps returning CONNECTION REFUSED?\""},{"location":"api/webhook-api/endpoints/","text":"Endpoints \u00b6 List All Webhooks \u00b6 The webhooks resource returns all enabled and disabled webhooks. There is thus no need to store all active webhooks client side; as the node maintains a register for you. Endpoint \u00b6 GET /api/webhooks Query Parameters \u00b6 Name Type Description Required page int The number of the page that will be returned. No limit int The number of resources per page. No Response \u00b6 { \"meta\" : { \"count\" : 29 , \"pageCount\" : 1 , \"totalCount\" : 29 , \"next\" : null , \"previous\" : null , \"self\" : \"/api/v2/webhooks?page=1&limit=100\" , \"first\" : \"/api/v2/webhooks?page=1&limit=100\" , \"last\" : \"/api/v2/webhooks?page=1&limit=100\" }, \"data\" : [ { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } ] } Retrieve a Webhook \u00b6 It is possible to query for a specific webhook by ID, which has to be saved client-side or obtained from another API call. Endpoint \u00b6 GET /api/webhooks/ { id } Path Parameters \u00b6 Name Type Description Required id string The identifier of the webhook to be retrieved. Yes Response \u00b6 { \"data\" : { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } } Create a Webhook \u00b6 It is recommended to have a backend service running that will handle your webhook calls, as you'll have to provide a target value when creating the webhook. To give you an idea of how this works, we created a couple of example setups that you can use or get inspiration from. A webhook may be triggered by multiple conditions; as long as one of the conditions evaluates to true , the webhook will fire. The returned token should be saved and used to validate the webhook origin. It is a secret value which should not be shared. For extra security, whitelist the IP of the node with your target service, ensuring other parties are not able to post webhook payloads. The conditions lists consists of an array of objects, with the following properties: key : the key used on the object that is passed along with the specified event condition : a condition used to check the value against value : (Optional) a value used to check the key against. This is not needed for the falsy and truthy conditions. In case of between and not-between , you'll have to provide an object like this: \"value\": { \"min\": \"someValue\", \"max\": \"someValue\" } Endpoint \u00b6 POST /api/webhooks Body Parameters \u00b6 Name Type Description Required event string The name of the event to be listened for. Yes target string The target URL for the HTTP payload. Yes enabled string The value to enable or disable the webhook. No conditions array The list of conditions required to trigger the webhook. Yes Response \u00b6 { \"data\" : { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"token\" : \"7e66949f67b36c34a05eeb3a866957b3f1b6f8947fb215500b78e5091d4e484a\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } } Events \u00b6 Event Description Implemented kernel.booted Fires when the kernel has booted Yes kernel.booting Fires when the kernel is booting Yes kernel.bootstrapper.bootstrapped Fires when the bootstrapper has bootstrapped Yes kernel.bootstrapper.bootstrapping Fires when the bootstrapper is bootstrapping Yes kernel.serviceProvider.booted Fires when the kernel service provider has booted Yes kernel.serviceProvider.disposed Fires when the kernel service provider has been disposed Yes kernel.serviceProvider.registered Fires when the kernel service provider has been registered Yes cache.flushed Fires when the cache has been flushed Yes cache.forgotten Fires when the cache has been forgotten Yes cache.hit Fires when the cache has been hit Yes cache.missed Fires when the cache has been missed Yes cache.written Fires when the cache has been written to Yes crypto.milestone.changed Fires when the crypto milestone has changed Yes blockchain.synced Fires when the blockchain has synced Yes block.applied Fires when a block is saved Yes block.disregarded Fires when a block is disregarded Yes block.forged Fires when a block is forged Yes block.received Fires when a block is incoming Yes block.reverted Fires when a block is removed from the database (e.g. on a rollback) Yes database.preConnect Fires during the database pre-connection state Yes database.postConnect Fires during the database post-connection state Yes database.preDisconnect Fires during the database pre-disconnection state Yes database.postDisconnect Fires during the database post-disconnection state Yes delegate.productivityChanged Fires after a delegate's productivity has changed Yes delegate.registered Fires when a new delegate is registered Yes delegate.resigned Fires when a delegate resigns Yes wallet.vote Fires when a wallet votes Yes forger.failed Fires when the forger module fails to start Yes forger.missing Fires when it is detected that the forger module isn't running Yes forger.started Fires when the forger module forges a new block No peer.added Fires when a peer is added Yes peer.disconnect Fires when a peer will disconnect Yes peer.disconnected Fires when a peer has disconnected Yes peer.disconnecting Fires when a peer is disconnecting Yes peer.removed Fires when a peer is removed Yes round.applied Fires when a new round has been applied Yes round.created Fires when a new round is created and saved to the database Yes round.missed Fires when a round has been missed Yes state.builder.finished Fires when the state builder has finished building Yes state.started Fires when the state builder has started building No state.starting Fires when the state builder is starting to build Yes transaction.pool.added Fires when transactions are added to the pool Yes transaction.applied Fires when a transaction is saved Yes transaction.expired Fires when an unconfirmed transaction expires Yes transaction.forged Fires when a transaction is forged by a delegate Yes transaction.pool.rejected Fires when transactions are rejected and not added to the pool Yes transaction.pool.removed Fires when a transaction is removed from the pool by its ID Yes transaction.reverted Fires when a transaction is removed from the database Yes schedule.blockJob.finished Fires when a block job has finished running Yes schedule.cronJob.finished Fires when a cron job has finished running Yes queue.finished Fires when the queue has finished Yes queue.failed Fires when the queue has failed Yes Conditions \u00b6 Condition Description between Check if the given value is between min and max contains Check if A contains B eq Check if A equals B falsy Check if the given value is false gt Check if A is greater than B gte Check if A is greater than or equal to B lt Check if A is lesser than B lte Check if A is lesser than or equal to B ne Check if A does not equal B not-between Check if the given value is not between min and max regexp Check if the given value matches truthy Check if the given value is true Update a Webhook \u00b6 Existing webhooks may be updated. Note that this is the equivalent of deleting and creating a webhook; but retaining the same token . If you are often updating and creating webhooks; consider deleting and creating new webhooks instead of updating to rotate your validation token often. Endpoint \u00b6 PUT /api/webhooks/ { id } Path parameters \u00b6 Name Type Description Required id string The identifier of the webhook to be updated. Yes Body parameters \u00b6 Name Type Description Required event string The name of the event to be listened for. No target string The target URL for the HTTP payload. No enabled string The value to enable or disable the webhook. No conditions array The list of conditions required to trigger the webhook. No Response \u00b6 HTTP / 1.1 204 No Content {} Delete a webhook \u00b6 A webhook may be deleted by ID. Delete unused webhooks to save machine resources. Endpoint \u00b6 DELETE /api/webhooks/ { id } Path parameters \u00b6 Name Type Description Required id string The identifier of the webhook to be deleted. Yes Response \u00b6 HTTP / 1.1 204 No Content {}","title":"Endpoints"},{"location":"api/webhook-api/endpoints/#endpoints","text":"","title":"Endpoints"},{"location":"api/webhook-api/endpoints/#list-all-webhooks","text":"The webhooks resource returns all enabled and disabled webhooks. There is thus no need to store all active webhooks client side; as the node maintains a register for you.","title":"List All Webhooks"},{"location":"api/webhook-api/endpoints/#endpoint","text":"GET /api/webhooks","title":"Endpoint"},{"location":"api/webhook-api/endpoints/#query-parameters","text":"Name Type Description Required page int The number of the page that will be returned. No limit int The number of resources per page. No","title":"Query Parameters"},{"location":"api/webhook-api/endpoints/#response","text":"{ \"meta\" : { \"count\" : 29 , \"pageCount\" : 1 , \"totalCount\" : 29 , \"next\" : null , \"previous\" : null , \"self\" : \"/api/v2/webhooks?page=1&limit=100\" , \"first\" : \"/api/v2/webhooks?page=1&limit=100\" , \"last\" : \"/api/v2/webhooks?page=1&limit=100\" }, \"data\" : [ { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } ] }","title":"Response"},{"location":"api/webhook-api/endpoints/#retrieve-a-webhook","text":"It is possible to query for a specific webhook by ID, which has to be saved client-side or obtained from another API call.","title":"Retrieve a Webhook"},{"location":"api/webhook-api/endpoints/#endpoint_1","text":"GET /api/webhooks/ { id }","title":"Endpoint"},{"location":"api/webhook-api/endpoints/#path-parameters","text":"Name Type Description Required id string The identifier of the webhook to be retrieved. Yes","title":"Path Parameters"},{"location":"api/webhook-api/endpoints/#response_1","text":"{ \"data\" : { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } }","title":"Response"},{"location":"api/webhook-api/endpoints/#create-a-webhook","text":"It is recommended to have a backend service running that will handle your webhook calls, as you'll have to provide a target value when creating the webhook. To give you an idea of how this works, we created a couple of example setups that you can use or get inspiration from. A webhook may be triggered by multiple conditions; as long as one of the conditions evaluates to true , the webhook will fire. The returned token should be saved and used to validate the webhook origin. It is a secret value which should not be shared. For extra security, whitelist the IP of the node with your target service, ensuring other parties are not able to post webhook payloads. The conditions lists consists of an array of objects, with the following properties: key : the key used on the object that is passed along with the specified event condition : a condition used to check the value against value : (Optional) a value used to check the key against. This is not needed for the falsy and truthy conditions. In case of between and not-between , you'll have to provide an object like this: \"value\": { \"min\": \"someValue\", \"max\": \"someValue\" }","title":"Create a Webhook"},{"location":"api/webhook-api/endpoints/#endpoint_2","text":"POST /api/webhooks","title":"Endpoint"},{"location":"api/webhook-api/endpoints/#body-parameters","text":"Name Type Description Required event string The name of the event to be listened for. Yes target string The target URL for the HTTP payload. Yes enabled string The value to enable or disable the webhook. No conditions array The list of conditions required to trigger the webhook. Yes","title":"Body Parameters"},{"location":"api/webhook-api/endpoints/#response_2","text":"{ \"data\" : { \"id\" : \"4b255244-a535-4aca-aa92-9ff9e02c98dd\" , \"event\" : \"block.forged\" , \"target\" : \"https://httpbin.org/post\" , \"token\" : \"7e66949f67b36c34a05eeb3a866957b3f1b6f8947fb215500b78e5091d4e484a\" , \"enabled\" : true , \"conditions\" : [ { \"key\" : \"generatorPublicKey\" , \"condition\" : \"eq\" , \"value\" : \"032fcfd19f0e095bf46bd3ada87e283720c405249b1be1a70bad1d5f20095a8515\" } ] } }","title":"Response"},{"location":"api/webhook-api/endpoints/#events","text":"Event Description Implemented kernel.booted Fires when the kernel has booted Yes kernel.booting Fires when the kernel is booting Yes kernel.bootstrapper.bootstrapped Fires when the bootstrapper has bootstrapped Yes kernel.bootstrapper.bootstrapping Fires when the bootstrapper is bootstrapping Yes kernel.serviceProvider.booted Fires when the kernel service provider has booted Yes kernel.serviceProvider.disposed Fires when the kernel service provider has been disposed Yes kernel.serviceProvider.registered Fires when the kernel service provider has been registered Yes cache.flushed Fires when the cache has been flushed Yes cache.forgotten Fires when the cache has been forgotten Yes cache.hit Fires when the cache has been hit Yes cache.missed Fires when the cache has been missed Yes cache.written Fires when the cache has been written to Yes crypto.milestone.changed Fires when the crypto milestone has changed Yes blockchain.synced Fires when the blockchain has synced Yes block.applied Fires when a block is saved Yes block.disregarded Fires when a block is disregarded Yes block.forged Fires when a block is forged Yes block.received Fires when a block is incoming Yes block.reverted Fires when a block is removed from the database (e.g. on a rollback) Yes database.preConnect Fires during the database pre-connection state Yes database.postConnect Fires during the database post-connection state Yes database.preDisconnect Fires during the database pre-disconnection state Yes database.postDisconnect Fires during the database post-disconnection state Yes delegate.productivityChanged Fires after a delegate's productivity has changed Yes delegate.registered Fires when a new delegate is registered Yes delegate.resigned Fires when a delegate resigns Yes wallet.vote Fires when a wallet votes Yes forger.failed Fires when the forger module fails to start Yes forger.missing Fires when it is detected that the forger module isn't running Yes forger.started Fires when the forger module forges a new block No peer.added Fires when a peer is added Yes peer.disconnect Fires when a peer will disconnect Yes peer.disconnected Fires when a peer has disconnected Yes peer.disconnecting Fires when a peer is disconnecting Yes peer.removed Fires when a peer is removed Yes round.applied Fires when a new round has been applied Yes round.created Fires when a new round is created and saved to the database Yes round.missed Fires when a round has been missed Yes state.builder.finished Fires when the state builder has finished building Yes state.started Fires when the state builder has started building No state.starting Fires when the state builder is starting to build Yes transaction.pool.added Fires when transactions are added to the pool Yes transaction.applied Fires when a transaction is saved Yes transaction.expired Fires when an unconfirmed transaction expires Yes transaction.forged Fires when a transaction is forged by a delegate Yes transaction.pool.rejected Fires when transactions are rejected and not added to the pool Yes transaction.pool.removed Fires when a transaction is removed from the pool by its ID Yes transaction.reverted Fires when a transaction is removed from the database Yes schedule.blockJob.finished Fires when a block job has finished running Yes schedule.cronJob.finished Fires when a cron job has finished running Yes queue.finished Fires when the queue has finished Yes queue.failed Fires when the queue has failed Yes","title":"Events"},{"location":"api/webhook-api/endpoints/#conditions","text":"Condition Description between Check if the given value is between min and max contains Check if A contains B eq Check if A equals B falsy Check if the given value is false gt Check if A is greater than B gte Check if A is greater than or equal to B lt Check if A is lesser than B lte Check if A is lesser than or equal to B ne Check if A does not equal B not-between Check if the given value is not between min and max regexp Check if the given value matches truthy Check if the given value is true","title":"Conditions"},{"location":"api/webhook-api/endpoints/#update-a-webhook","text":"Existing webhooks may be updated. Note that this is the equivalent of deleting and creating a webhook; but retaining the same token . If you are often updating and creating webhooks; consider deleting and creating new webhooks instead of updating to rotate your validation token often.","title":"Update a Webhook"},{"location":"api/webhook-api/endpoints/#endpoint_3","text":"PUT /api/webhooks/ { id }","title":"Endpoint"},{"location":"api/webhook-api/endpoints/#path-parameters_1","text":"Name Type Description Required id string The identifier of the webhook to be updated. Yes","title":"Path parameters"},{"location":"api/webhook-api/endpoints/#body-parameters_1","text":"Name Type Description Required event string The name of the event to be listened for. No target string The target URL for the HTTP payload. No enabled string The value to enable or disable the webhook. No conditions array The list of conditions required to trigger the webhook. No","title":"Body parameters"},{"location":"api/webhook-api/endpoints/#response_3","text":"HTTP / 1.1 204 No Content {}","title":"Response"},{"location":"api/webhook-api/endpoints/#delete-a-webhook","text":"A webhook may be deleted by ID. Delete unused webhooks to save machine resources.","title":"Delete a webhook"},{"location":"api/webhook-api/endpoints/#endpoint_4","text":"DELETE /api/webhooks/ { id }","title":"Endpoint"},{"location":"api/webhook-api/endpoints/#path-parameters_2","text":"Name Type Description Required id string The identifier of the webhook to be deleted. Yes","title":"Path parameters"},{"location":"api/webhook-api/endpoints/#response_4","text":"HTTP / 1.1 204 No Content {}","title":"Response"},{"location":"api/webhook-api/getting-started/","text":"Getting started \u00b6 The webhooks API allows you to register a webhook in a specific node, which will send a payload to a predefined target when certain conditions are met. Webhooks ensure that you do not need to poll the public API periodically and are a robust way to stay up-to-date with the blockchain state. Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections. Installation \u00b6 The webhooks API comes by default with an installation of core. In case you don't have it installed, you can add it manually by running yarn global add @solar-network/core-webhooks . Alias \u00b6 webhooks Configuration \u00b6 The webhooks API requires the following configuration in your app.json file. Make sure to have this configuration listed after @solar-network/core-blockchain . { \"package\" : \"@solar-network/core-webhooks\" }, It is recommended to make configuration changes to these options by working with your .env file and the corresponding variables: Variable Description Type Default CORE_WEBHOOKS_ENABLED Enables or disabled the webhook API plugin boolean false CORE_WEBHOOKS_HOST The host to expose the API on string \"0.0.0.0\" CORE_WEBHOOKS_PORT The API port on which the plugin will listen integer 6004 The whitelist property can be changed directly in the app.json file and is an Array consisting of IP addresses that you allow to make connections to the webhook API. By default, only local access to the webhook API is allowed. This means that if you want to expose your webhook API to the outside, you'll need to explicitly add the IP addresses that you will use to this list (recommended approach). It is also possible to use wildcards to indicate a range of IPs (e.g. \"12.34.56.*\" ) or even to allow everyone (e.g. \"*\" ) (not recommended). { \"package\" : \"@solar-network/core-webhooks\" , \"options\" : { \"server\" : { \"whitelist\" : [ \"127.0.0.1\" , \"::ffff:127.0.0.1\" ] } } }, Remember that there is no further authentication on the webhooks API itself, meaning that everyone that can access it can add, edit and delete your webhooks. Note : due to the way the CORE_WEBHOOKS_ENABLED check is implemented, you will need to remove the entry from your .env file if you want to disabled it. Setting the property to CORE_WEBHOOKS_ENABLED=false will not disable the webhooks API. Final checks \u00b6 After making changes to the webhooks API configuration, you will need to restart your relay process for the changes to take effect. If you want to check whether your webhook API is running, you should pay attention to the startup messages in the logs of your relay. It will print a line similar to INFO : Webhook API Server running at: http://0.0.0.0:6004 when it has successfully started the webhooks API. When you see INFO : Webhooks are disabled it means the webhooks API is currently disabled.","title":"Getting Started"},{"location":"api/webhook-api/getting-started/#getting-started","text":"The webhooks API allows you to register a webhook in a specific node, which will send a payload to a predefined target when certain conditions are met. Webhooks ensure that you do not need to poll the public API periodically and are a robust way to stay up-to-date with the blockchain state. Tip All HTTP requests have to be sent with the Content-Type: application/json header. If the header is not present it will result in malformed responses or request rejections.","title":"Getting started"},{"location":"api/webhook-api/getting-started/#installation","text":"The webhooks API comes by default with an installation of core. In case you don't have it installed, you can add it manually by running yarn global add @solar-network/core-webhooks .","title":"Installation"},{"location":"api/webhook-api/getting-started/#alias","text":"webhooks","title":"Alias"},{"location":"api/webhook-api/getting-started/#configuration","text":"The webhooks API requires the following configuration in your app.json file. Make sure to have this configuration listed after @solar-network/core-blockchain . { \"package\" : \"@solar-network/core-webhooks\" }, It is recommended to make configuration changes to these options by working with your .env file and the corresponding variables: Variable Description Type Default CORE_WEBHOOKS_ENABLED Enables or disabled the webhook API plugin boolean false CORE_WEBHOOKS_HOST The host to expose the API on string \"0.0.0.0\" CORE_WEBHOOKS_PORT The API port on which the plugin will listen integer 6004 The whitelist property can be changed directly in the app.json file and is an Array consisting of IP addresses that you allow to make connections to the webhook API. By default, only local access to the webhook API is allowed. This means that if you want to expose your webhook API to the outside, you'll need to explicitly add the IP addresses that you will use to this list (recommended approach). It is also possible to use wildcards to indicate a range of IPs (e.g. \"12.34.56.*\" ) or even to allow everyone (e.g. \"*\" ) (not recommended). { \"package\" : \"@solar-network/core-webhooks\" , \"options\" : { \"server\" : { \"whitelist\" : [ \"127.0.0.1\" , \"::ffff:127.0.0.1\" ] } } }, Remember that there is no further authentication on the webhooks API itself, meaning that everyone that can access it can add, edit and delete your webhooks. Note : due to the way the CORE_WEBHOOKS_ENABLED check is implemented, you will need to remove the entry from your .env file if you want to disabled it. Setting the property to CORE_WEBHOOKS_ENABLED=false will not disable the webhooks API.","title":"Configuration"},{"location":"api/webhook-api/getting-started/#final-checks","text":"After making changes to the webhooks API configuration, you will need to restart your relay process for the changes to take effect. If you want to check whether your webhook API is running, you should pay attention to the startup messages in the logs of your relay. It will print a line similar to INFO : Webhook API Server running at: http://0.0.0.0:6004 when it has successfully started the webhooks API. When you see INFO : Webhooks are disabled it means the webhooks API is currently disabled.","title":"Final checks"},{"location":"api/webhook-api/usage/","text":"Usage \u00b6 Introduction \u00b6 With the release of Solar Core 2.0, a new feature was introduced, called Webhooks which allows you to create more flexible and automated systems while also reducing traffic/load on your server. Authorisation \u00b6 Before we start working on the implementation of a webhook handler, we will take a look at handling authorisation. To guarantee that only your server is allowed to send data to your webhook handler, an authorisation token is generated on creation of a webhook. The generated token will only be returned once and not be visible again. To generate an authorisation token, you need to create a webhook . Lets take the following token as an example fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66 which is 64 characters long and breaks down into 2 parts at 32 characters length each. The first 32 characters will be stored in the database and sent to you as a header Authorization: fe944e318edb02b979d6bf0c87978b64 via a POST request. The last 32 characters 0c8e74e1cbfe36404386d33a5bbd8b66 need to be stored by you and will serve as a way for you to verify that the request is authorised. Handling webhooks \u00b6 Now that we know how the token is structured and what it is used for we can continue with implementing a webhook handler. A webhook handler is just a simple POST endpoint that you need to implement at the URL you specified when creating a webhook. const webhookToken = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" ; const verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" ; server . post ( \"/blocks\" , jsonParser , ( req , res ) => { // This will be fe944e318edb02b979d6bf0c87978b64 const authorisation = req . headers [ \"authorization\" ]; // This will be authorisation + verification const token = authorisation + verification ; // Make sure we block access if the token is invalid... if ( token !== webhookToken ) { return res . status ( 401 ). send ( \"Unauthorized!\" ); } // the datetime of when the webhook was sent console . log ( req . body . created ); // the data the webhook transferred, e.g. a block struct console . log ( req . body . data ); // the type of event that was sent, e.g. block.forged console . log ( req . body . type ); // do something with the above req.body data return res . status ( 200 ). send ( \"Hello Webhook!\" ); }); package main import ( \"fmt\" \"log\" \"net/http\" ) const ( webhookToken = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" ) func validateOrigin ( next http . Handler ) http . Handler { return func ( w http . ResponseWriter , r * http . Request ) { if r . Header . Get ( \"authorization\" ) + verification != webhookToken { w . WriteHeader ( http . StatusUnauthorized ) w . Write ([] byte ( \"Unauthorized!\" )) return } return next ( w , r ) } } func handler ( w http . ResponseWriter , r * http . Request ) { decoder := json . NewDecoder ( r . Body ) var resp Response // some defined DTO err := decoder . Decode ( & resp ) if err != nil { handle ( w , err ) } // do something with the received block/transaction/wallet } func main () { http . HandleFunc ( \"/blocks\" , validateOrigin ( handler )) log . Fatal ( http . ListenAndServe ( \":8080\" , nil )) } import pickle import hashlib from flask import Flask , request from werkzeug.exceptions import Unauthorized from functools import wraps app = Flask ( __name__ ) def dump_webhook_token ( token ): authorisation = token [: 32 ] # \"fe944e318edb02b979d6bf0c87978b64\" verification = token [ 32 :] # \"0c8e74e1cbfe36404386d33a5bbd8b66\" filename = hashlib . md5 ( authorisation . encode ( \"utf-8\" )) . hexdigest () with open ( filename , \"wb\" ) as out : pickle . dump ( { \"verification\" : verification , \"hash\" : hashlib . sha256 ( token . encode ( \"utf-8\" )) . hexdigest () }, out ) def check_webhook_token ( authorisation ): filename = hashlib . md5 ( authorisation . encode ( \"utf-8\" )) . hexdigest () try : with open ( filename , \"rb\" ) as in_ : data = pickle . load ( in_ ) except Exception : return False else : token = authorisation + data [ \"verification\" ] return hashlib . sha256 ( token . encode ( \"utf-8\" ) ) . hexdigest () == data [ \"hash\" ] # ... # Somewhere On Webhook Subscription dump_webhook_token ( \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" ) # verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" # token = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" #... # This Should Be Middleware if This App Is Dedicated to Webhooks def token_required ( f ): @wraps ( f ) def decorated_function ( * args , ** kwargs ): # if request.headers.get(\"authorisation\") + verification != token: if not check_webhook_token ( request . headers . get ( \"authorization\" )): raise Unauthorised ( \"Unauthorized!\" ) return f ( * args , ** kwargs ) return decorated_function @app . route ( \"/blocks\" ) @token_required def handle_block (): block = request . get_json () # do something with the block if __name__ == \"__main__\" : app . run ( debug = True , port = 5000 ) Let's break down the steps we took here: Grab the Authorization header. Create the full token based on the Authorization header and Verification string. Deny access if the full token does not equal the webhook token . Log and process the request body if the full token is valid. Authentication \u00b6 To communicate with the Webhooks API, you will need to provide the token you configured on your node through the Authorization header. Authenticating with an invalid token will return 401 Unauthorized . Headers \u00b6 Name Type Description Required Authorization string The webhook token defined in the node configuration. Yes","title":"Usage"},{"location":"api/webhook-api/usage/#usage","text":"","title":"Usage"},{"location":"api/webhook-api/usage/#introduction","text":"With the release of Solar Core 2.0, a new feature was introduced, called Webhooks which allows you to create more flexible and automated systems while also reducing traffic/load on your server.","title":"Introduction"},{"location":"api/webhook-api/usage/#authorisation","text":"Before we start working on the implementation of a webhook handler, we will take a look at handling authorisation. To guarantee that only your server is allowed to send data to your webhook handler, an authorisation token is generated on creation of a webhook. The generated token will only be returned once and not be visible again. To generate an authorisation token, you need to create a webhook . Lets take the following token as an example fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66 which is 64 characters long and breaks down into 2 parts at 32 characters length each. The first 32 characters will be stored in the database and sent to you as a header Authorization: fe944e318edb02b979d6bf0c87978b64 via a POST request. The last 32 characters 0c8e74e1cbfe36404386d33a5bbd8b66 need to be stored by you and will serve as a way for you to verify that the request is authorised.","title":"Authorisation"},{"location":"api/webhook-api/usage/#handling-webhooks","text":"Now that we know how the token is structured and what it is used for we can continue with implementing a webhook handler. A webhook handler is just a simple POST endpoint that you need to implement at the URL you specified when creating a webhook. const webhookToken = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" ; const verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" ; server . post ( \"/blocks\" , jsonParser , ( req , res ) => { // This will be fe944e318edb02b979d6bf0c87978b64 const authorisation = req . headers [ \"authorization\" ]; // This will be authorisation + verification const token = authorisation + verification ; // Make sure we block access if the token is invalid... if ( token !== webhookToken ) { return res . status ( 401 ). send ( \"Unauthorized!\" ); } // the datetime of when the webhook was sent console . log ( req . body . created ); // the data the webhook transferred, e.g. a block struct console . log ( req . body . data ); // the type of event that was sent, e.g. block.forged console . log ( req . body . type ); // do something with the above req.body data return res . status ( 200 ). send ( \"Hello Webhook!\" ); }); package main import ( \"fmt\" \"log\" \"net/http\" ) const ( webhookToken = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" ) func validateOrigin ( next http . Handler ) http . Handler { return func ( w http . ResponseWriter , r * http . Request ) { if r . Header . Get ( \"authorization\" ) + verification != webhookToken { w . WriteHeader ( http . StatusUnauthorized ) w . Write ([] byte ( \"Unauthorized!\" )) return } return next ( w , r ) } } func handler ( w http . ResponseWriter , r * http . Request ) { decoder := json . NewDecoder ( r . Body ) var resp Response // some defined DTO err := decoder . Decode ( & resp ) if err != nil { handle ( w , err ) } // do something with the received block/transaction/wallet } func main () { http . HandleFunc ( \"/blocks\" , validateOrigin ( handler )) log . Fatal ( http . ListenAndServe ( \":8080\" , nil )) } import pickle import hashlib from flask import Flask , request from werkzeug.exceptions import Unauthorized from functools import wraps app = Flask ( __name__ ) def dump_webhook_token ( token ): authorisation = token [: 32 ] # \"fe944e318edb02b979d6bf0c87978b64\" verification = token [ 32 :] # \"0c8e74e1cbfe36404386d33a5bbd8b66\" filename = hashlib . md5 ( authorisation . encode ( \"utf-8\" )) . hexdigest () with open ( filename , \"wb\" ) as out : pickle . dump ( { \"verification\" : verification , \"hash\" : hashlib . sha256 ( token . encode ( \"utf-8\" )) . hexdigest () }, out ) def check_webhook_token ( authorisation ): filename = hashlib . md5 ( authorisation . encode ( \"utf-8\" )) . hexdigest () try : with open ( filename , \"rb\" ) as in_ : data = pickle . load ( in_ ) except Exception : return False else : token = authorisation + data [ \"verification\" ] return hashlib . sha256 ( token . encode ( \"utf-8\" ) ) . hexdigest () == data [ \"hash\" ] # ... # Somewhere On Webhook Subscription dump_webhook_token ( \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" ) # verification = \"0c8e74e1cbfe36404386d33a5bbd8b66\" # token = \"fe944e318edb02b979d6bf0c87978b640c8e74e1cbfe36404386d33a5bbd8b66\" #... # This Should Be Middleware if This App Is Dedicated to Webhooks def token_required ( f ): @wraps ( f ) def decorated_function ( * args , ** kwargs ): # if request.headers.get(\"authorisation\") + verification != token: if not check_webhook_token ( request . headers . get ( \"authorization\" )): raise Unauthorised ( \"Unauthorized!\" ) return f ( * args , ** kwargs ) return decorated_function @app . route ( \"/blocks\" ) @token_required def handle_block (): block = request . get_json () # do something with the block if __name__ == \"__main__\" : app . run ( debug = True , port = 5000 ) Let's break down the steps we took here: Grab the Authorization header. Create the full token based on the Authorization header and Verification string. Deny access if the full token does not equal the webhook token . Log and process the request body if the full token is valid.","title":"Handling webhooks"},{"location":"api/webhook-api/usage/#authentication","text":"To communicate with the Webhooks API, you will need to provide the token you configured on your node through the Authorization header. Authenticating with an invalid token will return 401 Unauthorized .","title":"Authentication"},{"location":"api/webhook-api/usage/#headers","text":"Name Type Description Required Authorization string The webhook token defined in the node configuration. Yes","title":"Headers"},{"location":"brand/intro/","text":"The Solar Network \u00b6 This page is under construction and more content will be added over time. The Solar Network has a specific guideline on creating and managing the brand. Click on the items below to learn more. Brand-Guidelines Download Mediakit Download Github Banners","title":"Introduction"},{"location":"brand/intro/#the-solar-network","text":"This page is under construction and more content will be added over time. The Solar Network has a specific guideline on creating and managing the brand. Click on the items below to learn more. Brand-Guidelines Download Mediakit Download Github Banners","title":"The Solar Network"},{"location":"core/intro/","text":"Welcome to Solar Core \u00b6 Installation Introduction Requirements Database Variables Installation Steps Transactions Understanding the Lifecycle Understanding the Nonce Transaction Types Updates 4.2.1 4.2.0 4.1.3 4.1.2 4.1.1 4.0.1 3.3.0","title":"Welcome to Solar Core"},{"location":"core/intro/#welcome-to-solar-core","text":"Installation Introduction Requirements Database Variables Installation Steps Transactions Understanding the Lifecycle Understanding the Nonce Transaction Types Updates 4.2.1 4.2.0 4.1.3 4.1.2 4.1.1 4.0.1 3.3.0","title":"Welcome to Solar Core"},{"location":"core/installation/intro/","text":"Introduction \u00b6 Solar Core is written in TypeScript and uses Node.js as execution environment. This guide will take you through the basic steps of setting up a Solar Core installation.","title":"Introduction"},{"location":"core/installation/intro/#introduction","text":"Solar Core is written in TypeScript and uses Node.js as execution environment. This guide will take you through the basic steps of setting up a Solar Core installation.","title":"Introduction"},{"location":"core/installation/requirements/","text":"Server requirements \u00b6 Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB Forger Requirements Recommended Minimum CPUs 4 ( dedicated ) 2 ( dedicated ) RAM 16GB 8GB HDD 100GB - 120GB ( SSD ) 80GB ( SSD )","title":"Requirements"},{"location":"core/installation/requirements/#server-requirements","text":"Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB Forger Requirements Recommended Minimum CPUs 4 ( dedicated ) 2 ( dedicated ) RAM 16GB 8GB HDD 100GB - 120GB ( SSD ) 80GB ( SSD )","title":"Server requirements"},{"location":"core/installation/steps/","text":"Installation Steps \u00b6 A step-by-step guide on how to prepare a fully-functional environment using the install script. Getting started \u00b6 The instructions on this page will guide you through creating a new user account with the correct privileges, installing and configuring Solar Core, then starting a relay instance and logging the output using the installation script. Directly below is a quick summary of these install commands: adduser solar su -l solar wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh solar relay:start pm2 logs Step-by-step installation via the install script \u00b6 If you are planning to setup a new server you can execute the following steps. Step 1: Create a new account \u00b6 Create a new dedicated user account to manage SXP-related software. We\u2019ll illustrate this command as adduser solar to create a user by the name of \u2018solar\u2019 , but you can chose something else, if preferred. On your server, type the following into the command line: adduser solar You'll be asked to create and confirm a new user password, and be prompted to enter the user\u2019s full name and some other information. ( Feel free to leave them blank by pressing \u2018enter\u2019, they are all optional fields. ) When prompted to confirm, type \u2018Y\u2019 and press \u2018enter\u2019 to finish. Adding user 'solar' ... Adding new group 'solar' ( 1000 ) ... Adding new user 'solar' ( 1000 ) with group 'solar' ... Creating home directory '/home/solar' ... Copying files from '/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for solar Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Y Step 2: Login as the new user \u00b6 We now should switch to the user account created above, this will also land us in the user's base directory ( ~/ ). Info In this example we use 'solar' for the name of the new user account, but you should use whatever username was set in the previous steps above. Enter the following command into your terminal: su -l solar Step 3: Run the installation script \u00b6 Here, we will use the install.sh script. This installs Solar Core and all of its dependencies onto your server, then publishes the configuration files for it. Run the install script by copying and pasting this one line command into your terminal: wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d Thanks for choosing to install Solar Core! Preparing the setup procedure... Step 4: Select the Core network \u00b6 Once the installation of dependencies and Solar Core is finished you will need to select which network you wish to operate on. This can be achieved by pressing the up or down arrow keys and confirming your selection by pressing enter . Mainnet is the public network, Testnet is the development network for testing. ? Which network do you want to connect to? \u203a - Use arrow-keys. Return to submit. \u276f Mainnet Testnet After you have made your selection, you will need to confirm by pressing y and confirm again with enter \u2714 Which network do you want to connect to? \u203a Mainnet ? Are you sure? \u203a ( y/N ) The installation process will then proceed. Installing Solar Core for mainnet. This process may take a few minutes \u2826 Downloading operating system dependencies \u203a Installing operating system dependencies \u203a Downloading Core 4 .1.3 \u203a Downloading Core dependencies \u203a Installing Core dependencies \u203a Building Core 4 .1.3 \u203a Saving configuration \u203a Adding plugins \u203a Setting up database The install process might take a while, don\u2019t interrupt it, wait for it to finish. At this point, Solar Core has been successfully installed with its configuration options properly published. Installing Solar Core for mainnet. This process may take a few minutes \u2714 Downloading operating system dependencies \u2714 Installing operating system dependencies \u2714 Downloading Core 4 .1.3 \u2714 Downloading Core dependencies \u2714 Installing Core dependencies \u2714 Building Core 4 .1.3 \u2714 Saving configuration \u2714 Adding plugins \u2714 Setting up database Solar Core has been successfully installed! To get started, type solar Success \u00b6 Your installation is all set! \ud83c\udf89 That\u2019s it, you may now start your relay and view its logs using the following command: solar relay:start && pm2 logs \u2714 Starting solar-relay ... 1 | solar-relay | [ 2022 -11-06 22 :36:49.742 ] INFO: Connecting to database: solar_mainnet 1 | solar-relay | [ 2022 -11-06 22 :36:49.803 ] DEBUG: Database migration: Creating rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.809 ] DEBUG: Database migration: Creating blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.816 ] DEBUG: Database migration: Creating transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.821 ] DEBUG: Database migration: Adding block_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.823 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.825 ] DEBUG: Database migration: Adding timestamp index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.827 ] DEBUG: Database migration: Adding sender_public_key index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.829 ] DEBUG: Database migration: Adding recipient_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.832 ] DEBUG: Database migration: Adding block_id constraint to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.834 ] DEBUG: Database migration: Dropping id from rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.836 ] DEBUG: Database migration: Adding chained_blocks constraint to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.838 ] DEBUG: Database migration: Adding type_group to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.839 ] DEBUG: Database migration: Adding nonce to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.843 ] DEBUG: Database migration: Adding nonce trigger to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.845 ] DEBUG: Database migration: Adding asset to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.846 ] DEBUG: Database migration: Renaming and converting vendor_field_hex to vendor_field in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.851 ] DEBUG: Database migration: Adding type index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.853 ] DEBUG: Database migration: Adding type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.855 ] DEBUG: Database migration: Adding indexes to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.880 ] DEBUG: Database migration: Adding block_height to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.885 ] DEBUG: Database migration: Creating wallets table 1 | solar-relay | [ 2022 -11-06 22 :36:49.889 ] DEBUG: Database migration: Adding payments asset index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.890 ] DEBUG: Database migration: Configuring autovacuum on all tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.891 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.893 ] DEBUG: Database migration: Adding burned_fee to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.898 ] DEBUG: Database migration: Adding dev_fund to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.901 ] DEBUG: Database migration: Disabling fastupdate on indexes in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.902 ] DEBUG: Database migration: Renaming serialized to serialised in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.903 ] DEBUG: Database migration: Renaming payments asset to transfers in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.905 ] DEBUG: Database migration: Setting empty recipient_id to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.906 ] DEBUG: Database migration: Setting zero amount to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.907 ] DEBUG: Database migration: Renaming vendor_field to memo in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.908 ] DEBUG: Database migration: Adding username to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.911 ] DEBUG: Database migration: Creating missed_blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.913 ] DEBUG: Database migration: Adding sender_id to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.915 ] DEBUG: Database migration: Adding id index with operator class to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.917 ] DEBUG: Database migration: Adding id index with operator class to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.918 ] DEBUG: Database migration: Renaming dev_fund to donations in blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.921 ] DEBUG: Database migration: Adding timestamp, username index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.923 ] DEBUG: Database migration: Adding type, type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.926 ] DEBUG: Updating database configuration \ud83d\udcda 1 | solar-relay | [ 2022 -11-06 22 :36:49.928 ] DEBUG: Connection established 1 | solar-relay | [ 2022 -11-06 22 :36:50.192 ] WARNING: No block found in database \ud83d\ude2f 1 | solar-relay | [ 2022 -11-06 22 :36:50.236 ] NOTICE: Milestone change 1 | solar-relay | [ 2022 -11-06 22 :36:50.303 ] INFO: P2P Server started at http://suitable-wagtail:6001 1 | solar-relay | [ 2022 -11-06 22 :36:50.304 ] INFO: Starting Blockchain Manager \u26d3\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.309 ] DEBUG: event 'START' : \"uninitialised\" -> \"initialise\" -> actions: [ initialise ] 1 | solar-relay | [ 2022 -11-06 22 :36:50.313 ] INFO: Last block in database: 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: No saved states exist so a fresh state will now be generated \u203c\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: Verifying database integrity \u23f3 1 | solar-relay | [ 2022 -11-06 22 :36:50.345 ] INFO: Verified database integrity \ud83d\ude38 1 | solar-relay | [ 2022 -11-06 22 :36:50.350 ] INFO: State Generation - Step 1 of 16 : LegacyTransfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.359 ] INFO: State Generation - Step 2 of 16 : SecondSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.361 ] INFO: State Generation - Step 3 of 16 : DelegateRegistration 1 | solar-relay | [ 2022 -11-06 22 :36:50.374 ] INFO: State Generation - Step 4 of 16 : LegacyVote 1 | solar-relay | [ 2022 -11-06 22 :36:50.384 ] INFO: State Generation - Step 5 of 16 : MultiSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.391 ] INFO: State Generation - Step 6 of 16 : Ipfs 1 | solar-relay | [ 2022 -11-06 22 :36:50.393 ] INFO: State Generation - Step 7 of 16 : Transfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.396 ] INFO: State Generation - Step 8 of 16 : DelegateResignation 1 | solar-relay | [ 2022 -11-06 22 :36:50.397 ] INFO: State Generation - Step 9 of 16 : HtlcLock 1 | solar-relay | [ 2022 -11-06 22 :36:50.401 ] INFO: State Generation - Step 10 of 16 : HtlcClaim 1 | solar-relay | [ 2022 -11-06 22 :36:50.404 ] INFO: State Generation - Step 11 of 16 : HtlcRefund 1 | solar-relay | [ 2022 -11-06 22 :36:50.407 ] INFO: State Generation - Step 12 of 16 : Burn 1 | solar-relay | [ 2022 -11-06 22 :36:50.409 ] INFO: State Generation - Step 13 of 16 : Vote 1 | solar-relay | [ 2022 -11-06 22 :36:50.410 ] INFO: State Generation - Step 14 of 16 : Fees & Nonces 1 | solar-relay | [ 2022 -11-06 22 :36:50.412 ] INFO: State Generation - Step 15 of 16 : Block Rewards 1 | solar-relay | [ 2022 -11-06 22 :36:50.414 ] INFO: State Generation - Step 16 of 16 : Vote Balances & Delegate Ranking 1 | solar-relay | [ 2022 -11-06 22 :36:50.418 ] INFO: Number of registered delegates: 53 1 | solar-relay | [ 2022 -11-06 22 :36:50.420 ] INFO: Calculating productivity data \ud83e\uddee 1 | solar-relay | [ 2022 -11-06 22 :36:50.440 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.446 ] INFO: Starting Round 1 \ud83d\udd4a\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.448 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.449 ] INFO: Saving round 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.655 ] INFO: Your network connectivity has been verified by 8 .8.4.4 \u2705 ... 1 | solar-re | [ 2022 -11-06 22 :40:46.370 ] DEBUG: Delegate bfx is allowed to forge block 76 ,805 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.371 ] DEBUG: Delegate sxp is allowed to forge block 76 ,807 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.372 ] DEBUG: Delegate sl33p is allowed to forge block 76 ,809 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.373 ] DEBUG: Delegate advin is allowed to forge block 76 ,816 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.383 ] DEBUG: Delegate cactus1549 is allowed to forge block 76 ,819 \ud83d\udc4d ... Info Synchronisation of the blockchain can take some time. Once synchronised, the allowed to forge block ... messages will be logged every ~8 seconds \u2014 as opposed to the millisecond intervals shown during sync. A single round consists of 53 delegates, each forging a single block.","title":"Installation Steps"},{"location":"core/installation/steps/#installation-steps","text":"A step-by-step guide on how to prepare a fully-functional environment using the install script.","title":"Installation Steps"},{"location":"core/installation/steps/#getting-started","text":"The instructions on this page will guide you through creating a new user account with the correct privileges, installing and configuring Solar Core, then starting a relay instance and logging the output using the installation script. Directly below is a quick summary of these install commands: adduser solar su -l solar wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh solar relay:start pm2 logs","title":"Getting started"},{"location":"core/installation/steps/#step-by-step-installation-via-the-install-script","text":"If you are planning to setup a new server you can execute the following steps.","title":"Step-by-step installation via the install script"},{"location":"core/installation/steps/#step-1-create-a-new-account","text":"Create a new dedicated user account to manage SXP-related software. We\u2019ll illustrate this command as adduser solar to create a user by the name of \u2018solar\u2019 , but you can chose something else, if preferred. On your server, type the following into the command line: adduser solar You'll be asked to create and confirm a new user password, and be prompted to enter the user\u2019s full name and some other information. ( Feel free to leave them blank by pressing \u2018enter\u2019, they are all optional fields. ) When prompted to confirm, type \u2018Y\u2019 and press \u2018enter\u2019 to finish. Adding user 'solar' ... Adding new group 'solar' ( 1000 ) ... Adding new user 'solar' ( 1000 ) with group 'solar' ... Creating home directory '/home/solar' ... Copying files from '/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for solar Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Y","title":"Step 1: Create a new account"},{"location":"core/installation/steps/#step-2-login-as-the-new-user","text":"We now should switch to the user account created above, this will also land us in the user's base directory ( ~/ ). Info In this example we use 'solar' for the name of the new user account, but you should use whatever username was set in the previous steps above. Enter the following command into your terminal: su -l solar","title":"Step 2: Login as the new user"},{"location":"core/installation/steps/#step-3-run-the-installation-script","text":"Here, we will use the install.sh script. This installs Solar Core and all of its dependencies onto your server, then publishes the configuration files for it. Run the install script by copying and pasting this one line command into your terminal: wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d Thanks for choosing to install Solar Core! Preparing the setup procedure...","title":"Step 3: Run the installation script"},{"location":"core/installation/steps/#step-4-select-the-core-network","text":"Once the installation of dependencies and Solar Core is finished you will need to select which network you wish to operate on. This can be achieved by pressing the up or down arrow keys and confirming your selection by pressing enter . Mainnet is the public network, Testnet is the development network for testing. ? Which network do you want to connect to? \u203a - Use arrow-keys. Return to submit. \u276f Mainnet Testnet After you have made your selection, you will need to confirm by pressing y and confirm again with enter \u2714 Which network do you want to connect to? \u203a Mainnet ? Are you sure? \u203a ( y/N ) The installation process will then proceed. Installing Solar Core for mainnet. This process may take a few minutes \u2826 Downloading operating system dependencies \u203a Installing operating system dependencies \u203a Downloading Core 4 .1.3 \u203a Downloading Core dependencies \u203a Installing Core dependencies \u203a Building Core 4 .1.3 \u203a Saving configuration \u203a Adding plugins \u203a Setting up database The install process might take a while, don\u2019t interrupt it, wait for it to finish. At this point, Solar Core has been successfully installed with its configuration options properly published. Installing Solar Core for mainnet. This process may take a few minutes \u2714 Downloading operating system dependencies \u2714 Installing operating system dependencies \u2714 Downloading Core 4 .1.3 \u2714 Downloading Core dependencies \u2714 Installing Core dependencies \u2714 Building Core 4 .1.3 \u2714 Saving configuration \u2714 Adding plugins \u2714 Setting up database Solar Core has been successfully installed! To get started, type solar","title":"Step 4: Select the Core network"},{"location":"core/installation/steps/#success","text":"Your installation is all set! \ud83c\udf89 That\u2019s it, you may now start your relay and view its logs using the following command: solar relay:start && pm2 logs \u2714 Starting solar-relay ... 1 | solar-relay | [ 2022 -11-06 22 :36:49.742 ] INFO: Connecting to database: solar_mainnet 1 | solar-relay | [ 2022 -11-06 22 :36:49.803 ] DEBUG: Database migration: Creating rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.809 ] DEBUG: Database migration: Creating blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.816 ] DEBUG: Database migration: Creating transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.821 ] DEBUG: Database migration: Adding block_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.823 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.825 ] DEBUG: Database migration: Adding timestamp index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.827 ] DEBUG: Database migration: Adding sender_public_key index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.829 ] DEBUG: Database migration: Adding recipient_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.832 ] DEBUG: Database migration: Adding block_id constraint to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.834 ] DEBUG: Database migration: Dropping id from rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.836 ] DEBUG: Database migration: Adding chained_blocks constraint to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.838 ] DEBUG: Database migration: Adding type_group to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.839 ] DEBUG: Database migration: Adding nonce to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.843 ] DEBUG: Database migration: Adding nonce trigger to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.845 ] DEBUG: Database migration: Adding asset to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.846 ] DEBUG: Database migration: Renaming and converting vendor_field_hex to vendor_field in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.851 ] DEBUG: Database migration: Adding type index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.853 ] DEBUG: Database migration: Adding type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.855 ] DEBUG: Database migration: Adding indexes to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.880 ] DEBUG: Database migration: Adding block_height to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.885 ] DEBUG: Database migration: Creating wallets table 1 | solar-relay | [ 2022 -11-06 22 :36:49.889 ] DEBUG: Database migration: Adding payments asset index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.890 ] DEBUG: Database migration: Configuring autovacuum on all tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.891 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.893 ] DEBUG: Database migration: Adding burned_fee to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.898 ] DEBUG: Database migration: Adding dev_fund to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.901 ] DEBUG: Database migration: Disabling fastupdate on indexes in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.902 ] DEBUG: Database migration: Renaming serialized to serialised in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.903 ] DEBUG: Database migration: Renaming payments asset to transfers in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.905 ] DEBUG: Database migration: Setting empty recipient_id to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.906 ] DEBUG: Database migration: Setting zero amount to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.907 ] DEBUG: Database migration: Renaming vendor_field to memo in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.908 ] DEBUG: Database migration: Adding username to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.911 ] DEBUG: Database migration: Creating missed_blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.913 ] DEBUG: Database migration: Adding sender_id to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.915 ] DEBUG: Database migration: Adding id index with operator class to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.917 ] DEBUG: Database migration: Adding id index with operator class to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.918 ] DEBUG: Database migration: Renaming dev_fund to donations in blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.921 ] DEBUG: Database migration: Adding timestamp, username index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.923 ] DEBUG: Database migration: Adding type, type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.926 ] DEBUG: Updating database configuration \ud83d\udcda 1 | solar-relay | [ 2022 -11-06 22 :36:49.928 ] DEBUG: Connection established 1 | solar-relay | [ 2022 -11-06 22 :36:50.192 ] WARNING: No block found in database \ud83d\ude2f 1 | solar-relay | [ 2022 -11-06 22 :36:50.236 ] NOTICE: Milestone change 1 | solar-relay | [ 2022 -11-06 22 :36:50.303 ] INFO: P2P Server started at http://suitable-wagtail:6001 1 | solar-relay | [ 2022 -11-06 22 :36:50.304 ] INFO: Starting Blockchain Manager \u26d3\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.309 ] DEBUG: event 'START' : \"uninitialised\" -> \"initialise\" -> actions: [ initialise ] 1 | solar-relay | [ 2022 -11-06 22 :36:50.313 ] INFO: Last block in database: 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: No saved states exist so a fresh state will now be generated \u203c\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: Verifying database integrity \u23f3 1 | solar-relay | [ 2022 -11-06 22 :36:50.345 ] INFO: Verified database integrity \ud83d\ude38 1 | solar-relay | [ 2022 -11-06 22 :36:50.350 ] INFO: State Generation - Step 1 of 16 : LegacyTransfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.359 ] INFO: State Generation - Step 2 of 16 : SecondSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.361 ] INFO: State Generation - Step 3 of 16 : DelegateRegistration 1 | solar-relay | [ 2022 -11-06 22 :36:50.374 ] INFO: State Generation - Step 4 of 16 : LegacyVote 1 | solar-relay | [ 2022 -11-06 22 :36:50.384 ] INFO: State Generation - Step 5 of 16 : MultiSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.391 ] INFO: State Generation - Step 6 of 16 : Ipfs 1 | solar-relay | [ 2022 -11-06 22 :36:50.393 ] INFO: State Generation - Step 7 of 16 : Transfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.396 ] INFO: State Generation - Step 8 of 16 : DelegateResignation 1 | solar-relay | [ 2022 -11-06 22 :36:50.397 ] INFO: State Generation - Step 9 of 16 : HtlcLock 1 | solar-relay | [ 2022 -11-06 22 :36:50.401 ] INFO: State Generation - Step 10 of 16 : HtlcClaim 1 | solar-relay | [ 2022 -11-06 22 :36:50.404 ] INFO: State Generation - Step 11 of 16 : HtlcRefund 1 | solar-relay | [ 2022 -11-06 22 :36:50.407 ] INFO: State Generation - Step 12 of 16 : Burn 1 | solar-relay | [ 2022 -11-06 22 :36:50.409 ] INFO: State Generation - Step 13 of 16 : Vote 1 | solar-relay | [ 2022 -11-06 22 :36:50.410 ] INFO: State Generation - Step 14 of 16 : Fees & Nonces 1 | solar-relay | [ 2022 -11-06 22 :36:50.412 ] INFO: State Generation - Step 15 of 16 : Block Rewards 1 | solar-relay | [ 2022 -11-06 22 :36:50.414 ] INFO: State Generation - Step 16 of 16 : Vote Balances & Delegate Ranking 1 | solar-relay | [ 2022 -11-06 22 :36:50.418 ] INFO: Number of registered delegates: 53 1 | solar-relay | [ 2022 -11-06 22 :36:50.420 ] INFO: Calculating productivity data \ud83e\uddee 1 | solar-relay | [ 2022 -11-06 22 :36:50.440 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.446 ] INFO: Starting Round 1 \ud83d\udd4a\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.448 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.449 ] INFO: Saving round 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.655 ] INFO: Your network connectivity has been verified by 8 .8.4.4 \u2705 ... 1 | solar-re | [ 2022 -11-06 22 :40:46.370 ] DEBUG: Delegate bfx is allowed to forge block 76 ,805 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.371 ] DEBUG: Delegate sxp is allowed to forge block 76 ,807 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.372 ] DEBUG: Delegate sl33p is allowed to forge block 76 ,809 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.373 ] DEBUG: Delegate advin is allowed to forge block 76 ,816 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.383 ] DEBUG: Delegate cactus1549 is allowed to forge block 76 ,819 \ud83d\udc4d ... Info Synchronisation of the blockchain can take some time. Once synchronised, the allowed to forge block ... messages will be logged every ~8 seconds \u2014 as opposed to the millisecond intervals shown during sync. A single round consists of 53 delegates, each forging a single block.","title":"Success"},{"location":"core/installation/variables/","text":"Database Variables \u00b6 CORE_API_CACHE \u00b6 This variable determines if the API makes use of caching to improve performance. CORE_API_DISABLED \u00b6 This variable determines if the API is enabled. CORE_API_HOST \u00b6 This variable determines the host at which the API will listen for traffic. CORE_API_ESTIMATED_TOTAL_COUNT \u00b6 This variable determines if estimated counts should be used. This can improve performance greatly but yields inaccurate counts. CORE_API_PORT \u00b6 This variable determines the port at which the API will listen for traffic. CORE_API_RATE_LIMIT_BLACKLIST \u00b6 This variable determines which IP addresses are unable to send any requests to the API. CORE_API_RATE_LIMIT_DISABLED \u00b6 This variable determines if rate limiting is disabled. CORE_API_RATE_LIMIT_USER_EXPIRES \u00b6 This variable determines how long it takes before the rate limiting expires. CORE_API_RATE_LIMIT_USER_LIMIT \u00b6 This variable determines how many requests a user can send for any given period. CORE_API_RATE_LIMIT_WHITELIST \u00b6 This variable determines which user are exempted from rate limiting. CORE_API_SSL \u00b6 This variable determines if SSL (HTTPS) is enabled. CORE_API_SSL_CERT \u00b6 This variable determines where the SSL Certification is located. CORE_API_SSL_HOST \u00b6 This variable determines the host at which the HTTPS API will listen for traffic. CORE_API_SSL_KEY \u00b6 This variable determines where the SSL Key is located. CORE_API_SSL_PORT \u00b6 This variable determines the host at which the HTTPS API will listen for traffic. CORE_DB_DATABASE \u00b6 This variable determines what database will be used for database communication. CORE_DB_HOST \u00b6 This variable determines what host will be used for database communication. CORE_DB_PASSWORD \u00b6 This variable determines what password will be used for database communication. CORE_DB_PORT \u00b6 This variable determines what port will be used for database communication. CORE_DB_USERNAME \u00b6 This variable determines what username will be used for database communication. CORE_LOG_LEVEL \u00b6 This variable determines the severity of messages that are logged. CORE_LOG_LEVEL_FILE \u00b6 This variable determines where the log files are stored. CORE_MAX_TRANSACTIONS_IN_POOL \u00b6 This variable determines how many transactions can be in the pool at any given time. CORE_NETWORK_NAME \u00b6 This variable is exposed by core and cannot be manually configured. This variable exposes the name of the network that has been configured. CORE_NPM_REGISTRY \u00b6 This variable determines which NPM registry url should be used. CORE_P2P_HOST \u00b6 This variable determines the host at which the P2P API will be listening for traffic. CORE_P2P_MAX_PEER_SEQUENTIAL_ERRORS \u00b6 This variable determines how many errors a peer can cause before it is disconnected. CORE_P2P_MAX_PEERS_SAME_SUBNET \u00b6 This variable determines how many peers from the same subnet are allowed to connect. CORE_P2P_MIN_NETWORK_REACH \u00b6 This variable determines minimum number of peers that should be connected. CORE_P2P_PORT \u00b6 This variable determines the port at which the P2P API will be listening for traffic. CORE_P2P_RATE_LIMIT \u00b6 This variable determines how many requests per second can be sent by a peer. CORE_P2P_RATE_LIMIT_POST_TRANSACTIONS \u00b6 This variable determines how many transaction requests per second can be sent by a peer. CORE_PATH_DATA \u00b6 This variable is exposed by core and cannot be manually configured. This variable exposes the path at which core stores application data. CORE_RESET_DATABASE \u00b6 This variable determines if database should be truncated at boot. CORE_TOKEN \u00b6 This variable is exposed by core and cannot be manually configured. This variable determines the name of the token. CORE_TRANSACTION_POOL_DISABLED \u00b6 This variable determines if the pool should be disabled. CORE_TRANSACTION_POOL_MAX_PER_REQUEST \u00b6 This variable determines how many transactions can be broadcast in a single request. CORE_TRANSACTION_POOL_MAX_PER_SENDER \u00b6 This variable determines how many transactions can be in the pool by a single sender. CORE_WALLET_SYNC_ENABLED \u00b6 This variable determines if wallets should be synced to the database. CORE_WEBHOOKS_ENABLED \u00b6 This variable determines if webhooks are enabled. CORE_WEBHOOKS_HOST \u00b6 This variable determines the host at which the Webhook API will be listening for traffic. CORE_WEBHOOKS_PORT \u00b6 This variable determines the port at which the Webhook API will be listening for traffic. CORE_WEBHOOKS_TIMEOUT \u00b6 This variable determines how long it will take for a request to timeout when trying to transmit a webhook payload.","title":"Database Variables"},{"location":"core/installation/variables/#database-variables","text":"","title":"Database Variables"},{"location":"core/installation/variables/#core_api_cache","text":"This variable determines if the API makes use of caching to improve performance.","title":"CORE_API_CACHE"},{"location":"core/installation/variables/#core_api_disabled","text":"This variable determines if the API is enabled.","title":"CORE_API_DISABLED"},{"location":"core/installation/variables/#core_api_host","text":"This variable determines the host at which the API will listen for traffic.","title":"CORE_API_HOST"},{"location":"core/installation/variables/#core_api_estimated_total_count","text":"This variable determines if estimated counts should be used. This can improve performance greatly but yields inaccurate counts.","title":"CORE_API_ESTIMATED_TOTAL_COUNT"},{"location":"core/installation/variables/#core_api_port","text":"This variable determines the port at which the API will listen for traffic.","title":"CORE_API_PORT"},{"location":"core/installation/variables/#core_api_rate_limit_blacklist","text":"This variable determines which IP addresses are unable to send any requests to the API.","title":"CORE_API_RATE_LIMIT_BLACKLIST"},{"location":"core/installation/variables/#core_api_rate_limit_disabled","text":"This variable determines if rate limiting is disabled.","title":"CORE_API_RATE_LIMIT_DISABLED"},{"location":"core/installation/variables/#core_api_rate_limit_user_expires","text":"This variable determines how long it takes before the rate limiting expires.","title":"CORE_API_RATE_LIMIT_USER_EXPIRES"},{"location":"core/installation/variables/#core_api_rate_limit_user_limit","text":"This variable determines how many requests a user can send for any given period.","title":"CORE_API_RATE_LIMIT_USER_LIMIT"},{"location":"core/installation/variables/#core_api_rate_limit_whitelist","text":"This variable determines which user are exempted from rate limiting.","title":"CORE_API_RATE_LIMIT_WHITELIST"},{"location":"core/installation/variables/#core_api_ssl","text":"This variable determines if SSL (HTTPS) is enabled.","title":"CORE_API_SSL"},{"location":"core/installation/variables/#core_api_ssl_cert","text":"This variable determines where the SSL Certification is located.","title":"CORE_API_SSL_CERT"},{"location":"core/installation/variables/#core_api_ssl_host","text":"This variable determines the host at which the HTTPS API will listen for traffic.","title":"CORE_API_SSL_HOST"},{"location":"core/installation/variables/#core_api_ssl_key","text":"This variable determines where the SSL Key is located.","title":"CORE_API_SSL_KEY"},{"location":"core/installation/variables/#core_api_ssl_port","text":"This variable determines the host at which the HTTPS API will listen for traffic.","title":"CORE_API_SSL_PORT"},{"location":"core/installation/variables/#core_db_database","text":"This variable determines what database will be used for database communication.","title":"CORE_DB_DATABASE"},{"location":"core/installation/variables/#core_db_host","text":"This variable determines what host will be used for database communication.","title":"CORE_DB_HOST"},{"location":"core/installation/variables/#core_db_password","text":"This variable determines what password will be used for database communication.","title":"CORE_DB_PASSWORD"},{"location":"core/installation/variables/#core_db_port","text":"This variable determines what port will be used for database communication.","title":"CORE_DB_PORT"},{"location":"core/installation/variables/#core_db_username","text":"This variable determines what username will be used for database communication.","title":"CORE_DB_USERNAME"},{"location":"core/installation/variables/#core_log_level","text":"This variable determines the severity of messages that are logged.","title":"CORE_LOG_LEVEL"},{"location":"core/installation/variables/#core_log_level_file","text":"This variable determines where the log files are stored.","title":"CORE_LOG_LEVEL_FILE"},{"location":"core/installation/variables/#core_max_transactions_in_pool","text":"This variable determines how many transactions can be in the pool at any given time.","title":"CORE_MAX_TRANSACTIONS_IN_POOL"},{"location":"core/installation/variables/#core_network_name","text":"This variable is exposed by core and cannot be manually configured. This variable exposes the name of the network that has been configured.","title":"CORE_NETWORK_NAME"},{"location":"core/installation/variables/#core_npm_registry","text":"This variable determines which NPM registry url should be used.","title":"CORE_NPM_REGISTRY"},{"location":"core/installation/variables/#core_p2p_host","text":"This variable determines the host at which the P2P API will be listening for traffic.","title":"CORE_P2P_HOST"},{"location":"core/installation/variables/#core_p2p_max_peer_sequential_errors","text":"This variable determines how many errors a peer can cause before it is disconnected.","title":"CORE_P2P_MAX_PEER_SEQUENTIAL_ERRORS"},{"location":"core/installation/variables/#core_p2p_max_peers_same_subnet","text":"This variable determines how many peers from the same subnet are allowed to connect.","title":"CORE_P2P_MAX_PEERS_SAME_SUBNET"},{"location":"core/installation/variables/#core_p2p_min_network_reach","text":"This variable determines minimum number of peers that should be connected.","title":"CORE_P2P_MIN_NETWORK_REACH"},{"location":"core/installation/variables/#core_p2p_port","text":"This variable determines the port at which the P2P API will be listening for traffic.","title":"CORE_P2P_PORT"},{"location":"core/installation/variables/#core_p2p_rate_limit","text":"This variable determines how many requests per second can be sent by a peer.","title":"CORE_P2P_RATE_LIMIT"},{"location":"core/installation/variables/#core_p2p_rate_limit_post_transactions","text":"This variable determines how many transaction requests per second can be sent by a peer.","title":"CORE_P2P_RATE_LIMIT_POST_TRANSACTIONS"},{"location":"core/installation/variables/#core_path_data","text":"This variable is exposed by core and cannot be manually configured. This variable exposes the path at which core stores application data.","title":"CORE_PATH_DATA"},{"location":"core/installation/variables/#core_reset_database","text":"This variable determines if database should be truncated at boot.","title":"CORE_RESET_DATABASE"},{"location":"core/installation/variables/#core_token","text":"This variable is exposed by core and cannot be manually configured. This variable determines the name of the token.","title":"CORE_TOKEN"},{"location":"core/installation/variables/#core_transaction_pool_disabled","text":"This variable determines if the pool should be disabled.","title":"CORE_TRANSACTION_POOL_DISABLED"},{"location":"core/installation/variables/#core_transaction_pool_max_per_request","text":"This variable determines how many transactions can be broadcast in a single request.","title":"CORE_TRANSACTION_POOL_MAX_PER_REQUEST"},{"location":"core/installation/variables/#core_transaction_pool_max_per_sender","text":"This variable determines how many transactions can be in the pool by a single sender.","title":"CORE_TRANSACTION_POOL_MAX_PER_SENDER"},{"location":"core/installation/variables/#core_wallet_sync_enabled","text":"This variable determines if wallets should be synced to the database.","title":"CORE_WALLET_SYNC_ENABLED"},{"location":"core/installation/variables/#core_webhooks_enabled","text":"This variable determines if webhooks are enabled.","title":"CORE_WEBHOOKS_ENABLED"},{"location":"core/installation/variables/#core_webhooks_host","text":"This variable determines the host at which the Webhook API will be listening for traffic.","title":"CORE_WEBHOOKS_HOST"},{"location":"core/installation/variables/#core_webhooks_port","text":"This variable determines the port at which the Webhook API will be listening for traffic.","title":"CORE_WEBHOOKS_PORT"},{"location":"core/installation/variables/#core_webhooks_timeout","text":"This variable determines how long it will take for a request to timeout when trying to transmit a webhook payload.","title":"CORE_WEBHOOKS_TIMEOUT"},{"location":"core/transactions/intro/","text":"Solar Core v3 transactions \u00b6 This section will help you learn about Solar transactions, their structures and the processes of serialising and deserialising transactions. Ready to start developing? Use the Solar SDKs to build applications utilising the Solar blockchain. Abstract Client SDKs - helps developers fetch information from the Solar blockchain about its current state: which delegates are currently forging, what transactions are associated with a given wallet, and so on. Cryptography SDKs - assists developers in working with transactions: signing, serialising, deserialising, etc. For more information, visit Solar's SDK documentation .","title":"Overview"},{"location":"core/transactions/intro/#solar-core-v3-transactions","text":"This section will help you learn about Solar transactions, their structures and the processes of serialising and deserialising transactions. Ready to start developing? Use the Solar SDKs to build applications utilising the Solar blockchain. Abstract Client SDKs - helps developers fetch information from the Solar blockchain about its current state: which delegates are currently forging, what transactions are associated with a given wallet, and so on. Cryptography SDKs - assists developers in working with transactions: signing, serialising, deserialising, etc. For more information, visit Solar's SDK documentation .","title":"Solar Core v3 transactions"},{"location":"core/transactions/lifecycle/","text":"Understanding the Transaction Lifecycle \u00b6 Describing the journey of a transaction from client to Core. A transaction is an atomic change in the state of the blockchain. The simplest form transfers value from address A to B, incorporating a fee for the processing. Transactions are bundled into a block. At that moment they are committed to the blockchain and become irreversible. All valid transactions are submitted as payload data via the Public REST API and are immutable once added to the blockchain (i.e., included in blocks). While the implementation specifics will depend on the platform used to submit the transaction, SXP's extensive SDK coverage ensures that developers experience a unified workflow across languages and platforms. In the next sections we will look into the transaction lifecycle from creation to final inclusion in the blocks. Transaction journey from client To blockchain \u00b6 1. Create and sign transaction locally \u00b6 Transactions are generated and signed locally with one of many available SDK libraries . Locally generated and signed transactions are sent as a POST request with transaction data to a server running Core. Danger Core will accept a valid transaction, signed with a valid signature from a private key. Make sure you invoke the SDK builder's sign method on your transaction object using the sender's private key. 2. Receive and validate transaction on a server running Core \u00b6 Transactions are sent to the POST /api/transactions endpoint of the Public API. From there all requests are first validated by the API endpoint schema. Each endpoint schema defines the structure that requests should conform to. Transaction flow in short: Transaction Payload is received by Core ( Public API Endpoint ) API Handler validates schema and sends transaction to the TransactionProcessor TransactionProcessor performs additional transaction payload checks in relation to the blockchain protocol. If all checks are valid, the transaction is added to the pool Note All Client SDKs already create API requests to conform to this standard so will typically result in your transaction passing validation. Notably, no blockchain-level validation occurs at this earliest stage in the transaction lifecycle. Request validation ensures that your POST request can be understood by the network, not that the data it contains represents a valid transaction. This task falls to the next class to handle transaction requests: the TransactionProcessor from Core's pool package. Assuming validation is successful, the posted transactions are processed by the request handler, which passes the data to the TransactionProcessor for validation. All transactions submitted to the TransactionProcessor are returned in one of four arrays : accept broadcast excess invalid Internally, the TransactionProcessor processes transactions in its validate method by separating: transactions already in the pool transactions from blocked senders transactions from the future transactions with low fees for broadcast/pool inclusion transactions that fail to conform to their transaction type Info At this point, Core has a list of incoming transactions to add to the pool. TransactionProcessor now checks the pool to see whether it is at capacity. If so, it compares the incoming transactions against the pooled transactions and removes the transactions with the lowest fees. 3. From transaction pool to transaction inclusion within blocks \u00b6 Transactions move out of the pool once a forging delegate (block producer) is ready and eligible to forge it. At the moment of forging, transactions in the forger's pool are grouped into a potential block and passed to the delegate's forge method for inclusion in a block. Inside the forge method, all transaction values, fees, and IDs within the block are added together. The values and fees are used to calculate block metadata, while the hashed IDs are concatenated and used as the block's payloadHash property. With this information in hand, the block data and sorted transactions are passed to the crypto library's Block.create method alongside the forging delegate's keys. 4. Block creation \u00b6 A block is a collection of transactions, but also it is the incremental unit of the blockchain. Every eight seconds, an active delegate produces a new block by bundling a bunch of transactions, verifying each transaction, and signing the block. Blocks hold quite a lot of metadata on the SXP blockchain, like: Height, an incremental ID. Timestamp. Transactions. Creator's signature. Total transfer amount. Total fee amount. The Block.create method uses the following algorithm to create a new block: Derive the delegate's public key from the function's keys parameter. Create a payload hash by serialising the block data into a binary-encoded format. Create a SHA256 hash by using the payload hash as input. Sign the SHA256 hash with the delegate's private key. Create a block ID using the hashed block data. Cast the data into a Block model using the new transaction and block ID. Return the cast Block object. 5. Block propagation \u00b6 With the forged block successfully returned to the forger library, the only remaining responsibility is to let the network know about the new block - block propagation. The forged block is relayed to peers via the peer-to-peer protocol.","title":"Understanding the Lifecycle"},{"location":"core/transactions/lifecycle/#understanding-the-transaction-lifecycle","text":"Describing the journey of a transaction from client to Core. A transaction is an atomic change in the state of the blockchain. The simplest form transfers value from address A to B, incorporating a fee for the processing. Transactions are bundled into a block. At that moment they are committed to the blockchain and become irreversible. All valid transactions are submitted as payload data via the Public REST API and are immutable once added to the blockchain (i.e., included in blocks). While the implementation specifics will depend on the platform used to submit the transaction, SXP's extensive SDK coverage ensures that developers experience a unified workflow across languages and platforms. In the next sections we will look into the transaction lifecycle from creation to final inclusion in the blocks.","title":"Understanding the Transaction Lifecycle"},{"location":"core/transactions/lifecycle/#transaction-journey-from-client-to-blockchain","text":"","title":"Transaction journey from client To blockchain"},{"location":"core/transactions/lifecycle/#1-create-and-sign-transaction-locally","text":"Transactions are generated and signed locally with one of many available SDK libraries . Locally generated and signed transactions are sent as a POST request with transaction data to a server running Core. Danger Core will accept a valid transaction, signed with a valid signature from a private key. Make sure you invoke the SDK builder's sign method on your transaction object using the sender's private key.","title":"1. Create and sign transaction locally"},{"location":"core/transactions/lifecycle/#2-receive-and-validate-transaction-on-a-server-running-core","text":"Transactions are sent to the POST /api/transactions endpoint of the Public API. From there all requests are first validated by the API endpoint schema. Each endpoint schema defines the structure that requests should conform to. Transaction flow in short: Transaction Payload is received by Core ( Public API Endpoint ) API Handler validates schema and sends transaction to the TransactionProcessor TransactionProcessor performs additional transaction payload checks in relation to the blockchain protocol. If all checks are valid, the transaction is added to the pool Note All Client SDKs already create API requests to conform to this standard so will typically result in your transaction passing validation. Notably, no blockchain-level validation occurs at this earliest stage in the transaction lifecycle. Request validation ensures that your POST request can be understood by the network, not that the data it contains represents a valid transaction. This task falls to the next class to handle transaction requests: the TransactionProcessor from Core's pool package. Assuming validation is successful, the posted transactions are processed by the request handler, which passes the data to the TransactionProcessor for validation. All transactions submitted to the TransactionProcessor are returned in one of four arrays : accept broadcast excess invalid Internally, the TransactionProcessor processes transactions in its validate method by separating: transactions already in the pool transactions from blocked senders transactions from the future transactions with low fees for broadcast/pool inclusion transactions that fail to conform to their transaction type Info At this point, Core has a list of incoming transactions to add to the pool. TransactionProcessor now checks the pool to see whether it is at capacity. If so, it compares the incoming transactions against the pooled transactions and removes the transactions with the lowest fees.","title":"2. Receive and validate transaction on a server running Core"},{"location":"core/transactions/lifecycle/#3-from-transaction-pool-to-transaction-inclusion-within-blocks","text":"Transactions move out of the pool once a forging delegate (block producer) is ready and eligible to forge it. At the moment of forging, transactions in the forger's pool are grouped into a potential block and passed to the delegate's forge method for inclusion in a block. Inside the forge method, all transaction values, fees, and IDs within the block are added together. The values and fees are used to calculate block metadata, while the hashed IDs are concatenated and used as the block's payloadHash property. With this information in hand, the block data and sorted transactions are passed to the crypto library's Block.create method alongside the forging delegate's keys.","title":"3. From transaction pool to transaction inclusion within blocks"},{"location":"core/transactions/lifecycle/#4-block-creation","text":"A block is a collection of transactions, but also it is the incremental unit of the blockchain. Every eight seconds, an active delegate produces a new block by bundling a bunch of transactions, verifying each transaction, and signing the block. Blocks hold quite a lot of metadata on the SXP blockchain, like: Height, an incremental ID. Timestamp. Transactions. Creator's signature. Total transfer amount. Total fee amount. The Block.create method uses the following algorithm to create a new block: Derive the delegate's public key from the function's keys parameter. Create a payload hash by serialising the block data into a binary-encoded format. Create a SHA256 hash by using the payload hash as input. Sign the SHA256 hash with the delegate's private key. Create a block ID using the hashed block data. Cast the data into a Block model using the new transaction and block ID. Return the cast Block object.","title":"4. Block creation"},{"location":"core/transactions/lifecycle/#5-block-propagation","text":"With the forged block successfully returned to the forger library, the only remaining responsibility is to let the network know about the new block - block propagation. The forged block is relayed to peers via the peer-to-peer protocol.","title":"5. Block propagation"},{"location":"core/transactions/nonce/","text":"Understanding the Transaction Nonce \u00b6 Wallets utilise a sequential nonce to protect against double-spending , long-range attacks, key-leakage as a result of signature reuse, and side-channel attacks associated with random nonces. This wallet nonce increments with each outgoing transaction, ensuring every transaction and its associated signature are always unique. Quick Facts A wallet's first transaction must have a nonce of 1 The nonce must increment for every new transaction The nonce must not be reused A nonce must not be skipped a transaction with a nonce of 5 originating from a wallet with a nonce of 4 will be rejected \"How do I find a wallet's nonce?\" \u00b6 You can find a wallet's current nonce by utilising the Public API's wallet endpoint. This endpoint returns the details of a given wallet, including its nonce. { \"data\" : { \"address\" : \"D8rr7B1d6TL6pf14LgMz4sKp1VBMs6YUYD\" , \"publicKey\" : \"03df6cd794a7d404db4f1b25816d8976d0e72c5177d17ac9b19a92703b62cdbbbc\" , \"nonce\" : \"123\" , // <- The wallet's nonce value \"balance\" : \"7919999400\" , \"attributes\" : { ... ... ... }, \"lockedBalance\" : \"0\" , \"isDelegate\" : false , \"isResigned\" : false } } \"How do I determine the nonce of a new transaction?\" \u00b6 When creating a new transaction, find the wallet's current nonce and increment it by 1 . Quick Facts If the wallet has a nonce of '123' , the next transaction should have a nonce of '124' A wallet's updated nonce value will only be reflected via API after a transaction has been forged \"Can I send multiple transactions?\" \u00b6 You should track the wallet's nonce locally if you wish to send multiple transactions in a short period. For example, let's say you have a wallet with the nonce value of '123' and want to send three new transactions for inclusion in the next block. These transactions will require the nonce values '124', '125' and '126' and should be set respectively during each transaction's creation. After the block is forged, the API will report the wallet's current nonce as '126'.","title":"Understanding the Nonce"},{"location":"core/transactions/nonce/#understanding-the-transaction-nonce","text":"Wallets utilise a sequential nonce to protect against double-spending , long-range attacks, key-leakage as a result of signature reuse, and side-channel attacks associated with random nonces. This wallet nonce increments with each outgoing transaction, ensuring every transaction and its associated signature are always unique. Quick Facts A wallet's first transaction must have a nonce of 1 The nonce must increment for every new transaction The nonce must not be reused A nonce must not be skipped a transaction with a nonce of 5 originating from a wallet with a nonce of 4 will be rejected","title":"Understanding the Transaction Nonce"},{"location":"core/transactions/nonce/#how-do-i-find-a-wallets-nonce","text":"You can find a wallet's current nonce by utilising the Public API's wallet endpoint. This endpoint returns the details of a given wallet, including its nonce. { \"data\" : { \"address\" : \"D8rr7B1d6TL6pf14LgMz4sKp1VBMs6YUYD\" , \"publicKey\" : \"03df6cd794a7d404db4f1b25816d8976d0e72c5177d17ac9b19a92703b62cdbbbc\" , \"nonce\" : \"123\" , // <- The wallet's nonce value \"balance\" : \"7919999400\" , \"attributes\" : { ... ... ... }, \"lockedBalance\" : \"0\" , \"isDelegate\" : false , \"isResigned\" : false } }","title":"\"How do I find a wallet's nonce?\""},{"location":"core/transactions/nonce/#how-do-i-determine-the-nonce-of-a-new-transaction","text":"When creating a new transaction, find the wallet's current nonce and increment it by 1 . Quick Facts If the wallet has a nonce of '123' , the next transaction should have a nonce of '124' A wallet's updated nonce value will only be reflected via API after a transaction has been forged","title":"\"How do I determine the nonce of a new transaction?\""},{"location":"core/transactions/nonce/#can-i-send-multiple-transactions","text":"You should track the wallet's nonce locally if you wish to send multiple transactions in a short period. For example, let's say you have a wallet with the nonce value of '123' and want to send three new transactions for inclusion in the next block. These transactions will require the nonce values '124', '125' and '126' and should be set respectively during each transaction's creation. After the block is forged, the API will report the wallet's current nonce as '126'.","title":"\"Can I send multiple transactions?\""},{"location":"core/transactions/types/burn/","text":"Burn \u00b6 TypeGroup Type 2 0 This transaction type allows burning an arbitrary amount of SXP coins. The burned amount is deducted from the sender's wallet as well as from the chain's circulating supply. References API Endpoints Link AJV Schema Base | Burn Json \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 2 , \"type\" : 0 , \"nonce\" : \"12\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"100000000\" } Serialised \u00b6 ff033f0200000000000c00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19200000000000000000000e1f50500000000 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x02000000 Type: [7] 2 0x0000 Nonce: [9] 8 0x0c00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Amount: [59] 8 0x00e1f50500000000","title":"Burn"},{"location":"core/transactions/types/burn/#burn","text":"TypeGroup Type 2 0 This transaction type allows burning an arbitrary amount of SXP coins. The burned amount is deducted from the sender's wallet as well as from the chain's circulating supply. References API Endpoints Link AJV Schema Base | Burn","title":"Burn"},{"location":"core/transactions/types/burn/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 2 , \"type\" : 0 , \"nonce\" : \"12\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"100000000\" }","title":"Json"},{"location":"core/transactions/types/burn/#serialised","text":"ff033f0200000000000c00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19200000000000000000000e1f50500000000","title":"Serialised"},{"location":"core/transactions/types/burn/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x02000000 Type: [7] 2 0x0000 Nonce: [9] 8 0x0c00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Amount: [59] 8 0x00e1f50500000000","title":"Deserialised"},{"location":"core/transactions/types/delegate-registration/","text":"Delegate Registration \u00b6 TypeGroup Type 1 2 A user or organisation can register their address to become a delegate and secure the network. Upon accumulating sufficient vote weight, the delegate will begin forging transactions and receiving block rewards. The delegate assigns a custom name to their address to differentiate it from other delegates. References API Endpoints Link AJV Schema Base | Delegate Registration Json \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 2 , \"nonce\" : \"3\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"7500000000\" , \"asset\" : { \"delegate\" : { \"username\" : \"sl33p\" } } } Serialised \u00b6 ff033f0100000002000300000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19200eb08bf010000000005736c333370 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0200 Nonce: [9] 8 0x0300000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x00eb08bf01000000 Memo Length: [58] 1 0x00 Username Length: [59] 1 0x05 Username: [60] 5 0x736c333370","title":"Delegate Registration"},{"location":"core/transactions/types/delegate-registration/#delegate-registration","text":"TypeGroup Type 1 2 A user or organisation can register their address to become a delegate and secure the network. Upon accumulating sufficient vote weight, the delegate will begin forging transactions and receiving block rewards. The delegate assigns a custom name to their address to differentiate it from other delegates. References API Endpoints Link AJV Schema Base | Delegate Registration","title":"Delegate Registration"},{"location":"core/transactions/types/delegate-registration/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 2 , \"nonce\" : \"3\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"7500000000\" , \"asset\" : { \"delegate\" : { \"username\" : \"sl33p\" } } }","title":"Json"},{"location":"core/transactions/types/delegate-registration/#serialised","text":"ff033f0100000002000300000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19200eb08bf010000000005736c333370","title":"Serialised"},{"location":"core/transactions/types/delegate-registration/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0200 Nonce: [9] 8 0x0300000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x00eb08bf01000000 Memo Length: [58] 1 0x00 Username Length: [59] 1 0x05 Username: [60] 5 0x736c333370","title":"Deserialised"},{"location":"core/transactions/types/delegate-resignation/","text":"Delegate Resignation \u00b6 TypeGroup Type 1 7 A 'Delegate Resignation' transaction allows a delegate to resign temporarily or permanently. If ranked in the top 53 Delegates, the delegate will be removed from their forging position immediately. A 'Permanent Resignation' is for delegates who wish to permanently retire their position as a delegate on the Solar Network. Once resigned permanently, a delegate cannot reinstate their candidacy. References API Endpoints Link AJV Schema Base | Delegate Resignation Json \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 7 , \"nonce\" : \"9\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"asset\" : { \"resignationType\" : 1 } } Serialised \u00b6 ff033f0100000007000900000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192000000000000000000eb08bf010000000005736c33337001 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0700 Nonce: [9] 8 0x0900000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Resignation Type [59] 1 0x01 Resignation types \u00b6 Resignation Type Value Description Temporary 0 Resign only for a short time. Delegate will be removed from forging. (the default when no resign type is declared) Permanent 1 Irreversible. Delegate will no longer be allowed to receive votes or forge. Revoke 2 Reverses a temporary resignation.","title":"Delegate Resignation"},{"location":"core/transactions/types/delegate-resignation/#delegate-resignation","text":"TypeGroup Type 1 7 A 'Delegate Resignation' transaction allows a delegate to resign temporarily or permanently. If ranked in the top 53 Delegates, the delegate will be removed from their forging position immediately. A 'Permanent Resignation' is for delegates who wish to permanently retire their position as a delegate on the Solar Network. Once resigned permanently, a delegate cannot reinstate their candidacy. References API Endpoints Link AJV Schema Base | Delegate Resignation","title":"Delegate Resignation"},{"location":"core/transactions/types/delegate-resignation/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 7 , \"nonce\" : \"9\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"asset\" : { \"resignationType\" : 1 } }","title":"Json"},{"location":"core/transactions/types/delegate-resignation/#serialised","text":"ff033f0100000007000900000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192000000000000000000eb08bf010000000005736c33337001","title":"Serialised"},{"location":"core/transactions/types/delegate-resignation/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0700 Nonce: [9] 8 0x0900000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Resignation Type [59] 1 0x01","title":"Deserialised"},{"location":"core/transactions/types/delegate-resignation/#resignation-types","text":"Resignation Type Value Description Temporary 0 Resign only for a short time. Delegate will be removed from forging. (the default when no resign type is declared) Permanent 1 Irreversible. Delegate will no longer be allowed to receive votes or forge. Revoke 2 Reverses a temporary resignation.","title":"Resignation types"},{"location":"core/transactions/types/htlc-claim/","text":"HTLC Claim \u00b6 HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 9 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is for the recipient to CLAIM funds from the sender - if they know the shared secret. References API Endpoints Link AJV Schema Base | HTLC Claim JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 9 , \"nonce\" : \"11\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"asset\" : { \"claim\" : { \"lockTransactionId\" : \"3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f\" , \"unlockSecret\" : \"c27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a\" } } } Serialised \u00b6 ff033f0100000009000b00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192000000000000000000003aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f20c27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0900 Nonce: [9] 8 0x0b00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Hash Type: [59] 1 0x00 Lock Id: [60] 32 0x3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f Unlock Secret Length: [92] 1 0x20 Unlock Secret: [93] 32 0xc27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a Supported hash types \u00b6 Hash Type Value SHA256 0 SHA384 1 SHA512 2 SHA3256 3 SHA3384 4 SHA3512 5 Keccak256 6 Keccak384 7 Keccak512 8","title":"Claim"},{"location":"core/transactions/types/htlc-claim/#htlc-claim","text":"HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 9 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is for the recipient to CLAIM funds from the sender - if they know the shared secret. References API Endpoints Link AJV Schema Base | HTLC Claim","title":"HTLC Claim"},{"location":"core/transactions/types/htlc-claim/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 9 , \"nonce\" : \"11\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"asset\" : { \"claim\" : { \"lockTransactionId\" : \"3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f\" , \"unlockSecret\" : \"c27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a\" } } }","title":"JSON"},{"location":"core/transactions/types/htlc-claim/#serialised","text":"ff033f0100000009000b00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192000000000000000000003aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f20c27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a","title":"Serialised"},{"location":"core/transactions/types/htlc-claim/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0900 Nonce: [9] 8 0x0b00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Hash Type: [59] 1 0x00 Lock Id: [60] 32 0x3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f Unlock Secret Length: [92] 1 0x20 Unlock Secret: [93] 32 0xc27f1ce845d8c29eebc9006be932b604fd06755521b1a8b0be4204c65377151a","title":"Deserialised"},{"location":"core/transactions/types/htlc-claim/#supported-hash-types","text":"Hash Type Value SHA256 0 SHA384 1 SHA512 2 SHA3256 3 SHA3384 4 SHA3512 5 Keccak256 6 Keccak384 7 Keccak512 8","title":"Supported hash types"},{"location":"core/transactions/types/htlc-lock/","text":"HTLC Lock \u00b6 HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 8 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is to LOCK funds of the sender and make them possible for retrieval by the recipient, if they know the shared secret. References API Endpoints Link AJV Schema Base | HTLC Lock JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 8 , \"nonce\" : \"10\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"amount\" : \"1\" , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" , \"asset\" : { \"lock\" : { \"secretHash\" : \"9c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b4\" , \"expiration\" : { \"type\" : 1 , \"value\" : 78740307 } } } } Serialised \u00b6 ff033f0100000008000a00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c0000000000000100000000000000029c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b401537bb1043f0995750207ecaf0ccf251c1265b92ad84f553662 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0800 Nonce: [9] 8 0x0a00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Amount: [59] 8 0x0100000000000000 Secret Hash Length: [67] 8 0x20 Secret Hash: [68] 32 0x9c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b4 Expiration Type: [100] 1 0x01 Expiration Value: [101] 4 0x537bb104 Recipient: [105] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Lock"},{"location":"core/transactions/types/htlc-lock/#htlc-lock","text":"HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 8 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is to LOCK funds of the sender and make them possible for retrieval by the recipient, if they know the shared secret. References API Endpoints Link AJV Schema Base | HTLC Lock","title":"HTLC Lock"},{"location":"core/transactions/types/htlc-lock/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 8 , \"nonce\" : \"10\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"amount\" : \"1\" , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" , \"asset\" : { \"lock\" : { \"secretHash\" : \"9c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b4\" , \"expiration\" : { \"type\" : 1 , \"value\" : 78740307 } } } }","title":"JSON"},{"location":"core/transactions/types/htlc-lock/#serialised","text":"ff033f0100000008000a00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c0000000000000100000000000000029c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b401537bb1043f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Serialised"},{"location":"core/transactions/types/htlc-lock/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0800 Nonce: [9] 8 0x0a00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Amount: [59] 8 0x0100000000000000 Secret Hash Length: [67] 8 0x20 Secret Hash: [68] 32 0x9c1a3815d49e0c9f78b872bfb017e825ea2db708158b70815526a830c85912b4 Expiration Type: [100] 1 0x01 Expiration Value: [101] 4 0x537bb104 Recipient: [105] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Deserialised"},{"location":"core/transactions/types/htlc-refund/","text":"HTLC Refund \u00b6 HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 10 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is for the sender to retrieve their locked funds, in the case of the recipient not claiming them using a CLAIM transactions. References API Endpoints Link AJV Schema Base | HTLC Refund JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 10 , \"nonce\" : \"11\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"amount\" : \"0\" , \"asset\" : { \"refund\" : { \"lockTransactionId\" : \"3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f\" } } } Serialised \u00b6 ff033f010000000a000b00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed1920000000000000000003aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0a00 Nonce: [9] 8 0x0b00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Lock Id: [59] 32 0x3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f","title":"Refund"},{"location":"core/transactions/types/htlc-refund/#htlc-refund","text":"HTLC transactions are not currently active on Solar's Mainnet. TypeGroup Type 1 10 A Hashed Time-Lock Contract (HTLC) is a set of transaction types that permits a designated party (the \"sender/seller\") to LOCK funds by disclosing the preimage (secret) of a hash. It also permits a second party (the \"recipient/buyer\") to CLAIM the funds, or after a timeout is reached enter a REFUND situation. The purpose of this transaction is for the sender to retrieve their locked funds, in the case of the recipient not claiming them using a CLAIM transactions. References API Endpoints Link AJV Schema Base | HTLC Refund","title":"HTLC Refund"},{"location":"core/transactions/types/htlc-refund/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 10 , \"nonce\" : \"11\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"0\" , \"amount\" : \"0\" , \"asset\" : { \"refund\" : { \"lockTransactionId\" : \"3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f\" } } }","title":"JSON"},{"location":"core/transactions/types/htlc-refund/#serialised","text":"ff033f010000000a000b00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed1920000000000000000003aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f","title":"Serialised"},{"location":"core/transactions/types/htlc-refund/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0a00 Nonce: [9] 8 0x0b00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x0000000000000000 Memo Length: [58] 1 0x00 Lock Id: [59] 32 0x3aade2b98391ba7230252530cdd5124183a9f4e582660666ae873da48173ea5f","title":"Deserialised"},{"location":"core/transactions/types/ipfs/","text":"IPFS \u00b6 TypeGroup Type 1 5 This transaction type utilises a special data field similar to the Memo to store Interplanetary File System data on the blockchain. This provides an easy way to timestamp and optionally encrypt and verify files. This implementation of the IPFS transaction type won\u2019t allow storing data on the blockchain - for that, special IPFS nodes are needed. References API Endpoints Link AJV Schema Base | IPFS JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 5 , \"nonce\" : \"7\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"ipfs\" : \"QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB\" } } Serialised \u00b6 ff033f0100000005000700000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000000012209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0500 Nonce: [9] 8 0x0700000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 IPFS Hash: [59] 34 0x12209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e IPFS hash \u00b6 Item Length (chars) Value IPFS Hash 46 QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB Decoded Base58 34 0x12209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e Hash Type 1 0x12 Hash Length 1 0x20 32-Byte Hash 32 0x9608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e","title":"IPFS"},{"location":"core/transactions/types/ipfs/#ipfs","text":"TypeGroup Type 1 5 This transaction type utilises a special data field similar to the Memo to store Interplanetary File System data on the blockchain. This provides an easy way to timestamp and optionally encrypt and verify files. This implementation of the IPFS transaction type won\u2019t allow storing data on the blockchain - for that, special IPFS nodes are needed. References API Endpoints Link AJV Schema Base | IPFS","title":"IPFS"},{"location":"core/transactions/types/ipfs/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 5 , \"nonce\" : \"7\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"ipfs\" : \"QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB\" } }","title":"JSON"},{"location":"core/transactions/types/ipfs/#serialised","text":"ff033f0100000005000700000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000000012209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e","title":"Serialised"},{"location":"core/transactions/types/ipfs/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0500 Nonce: [9] 8 0x0700000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 IPFS Hash: [59] 34 0x12209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e","title":"Deserialised"},{"location":"core/transactions/types/ipfs/#ipfs-hash","text":"Item Length (chars) Value IPFS Hash 46 QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB Decoded Base58 34 0x12209608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e Hash Type 1 0x12 Hash Length 1 0x20 32-Byte Hash 32 0x9608184d6cee2b9af8e6c2a46fc9318adf73329aeb8a86cf8472829fff5bb89e","title":"IPFS hash"},{"location":"core/transactions/types/legacy-transfer/","text":"Legacy Transfer ( DEPRECATED ) \u00b6 Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6) TypeGroup Type 1 0 A Transfer transaction enables a user to broadcast a transaction to the network sending SXP coins from one SXP wallet to another. All Solar transactions contain a special data field of 255 bytes known as the 'Memo'. This data field allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. References API Endpoints Link AJV Schema Base | Transfer Json \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 0 , \"nonce\" : \"1\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"Memo\" : \"This is a test Memo.\" , \"amount\" : \"100000000\" , \"expiration\" : 0 , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" } Serialised \u00b6 ff033f0100000000000100000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000001b54686973206973206120746573742076656e646f726669656c642e00e1f50500000000000000003f0995750207ecaf0ccf251c1265b92ad84f553662 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0000 Nonce: [9] 8 0x0100000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x1b Memo: [59] 26 0x54686973206973206120746573742076656e646f726669656c642e Amount: [85] 8 0x00e1f50500000000 Expiration: [93] 4 0x00000000 Recipient: [97] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Transfer (Legacy)"},{"location":"core/transactions/types/legacy-transfer/#legacy-transfer-deprecated","text":"Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6) TypeGroup Type 1 0 A Transfer transaction enables a user to broadcast a transaction to the network sending SXP coins from one SXP wallet to another. All Solar transactions contain a special data field of 255 bytes known as the 'Memo'. This data field allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. References API Endpoints Link AJV Schema Base | Transfer","title":"Legacy Transfer (DEPRECATED)"},{"location":"core/transactions/types/legacy-transfer/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 0 , \"nonce\" : \"1\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"Memo\" : \"This is a test Memo.\" , \"amount\" : \"100000000\" , \"expiration\" : 0 , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" }","title":"Json"},{"location":"core/transactions/types/legacy-transfer/#serialised","text":"ff033f0100000000000100000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000001b54686973206973206120746573742076656e646f726669656c642e00e1f50500000000000000003f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Serialised"},{"location":"core/transactions/types/legacy-transfer/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0000 Nonce: [9] 8 0x0100000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x1b Memo: [59] 26 0x54686973206973206120746573742076656e646f726669656c642e Amount: [85] 8 0x00e1f50500000000 Expiration: [93] 4 0x00000000 Recipient: [97] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662","title":"Deserialised"},{"location":"core/transactions/types/legacy-vote/","text":"Legacy Vote ( DEPRECATED ) \u00b6 Warning Vote (Type 3) has been deprecated, please visit 'TypeGroup 2, Type 2: Vote' to see the updated transaction. TypeGroup Type 1 3 The vote transaction type enables each address to vote for one delegate of their choosing to secure the network. Once an address votes for a delegate, funds can enter and leave the address as needed, and vote weight adjusts automatically. Voting does not send funds to the delegate\u2019s SXP address in question - it only assigns vote weight. Holders of SXP vote through their wallets for delegates who secure the network, insert blocks into the ledger, and create new SXP. The top 53 vote earners are named elected forging delegates. References API Endpoints Link AJV Schema Base | Vote Vote \u00b6 \u2248 JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"4\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 1 , \"votes\" : [ \"+cactus1549\" ] } } Serialised \u00b6 ff033f0100000003000400000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000010b0163616374757331353439 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0400000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x01 Vote Length: [60] 1 0x0b Vote Type: [61] 1 0x01 Vote: [62] 5 0x63616374757331353439 Unvote \u00b6 JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"5\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 1 , \"votes\" : [ \"-cactus1549\" ] } } Serialised \u00b6 ff033f0100000003000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000010b0063616374757331353439 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0400000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x01 Vote Length: [60] 1 0x0b Vote Type: [61] 1 0x00 Vote: [62] 5 0x63616374757331353439 Switch Vote \u00b6 JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"type\" : 3 , \"nonce\" : \"5\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 2 , \"votes\" : [ \"-cactus1549\" , \"+sl33p\" ] } } Serialised \u00b6 ff033f0100000003000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000020b00636163747573313534390601736c333370 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0200000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x02 Vote 1 Length: [60] 1 0x0b Vote 1 Type: [61] 1 0x00 Vote 1: [62] 10 0x63616374757331353439 Vote 2 Length: [72] 1 0x06 Vote 2 Type: [73] 1 0x01 Vote 2: [74] 10 0x736C333370","title":"Vote (Legacy)"},{"location":"core/transactions/types/legacy-vote/#legacy-vote-deprecated","text":"Warning Vote (Type 3) has been deprecated, please visit 'TypeGroup 2, Type 2: Vote' to see the updated transaction. TypeGroup Type 1 3 The vote transaction type enables each address to vote for one delegate of their choosing to secure the network. Once an address votes for a delegate, funds can enter and leave the address as needed, and vote weight adjusts automatically. Voting does not send funds to the delegate\u2019s SXP address in question - it only assigns vote weight. Holders of SXP vote through their wallets for delegates who secure the network, insert blocks into the ledger, and create new SXP. The top 53 vote earners are named elected forging delegates. References API Endpoints Link AJV Schema Base | Vote","title":"Legacy Vote (DEPRECATED)"},{"location":"core/transactions/types/legacy-vote/#vote","text":"\u2248","title":"Vote"},{"location":"core/transactions/types/legacy-vote/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"4\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 1 , \"votes\" : [ \"+cactus1549\" ] } }","title":"JSON"},{"location":"core/transactions/types/legacy-vote/#serialised","text":"ff033f0100000003000400000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000010b0163616374757331353439","title":"Serialised"},{"location":"core/transactions/types/legacy-vote/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0400000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x01 Vote Length: [60] 1 0x0b Vote Type: [61] 1 0x01 Vote: [62] 5 0x63616374757331353439","title":"Deserialised"},{"location":"core/transactions/types/legacy-vote/#unvote","text":"","title":"Unvote"},{"location":"core/transactions/types/legacy-vote/#json_1","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"5\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 1 , \"votes\" : [ \"-cactus1549\" ] } }","title":"JSON"},{"location":"core/transactions/types/legacy-vote/#serialised_1","text":"ff033f0100000003000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000010b0063616374757331353439","title":"Serialised"},{"location":"core/transactions/types/legacy-vote/#deserialised_1","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0400000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x01 Vote Length: [60] 1 0x0b Vote Type: [61] 1 0x00 Vote: [62] 5 0x63616374757331353439","title":"Deserialised"},{"location":"core/transactions/types/legacy-vote/#switch-vote","text":"","title":"Switch Vote"},{"location":"core/transactions/types/legacy-vote/#json_2","text":"{ \"version\" : 3 , \"network\" : 63 , \"type\" : 3 , \"nonce\" : \"5\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"count\" : 2 , \"votes\" : [ \"-cactus1549\" , \"+sl33p\" ] } }","title":"JSON"},{"location":"core/transactions/types/legacy-vote/#serialised_2","text":"ff033f0100000003000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c000000000000020b00636163747573313534390601736c333370","title":"Serialised"},{"location":"core/transactions/types/legacy-vote/#deserialised_2","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0200000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x02 Vote 1 Length: [60] 1 0x0b Vote 1 Type: [61] 1 0x00 Vote 1: [62] 10 0x63616374757331353439 Vote 2 Length: [72] 1 0x06 Vote 2 Type: [73] 1 0x01 Vote 2: [74] 10 0x736C333370","title":"Deserialised"},{"location":"core/transactions/types/second-signature/","text":"Second Signature Registration \u00b6 TypeGroup Type 1 1 This transaction type enables a user to add an extra layer of security to their address by creating a second passphrase, using mnemonic code for generating deterministic keys via BIP-39 to produce an additional mnemonic. Once a second signature has been registered to a wallet, the owner of the wallet will then be required to input their primary and secondary passphrase when sending a transaction to the network. References API Endpoints Link AJV Schema Base | Second Signature Json \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 1 , \"nonce\" : \"2\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"signature\" : { \"publicKey\" : \"02877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9\" } } } Serialised \u00b6 ff033f0100000001000200000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000000002877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0100 Nonce: [9] 8 0x0200000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Second PublicKey: [59] 33 0x02877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9","title":"Second Signature Registration"},{"location":"core/transactions/types/second-signature/#second-signature-registration","text":"TypeGroup Type 1 1 This transaction type enables a user to add an extra layer of security to their address by creating a second passphrase, using mnemonic code for generating deterministic keys via BIP-39 to produce an additional mnemonic. Once a second signature has been registered to a wallet, the owner of the wallet will then be required to input their primary and secondary passphrase when sending a transaction to the network. References API Endpoints Link AJV Schema Base | Second Signature","title":"Second Signature Registration"},{"location":"core/transactions/types/second-signature/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 1 , \"nonce\" : \"2\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"5000000\" , \"asset\" : { \"signature\" : { \"publicKey\" : \"02877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9\" } } }","title":"Json"},{"location":"core/transactions/types/second-signature/#serialised","text":"ff033f0100000001000200000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192404b4c00000000000002877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9","title":"Serialised"},{"location":"core/transactions/types/second-signature/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header Flag: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0100 Nonce: [9] 8 0x0200000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x404b4c0000000000 Memo Length: [58] 1 0x00 Second PublicKey: [59] 33 0x02877e4f35c76abaeb152b128670db0a7ae10b3999afcd28a42938b653fbf87ae9","title":"Deserialised"},{"location":"core/transactions/types/transfer/","text":"Transfer \u00b6 This page contains the latest Type 6 Transfer Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being TypeGroup Type 1 6 A transfer allows one or multiple payments (sending SXP coins from one SXP wallet to another) to be combined and broadcast to the network as a single transaction. This benefits the end user and delegates by lowering transaction fees per payment and reducing congestion. Solar Core allows up to 256 payments to be combined within a single transaction. All Solar transactions contain a special data field of 255 bytes known as the 'Memo'. This data field allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. References API Endpoints Link AJV Schema Base | Transfer JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"type\" : 6 , \"nonce\" : \"8\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"50000000\" , \"amount\" : \"0\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"1\" , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjHT1fxVsW75eaQUPN4U2SEgFVU8ZqSVgk\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVzKH9r6u8UGcd2Ki7tAzQtB5Pa6FRn4GA\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVhLL7NR8WhkKRfYDzSmGxUH4Gg5k3uis7\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SeznGToSzxw7maHDWXD2eRoTBSS2BmK8nU\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SfVFPA5e2JYcgJeUmVBEsFCYCWpt5xkZ5o\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQEDRvC79Tqqmv85FrnqG4AxAxFoYPADCa\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SX87pA6bJdQQf57JnUUkzVJxZ2n9jxDgeN\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SMMJgffKfvtERv3d4MFeypAg53UcxJ9dE1\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SefdTc8Sjx5pqSUu3TpfjFw6epyPYWoooQ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SSB1coESUy1GHsXjxd1Qzw5e1HqMUNQzRG\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SNtHvv7fr23EcKHkXeSwCYz6w2ZLaT7y9y\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SUogQH6n5EjwFnXwDapkJ1jri13Hrj1Ppz\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SY4RAvsUTZ5q9PR9Df28vguH6LfRFrgB3a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SPZynxFxAtSBVKQWQW8LQPtrt87CBqpn7i\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sj6YjvZYDH4xh8HsRiYzWLBpeAkx65Nc1W\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SX3XMHrMSbXLLNGcRVbMBy4WgQbS3MZzWV\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SYqJcLu2wWYHDYvSomgsDPtnteCVhpNCTQ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sa1v9xUZaniWKiCGzEV7qYXt1pW3G3XJbi\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQVwXdWCqouKWQhaAJMsNieZmjE3GLYYiz\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SR1ZhBPLnSvrq3SQt8zeqBshemiudGb9fe\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sd1beR5X9pKKEYSxYWc7XXozC52y8QGJSt\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SScQEYdkr5mPGD9uwFrdk15KjyKAfwHZFc\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SRMhbyiuDa14kQKE7g8NB9jrBE8Jh9NwPv\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SUwp9puY8x9GYbvq8X4eYE5UjQxCgmNJMJ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ShomZcGU7c15EUXTUAfZB2QHw17UsHxxyf\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ScCTPEwY4Bz2cTJJxL4Fy388zRTrAKmV8m\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ShqpcENQP4gSqRcrC1oqAzSiNscvutyQ3B\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjcaXuPypJxUv8qg4z7SaAry9ipqkVZsV2\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SZk35koLSrjSetXda5toYEhNNv3GNbosDN\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVBBoMW8u2TiH4C59yi5wxk5mis81NJupL\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SgZEJxkDxfDSWP38QjkDkAf9uQLwb4XL8N\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SgE9Mqj1ZX9ziL9bJUUaRXzwNibEocJm5s\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SYkqTvG2n54Fbg1hAiZDeK33DYwCYZWcuC\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjUcnukBRT6qxLRbbyrsQxVjbMdVLYRi5a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SNSmzTzFPmzSmaKgcDj32nz7aJp1dJqJ5a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SRdLAGYYk8HVeL3iJxRmYxZ9qvGUdRBiub\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQf1Dpta8b94FYjKDBu2dfFF4EdUfLMnoU\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Si5KNcn97V6TZYH1ccZZpyMvCJZmKuLEzv\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SfxX8nJVJ5rUbAXPVgFMXhpEbXXp1P3aWc\" } ] } } Serialised \u00b6 ff033f0100000006000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19280f0fa020000000000280001000000000000003f0995750207ecaf0ccf251c1265b92ad84f55366201000000000000003ff13809c4c5fb2b3967a9b40efc70843f7db462ad01000000000000003f5f60e0594115b71d5b136cf929c8504082ac199d01000000000000003f5c2aaead4ce542788406c54e1ae31f1afdb7f08101000000000000003fc2308975254751ead4df705fc76aa84116c5e34e01000000000000003fc792d1958bb950596d0e7cd0bef325062009684801000000000000003f2031100e628422b8409810fdb438e874765846ba01000000000000003f6bd2c24bded5fdfd7888a28b3c6990503699b5e801000000000000003f009ffbb10efc47ad00a0a29cc2ef6e6c83d8c6ec01000000000000003fbe9147febbfe462cdbfda8575c18dabe85db4f5b01000000000000003f358634b58d88abf4aef3a6fe264b4ad18b74e98b01000000000000003f11745fc47a9c58c4e6f5a74eb59411ac102c6a8801000000000000003f5265ceb5d6102474ea7d0f401d6e6b9f13864a0501000000000000003f7617b5f3b82f153e388b4b200abd8636fff73dd501000000000000003f18f5df4fe3108277bfa4e39071fead9d59b35b8f01000000000000003fef283e95c3fdf0e2df9ba8321407c5621f98687601000000000000003f6af453a17439c9c258c25c707aa9fc1f3b59d9b401000000000000003f7e94f3954665ebd80ced3d434c67cd4351966f2b01000000000000003f8b8ee88e27291e33ce5403ea9b159235887dcfa901000000000000003f232a71b6b2586d5b02b6a72db08759066ba2a92b01000000000000003f28c4b220f14f3745f3fff6d3c066ba2353393eb601000000000000003fac67d5bfbef4a7ed8149727b93a01e903d84ee0c01000000000000003f3a537bef2ed296a54adc354967efe3a5e52cdfb801000000000000003f2c939e4633bd96ccc1d1509dbe794299603aad9901000000000000003f53ef9af027797e4827d708d9ed47c511f4ea552401000000000000003fe103c02fc06140aeac275f8e579f3397d041f81701000000000000003fa37d6366d765f5e446fc18ddcc3da3fa300cf6bb01000000000000003fe1671fea563be042824751a3465a7dbbc482794201000000000000003ff4d63847bf07a9faad83bd69fed408b3b734dce801000000000000003f888e092eba4cbd5eab9e10646661f5a440915f9d01000000000000003f5677152f9d640b175894c8da0b9f30bad3801aff01000000000000003fd34bb692e52d515398d00fd57ce2c8bfd348055401000000000000003fcfafad73ebddc38d53317c80cdbf6d343c331d6201000000000000003f7dbca0c01f96de655cf41eb53e1b8d5e2ffa260701000000000000003ff354c71350a110a7b45b5095ed0a4601bf4bbf9d01000000000000003f0ca0fbbfb8e3f615ec4eedaef6281d4d60a8f2b201000000000000003f2f885faaf6a3fcc38b1f35c652bf72f0fd7ac60301000000000000003f24e14548f3874b9413a28f258c2b73d35ec2b2f901000000000000003fe3f48b5211d1f21034bc15908259901ecf972be801000000000000003fccbb32ea36fad927cb2c46cbc63930db6cda829d Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0600 Nonce: [9] 8 0x0800000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x80f0fa0200000000 Memo Length: [58] 1 0x00 Number of Transfers: [59] 2 0x2800 Amount 1: [61] 8 0x0100000000000000 Recipient 1: [69] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662 ............ .... .. .................. Amount 40: [1192] 8 0x0100000000000000 Recipient 40: [1200] 21 0x3fccbb32ea36fad927cb2c46cbc63930db6cda829d Migrating from legacy (Type 0) Transfers \u00b6 The biggest change from legacy ( Type 0 ) Transfers to the new Type 6 Transfer is the ability to send to as many as 256 recipients in a single transaction. This not only makes sending to multiple recipients easier and more intuitive, this also helps minimise filling up the Solar blockchain with unnecessary bloat. The steps needed to utilise the new Type 6 Transfer will depend heavily on what SDK you use and how your code is implementated, but it will generally require very few changes. Example The code below demonstrates the changes that are neccessary when using the Solar TypeScript Crypto SDK: - .recipientId(\"Address of Recipient\") - .amount(100000000) + .addTransfer(\"Address of Recipient 1\", 100000000) Tip See the full SDK examples of sending a Type 6 Transfer at the following links: Python: Creating and broadcasting a transfer transaction TypeScript: Creating and broadcasting a transfer transaction Make sure you are also using the latest SDK releases Python SDK: https://pypi.org/project/solar-crypto TypeScript SDK: https://www.npmjs.com/package/@solar-network/crypto","title":"Transfer"},{"location":"core/transactions/types/transfer/#transfer","text":"This page contains the latest Type 6 Transfer Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being TypeGroup Type 1 6 A transfer allows one or multiple payments (sending SXP coins from one SXP wallet to another) to be combined and broadcast to the network as a single transaction. This benefits the end user and delegates by lowering transaction fees per payment and reducing congestion. Solar Core allows up to 256 payments to be combined within a single transaction. All Solar transactions contain a special data field of 255 bytes known as the 'Memo'. This data field allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. References API Endpoints Link AJV Schema Base | Transfer","title":"Transfer"},{"location":"core/transactions/types/transfer/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"type\" : 6 , \"nonce\" : \"8\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"50000000\" , \"amount\" : \"0\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"1\" , \"recipientId\" : \"SNAgA2XCRZDKfm5Vu9h4KR1bZw5xn9EiC3\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjHT1fxVsW75eaQUPN4U2SEgFVU8ZqSVgk\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVzKH9r6u8UGcd2Ki7tAzQtB5Pa6FRn4GA\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVhLL7NR8WhkKRfYDzSmGxUH4Gg5k3uis7\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SeznGToSzxw7maHDWXD2eRoTBSS2BmK8nU\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SfVFPA5e2JYcgJeUmVBEsFCYCWpt5xkZ5o\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQEDRvC79Tqqmv85FrnqG4AxAxFoYPADCa\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SX87pA6bJdQQf57JnUUkzVJxZ2n9jxDgeN\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SMMJgffKfvtERv3d4MFeypAg53UcxJ9dE1\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SefdTc8Sjx5pqSUu3TpfjFw6epyPYWoooQ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SSB1coESUy1GHsXjxd1Qzw5e1HqMUNQzRG\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SNtHvv7fr23EcKHkXeSwCYz6w2ZLaT7y9y\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SUogQH6n5EjwFnXwDapkJ1jri13Hrj1Ppz\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SY4RAvsUTZ5q9PR9Df28vguH6LfRFrgB3a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SPZynxFxAtSBVKQWQW8LQPtrt87CBqpn7i\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sj6YjvZYDH4xh8HsRiYzWLBpeAkx65Nc1W\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SX3XMHrMSbXLLNGcRVbMBy4WgQbS3MZzWV\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SYqJcLu2wWYHDYvSomgsDPtnteCVhpNCTQ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sa1v9xUZaniWKiCGzEV7qYXt1pW3G3XJbi\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQVwXdWCqouKWQhaAJMsNieZmjE3GLYYiz\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SR1ZhBPLnSvrq3SQt8zeqBshemiudGb9fe\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Sd1beR5X9pKKEYSxYWc7XXozC52y8QGJSt\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SScQEYdkr5mPGD9uwFrdk15KjyKAfwHZFc\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SRMhbyiuDa14kQKE7g8NB9jrBE8Jh9NwPv\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SUwp9puY8x9GYbvq8X4eYE5UjQxCgmNJMJ\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ShomZcGU7c15EUXTUAfZB2QHw17UsHxxyf\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ScCTPEwY4Bz2cTJJxL4Fy388zRTrAKmV8m\" }, { \"amount\" : \"1\" , \"recipientId\" : \"ShqpcENQP4gSqRcrC1oqAzSiNscvutyQ3B\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjcaXuPypJxUv8qg4z7SaAry9ipqkVZsV2\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SZk35koLSrjSetXda5toYEhNNv3GNbosDN\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SVBBoMW8u2TiH4C59yi5wxk5mis81NJupL\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SgZEJxkDxfDSWP38QjkDkAf9uQLwb4XL8N\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SgE9Mqj1ZX9ziL9bJUUaRXzwNibEocJm5s\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SYkqTvG2n54Fbg1hAiZDeK33DYwCYZWcuC\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SjUcnukBRT6qxLRbbyrsQxVjbMdVLYRi5a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SNSmzTzFPmzSmaKgcDj32nz7aJp1dJqJ5a\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SRdLAGYYk8HVeL3iJxRmYxZ9qvGUdRBiub\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SQf1Dpta8b94FYjKDBu2dfFF4EdUfLMnoU\" }, { \"amount\" : \"1\" , \"recipientId\" : \"Si5KNcn97V6TZYH1ccZZpyMvCJZmKuLEzv\" }, { \"amount\" : \"1\" , \"recipientId\" : \"SfxX8nJVJ5rUbAXPVgFMXhpEbXXp1P3aWc\" } ] } }","title":"JSON"},{"location":"core/transactions/types/transfer/#serialised","text":"ff033f0100000006000500000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19280f0fa020000000000280001000000000000003f0995750207ecaf0ccf251c1265b92ad84f55366201000000000000003ff13809c4c5fb2b3967a9b40efc70843f7db462ad01000000000000003f5f60e0594115b71d5b136cf929c8504082ac199d01000000000000003f5c2aaead4ce542788406c54e1ae31f1afdb7f08101000000000000003fc2308975254751ead4df705fc76aa84116c5e34e01000000000000003fc792d1958bb950596d0e7cd0bef325062009684801000000000000003f2031100e628422b8409810fdb438e874765846ba01000000000000003f6bd2c24bded5fdfd7888a28b3c6990503699b5e801000000000000003f009ffbb10efc47ad00a0a29cc2ef6e6c83d8c6ec01000000000000003fbe9147febbfe462cdbfda8575c18dabe85db4f5b01000000000000003f358634b58d88abf4aef3a6fe264b4ad18b74e98b01000000000000003f11745fc47a9c58c4e6f5a74eb59411ac102c6a8801000000000000003f5265ceb5d6102474ea7d0f401d6e6b9f13864a0501000000000000003f7617b5f3b82f153e388b4b200abd8636fff73dd501000000000000003f18f5df4fe3108277bfa4e39071fead9d59b35b8f01000000000000003fef283e95c3fdf0e2df9ba8321407c5621f98687601000000000000003f6af453a17439c9c258c25c707aa9fc1f3b59d9b401000000000000003f7e94f3954665ebd80ced3d434c67cd4351966f2b01000000000000003f8b8ee88e27291e33ce5403ea9b159235887dcfa901000000000000003f232a71b6b2586d5b02b6a72db08759066ba2a92b01000000000000003f28c4b220f14f3745f3fff6d3c066ba2353393eb601000000000000003fac67d5bfbef4a7ed8149727b93a01e903d84ee0c01000000000000003f3a537bef2ed296a54adc354967efe3a5e52cdfb801000000000000003f2c939e4633bd96ccc1d1509dbe794299603aad9901000000000000003f53ef9af027797e4827d708d9ed47c511f4ea552401000000000000003fe103c02fc06140aeac275f8e579f3397d041f81701000000000000003fa37d6366d765f5e446fc18ddcc3da3fa300cf6bb01000000000000003fe1671fea563be042824751a3465a7dbbc482794201000000000000003ff4d63847bf07a9faad83bd69fed408b3b734dce801000000000000003f888e092eba4cbd5eab9e10646661f5a440915f9d01000000000000003f5677152f9d640b175894c8da0b9f30bad3801aff01000000000000003fd34bb692e52d515398d00fd57ce2c8bfd348055401000000000000003fcfafad73ebddc38d53317c80cdbf6d343c331d6201000000000000003f7dbca0c01f96de655cf41eb53e1b8d5e2ffa260701000000000000003ff354c71350a110a7b45b5095ed0a4601bf4bbf9d01000000000000003f0ca0fbbfb8e3f615ec4eedaef6281d4d60a8f2b201000000000000003f2f885faaf6a3fcc38b1f35c652bf72f0fd7ac60301000000000000003f24e14548f3874b9413a28f258c2b73d35ec2b2f901000000000000003fe3f48b5211d1f21034bc15908259901ecf972be801000000000000003fccbb32ea36fad927cb2c46cbc63930db6cda829d","title":"Serialised"},{"location":"core/transactions/types/transfer/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0600 Nonce: [9] 8 0x0800000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x80f0fa0200000000 Memo Length: [58] 1 0x00 Number of Transfers: [59] 2 0x2800 Amount 1: [61] 8 0x0100000000000000 Recipient 1: [69] 21 0x3f0995750207ecaf0ccf251c1265b92ad84f553662 ............ .... .. .................. Amount 40: [1192] 8 0x0100000000000000 Recipient 40: [1200] 21 0x3fccbb32ea36fad927cb2c46cbc63930db6cda829d","title":"Deserialised"},{"location":"core/transactions/types/transfer/#migrating-from-legacy-type-0-transfers","text":"The biggest change from legacy ( Type 0 ) Transfers to the new Type 6 Transfer is the ability to send to as many as 256 recipients in a single transaction. This not only makes sending to multiple recipients easier and more intuitive, this also helps minimise filling up the Solar blockchain with unnecessary bloat. The steps needed to utilise the new Type 6 Transfer will depend heavily on what SDK you use and how your code is implementated, but it will generally require very few changes. Example The code below demonstrates the changes that are neccessary when using the Solar TypeScript Crypto SDK: - .recipientId(\"Address of Recipient\") - .amount(100000000) + .addTransfer(\"Address of Recipient 1\", 100000000) Tip See the full SDK examples of sending a Type 6 Transfer at the following links: Python: Creating and broadcasting a transfer transaction TypeScript: Creating and broadcasting a transfer transaction Make sure you are also using the latest SDK releases Python SDK: https://pypi.org/project/solar-crypto TypeScript SDK: https://www.npmjs.com/package/@solar-network/crypto","title":"Migrating from legacy (Type 0) Transfers"},{"location":"core/transactions/types/vote/","text":"Vote \u00b6 TypeGroup Type 2 2 A key feature of the Solar DPoS model is the ability to vote (or stake) for one or multiple delegates at once. Anywhere from 1 to 53 delegates in total may be voted for. The wallet's vote weight can be distributed evenly across their chosen delegates or customised by setting the distribution percentage as desired. Once a wallet is actively voting, funds can be sent and received freely and its vote weight adjusts accordingly. To vote for a new delegate or set of delegates, create a new vote transaction containing the list of delegates for which you'd like to vote. To stop voting altogether, simply create a new vote transaction containing an empty delegate list, also known as a ' Cancel Vote .' Voting does not require sending funds to the delegate or delegates - it only assigns the wallet's vote weight. References API Endpoints Link AJV Schema Base | Vote JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 2 , \"type\" : 2 , \"nonce\" : \"13\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"9000000\" , \"asset\" : { \"votes\" : { \"gym\" : 50 , \"cactus1549\" : 25 , \"sl33p\" : 25 } } } Serialised \u00b6 ff033f0200000002000d00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192405489000000000000030367796d88130a63616374757331353439c40905736c333370c409 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x02000000 Type: [7] 2 0x0200 Nonce: [9] 8 0x0d00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x4054890000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x03 Vote 1 Name Length: [60] 1 0x03 Vote 1 Name: [61] 3 0x67796d Vote 1 Percentage: [64] 2 0x8813 Vote 2 Name Length: [66] 1 0x0a Vote 2 Name: [67] 10 0x63616374757331353439 Vote 2 Percentage: [77] 2 0xc409 Vote 3 Name Length: [79] 1 0x05 Vote 3 Name: [80] 5 0x736c333370 Vote 3 Percentage: [85] 2 0xc409 Cancel Vote \u00b6 JSON \u00b6 { \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"14\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"9000000\" , \"asset\" : {} } Serialised \u00b6 ff033f0100000003000e00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19240548900000000000000 Deserialised \u00b6 Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0e00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x4054890000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x00","title":"Vote"},{"location":"core/transactions/types/vote/#vote","text":"TypeGroup Type 2 2 A key feature of the Solar DPoS model is the ability to vote (or stake) for one or multiple delegates at once. Anywhere from 1 to 53 delegates in total may be voted for. The wallet's vote weight can be distributed evenly across their chosen delegates or customised by setting the distribution percentage as desired. Once a wallet is actively voting, funds can be sent and received freely and its vote weight adjusts accordingly. To vote for a new delegate or set of delegates, create a new vote transaction containing the list of delegates for which you'd like to vote. To stop voting altogether, simply create a new vote transaction containing an empty delegate list, also known as a ' Cancel Vote .' Voting does not require sending funds to the delegate or delegates - it only assigns the wallet's vote weight. References API Endpoints Link AJV Schema Base | Vote","title":"Vote"},{"location":"core/transactions/types/vote/#json","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 2 , \"type\" : 2 , \"nonce\" : \"13\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"9000000\" , \"asset\" : { \"votes\" : { \"gym\" : 50 , \"cactus1549\" : 25 , \"sl33p\" : 25 } } }","title":"JSON"},{"location":"core/transactions/types/vote/#serialised","text":"ff033f0200000002000d00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192405489000000000000030367796d88130a63616374757331353439c40905736c333370c409","title":"Serialised"},{"location":"core/transactions/types/vote/#deserialised","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x02000000 Type: [7] 2 0x0200 Nonce: [9] 8 0x0d00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x4054890000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x03 Vote 1 Name Length: [60] 1 0x03 Vote 1 Name: [61] 3 0x67796d Vote 1 Percentage: [64] 2 0x8813 Vote 2 Name Length: [66] 1 0x0a Vote 2 Name: [67] 10 0x63616374757331353439 Vote 2 Percentage: [77] 2 0xc409 Vote 3 Name Length: [79] 1 0x05 Vote 3 Name: [80] 5 0x736c333370 Vote 3 Percentage: [85] 2 0xc409","title":"Deserialised"},{"location":"core/transactions/types/vote/#cancel-vote","text":"","title":"Cancel Vote"},{"location":"core/transactions/types/vote/#json_1","text":"{ \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 3 , \"nonce\" : \"14\" , \"senderPublicKey\" : \"034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192\" , \"fee\" : \"9000000\" , \"asset\" : {} }","title":"JSON"},{"location":"core/transactions/types/vote/#serialised_1","text":"ff033f0100000003000e00000000000000034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed19240548900000000000000","title":"Serialised"},{"location":"core/transactions/types/vote/#deserialised_1","text":"Key Pos. Size (bytes) Value (hex) Header: [0] 1 0xff Version: [1] 1 0x03 Network: [2] 1 0x3f TypeGroup: [3] 4 0x01000000 Type: [7] 2 0x0300 Nonce: [9] 8 0x0e00000000000000 SenderPublicKey: [17] 33 0x034151a3ec46b5670a682b0a63394f863587d1bc97483b1b6c70eb58e7f0aed192 Fee: [50] 8 0x4054890000000000 Memo Length: [58] 1 0x00 Vote Count: [59] 1 0x00","title":"Deserialised"},{"location":"core/updates/3.3.0/","text":"Release 3.3.0 \u00b6 Time critical update This new release will activate new milestones at block height 671,988 (estimated at around 30th May 2022 at 00:00 UTC). Changes since 3.2.5 \u00b6 New features \u00b6 automatic allocation of 5% of forging rewards for development funding following a governance vote on the issue bip340 schnorr signatures now used for improved security and less technical debt empty but valid wallets now show as empty wallets rather than returning an error via the api last block id string is now returned in the delegate attribute and in the api rather than the whole block more hashing algorithms included for hashed timelock contract transactions for better interoperability new voters attribute added to the api response for delegates to show how many voters each delegate has p2p port of a node can now be freely changed without any problems memo is now supported in every transaction type Bug fixes \u00b6 correct fee burning database index is now dropped last block data is correctly updated in the delegate attribute following a rollback more resilient fork recovery updater reruns pnpm install after building to resolve some dependency issues Maintenance \u00b6 added filtering by transaction version to the swagger page on the api block headers now only include specific properties blocks are now broadcasted to all peers rather than just a few blocks are only broadcasted if there are >= 2 seconds remaining in the slot core transaction handlers have been unified delegate name now used in the vote attribute rather than the public key legacy code removed or fixed where appropriate multisignature registrations reactivated and no longer use participant signatures in the registration transaction peers are always polled for blocks in case a node does not receive a block normally removed the incompatible transaction handler inherited from upstream code as it does not apply here serialised vote payloads no longer have 0xff padding in v3 transactions for the delegate name upstream wallet support is now removed due to breaking changes in core voting using the public key asset is disabled in v3 transactions Update instructions \u00b6 Note that this is not the usual solar update command! Please update your mainnet node with the following command. solar plugin:update @alessiodf/rocket-boot && solar rocket:purge --force && solar update","title":"3.3.0"},{"location":"core/updates/3.3.0/#release-330","text":"Time critical update This new release will activate new milestones at block height 671,988 (estimated at around 30th May 2022 at 00:00 UTC).","title":"Release 3.3.0"},{"location":"core/updates/3.3.0/#changes-since-325","text":"","title":"Changes since 3.2.5"},{"location":"core/updates/3.3.0/#new-features","text":"automatic allocation of 5% of forging rewards for development funding following a governance vote on the issue bip340 schnorr signatures now used for improved security and less technical debt empty but valid wallets now show as empty wallets rather than returning an error via the api last block id string is now returned in the delegate attribute and in the api rather than the whole block more hashing algorithms included for hashed timelock contract transactions for better interoperability new voters attribute added to the api response for delegates to show how many voters each delegate has p2p port of a node can now be freely changed without any problems memo is now supported in every transaction type","title":"New features"},{"location":"core/updates/3.3.0/#bug-fixes","text":"correct fee burning database index is now dropped last block data is correctly updated in the delegate attribute following a rollback more resilient fork recovery updater reruns pnpm install after building to resolve some dependency issues","title":"Bug fixes"},{"location":"core/updates/3.3.0/#maintenance","text":"added filtering by transaction version to the swagger page on the api block headers now only include specific properties blocks are now broadcasted to all peers rather than just a few blocks are only broadcasted if there are >= 2 seconds remaining in the slot core transaction handlers have been unified delegate name now used in the vote attribute rather than the public key legacy code removed or fixed where appropriate multisignature registrations reactivated and no longer use participant signatures in the registration transaction peers are always polled for blocks in case a node does not receive a block normally removed the incompatible transaction handler inherited from upstream code as it does not apply here serialised vote payloads no longer have 0xff padding in v3 transactions for the delegate name upstream wallet support is now removed due to breaking changes in core voting using the public key asset is disabled in v3 transactions","title":"Maintenance"},{"location":"core/updates/3.3.0/#update-instructions","text":"Note that this is not the usual solar update command! Please update your mainnet node with the following command. solar plugin:update @alessiodf/rocket-boot && solar rocket:purge --force && solar update","title":"Update instructions"},{"location":"core/updates/4.0.1/","text":"4.0.1 Nebula \u00b6 Time critical update The new voting mechanism, new transfers, and temporary delegate resignations will be available from block 1,175,000 on 15th July 2022. Changes since 3.3.0 \u00b6 This is the first major update of Solar Core since the launch of Mainnet. Click on the following link to read a full summary of the 4.x release: https://github.com/Solar-network/core/pull/97 Highlights \u00b6 Introduction of v3 transactions, featuring: Combined Transfer and MultiPayment transactions New Vote transaction type New 'Temporary' and 'Permanent' 'Delegate Resignation' types Optional Transaction Memos Improved Core Crypto web browser compatibility Tighter schema validation Near-instantaneous fork recovery CPU count-based service worker allocation Improved logging and errors descriptions See all of the changes here: github.com/Solar-network/core/compare/3.3.0...4.0.1 Requirements \u00b6 Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB Forger Requirements Recommended Minimum CPUs 4 ( dedicated ) 2 ( dedicated ) RAM 16GB 8GB HDD 100GB - 120GB ( SSD ) 80GB ( SSD ) Update instructions \u00b6 Note that this is not the usual solar update command! Update your Mainnet node with the following command: wget -4O- https://gist.githubusercontent.com/alessiodf/4faa98978ce547c1d8e96696f1d84e97/raw/cd9e7b83de0e5ac26a2e745d9452c9ed1d5c5195/update.sh | bash v3 transaction changes \u00b6 There are several key transaction changes to be aware of in Solar Core 4.x . The 'memo' \u00b6 All Solar transactions now contain a special 255-byte data field known as a 'Memo' and allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. This was previously known as the vendorField and was only available on certain transaction types. v3 transfer \u00b6 TypeGroup Type 1 6 One of the most important changes is the introduction of the new Transfer transaction type. Formerly, a single send transaction made use of v2-style Transfers (Type 0) whereas two or more sends required using a v2 MultiPayment transaction (Type 6). Under Solar Core 4.x , these have been combined under the MultiPayment pattern and are now known simply as 'Transfer' (Type 6), removing the unnecessary requirement of two separate transaction types. See the v3 Transfer structure here . TypeScript Code Example: const { Transactions , Managers , Utils } = require ( \"@solar-network/crypto\" ); const { Connection } = require ( \"@solar-network/client\" ); // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); // Set the network configuration Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 972604 ); ( async () => { // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . memo ( \"This is an example memo\" ) . addTransfer ( \"Address of Recipient Wallet 1\" , 1 * 1e8 ) . addTransfer ( \"Address of Recipient Wallet 2\" , 1 * 1e8 ) . addTransfer ( \"Address of Recipient Wallet 3\" , 1 * 1e8 ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); See the Python code example here . v3 Vote \u00b6 TypeGroup Type 2 2 Voting has undergone a significant conceptual change in Core 4.x . Previously, a wallet could vote for only one delegate at a time. Under the new scheme, a wallet can vote for up to 53 delegates in total as well as optionally customise the distribution of their vote weight. For instance, the default behaviour of voting for three delegates where no custom distribution is specified would look as follows: { ... \"votes\" : { \"cactus1549\" : 33.34 , \"gym\" : 33.33 , \"sl33p\" : 33.33 } ... } Note Note that the vote weight is distributed evenly and uses a natural sorting order. Because the vote weight must total 100%, the remaining 0.01% is subsequently distributed in ascending order. When manually specifying vote weight distribution, natural sorting is still used; however, vote weight is prioritised while determining the list's order. For example: { ... \"votes\" : { \"sl33p\" : 40.50 , \"cactus1549\" : 29.75 , \"gym\" : 29.75 } ... } See the v3 Vote structure here . v3 Delegate Resignation types \u00b6 TypeGroup Type 1 7 Previously, v2-style Delegate Resignation was a permanent action. There was no way for a resigned delegate to reinstate their eligibility to receive votes and produce blocks. This was only useful in cases where a delegate no longer wanted to participate in network consensus. Solar Core 4.x adds a new 'Temporary' resignation option where their resigned status may be 'Revoked' after at least two rounds (~106 blocks). This is useful when a delegate may only wish to resign for a short time without negatively impacting the network (e.g., missing blocks) and can be for a variety of reasons, from temporary node maintenance to personal/private matters. Resignation Type Value Description Temporary 0 Resign only for a short time. Delegate will be temporarily blocked from receiving votes or forging. (the default when no resign type is declared) Permanent 1 Irreversible. Delegate will no longer be allowed to receive votes or forge. Revoke 2 Reverses a temporary resignation. See the v3 Delegate Resignation structure here .","title":"4.0.1"},{"location":"core/updates/4.0.1/#401-nebula","text":"Time critical update The new voting mechanism, new transfers, and temporary delegate resignations will be available from block 1,175,000 on 15th July 2022.","title":"4.0.1 Nebula"},{"location":"core/updates/4.0.1/#changes-since-330","text":"This is the first major update of Solar Core since the launch of Mainnet. Click on the following link to read a full summary of the 4.x release: https://github.com/Solar-network/core/pull/97","title":"Changes since 3.3.0"},{"location":"core/updates/4.0.1/#highlights","text":"Introduction of v3 transactions, featuring: Combined Transfer and MultiPayment transactions New Vote transaction type New 'Temporary' and 'Permanent' 'Delegate Resignation' types Optional Transaction Memos Improved Core Crypto web browser compatibility Tighter schema validation Near-instantaneous fork recovery CPU count-based service worker allocation Improved logging and errors descriptions See all of the changes here: github.com/Solar-network/core/compare/3.3.0...4.0.1","title":"Highlights"},{"location":"core/updates/4.0.1/#requirements","text":"Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB Forger Requirements Recommended Minimum CPUs 4 ( dedicated ) 2 ( dedicated ) RAM 16GB 8GB HDD 100GB - 120GB ( SSD ) 80GB ( SSD )","title":"Requirements"},{"location":"core/updates/4.0.1/#update-instructions","text":"Note that this is not the usual solar update command! Update your Mainnet node with the following command: wget -4O- https://gist.githubusercontent.com/alessiodf/4faa98978ce547c1d8e96696f1d84e97/raw/cd9e7b83de0e5ac26a2e745d9452c9ed1d5c5195/update.sh | bash","title":"Update instructions"},{"location":"core/updates/4.0.1/#v3-transaction-changes","text":"There are several key transaction changes to be aware of in Solar Core 4.x .","title":"v3 transaction changes"},{"location":"core/updates/4.0.1/#the-memo","text":"All Solar transactions now contain a special 255-byte data field known as a 'Memo' and allows raw data, code, or plain text to be stored on the blockchain. The Memo is optional, public, and immutable. This was previously known as the vendorField and was only available on certain transaction types.","title":"The 'memo'"},{"location":"core/updates/4.0.1/#v3-transfer","text":"TypeGroup Type 1 6 One of the most important changes is the introduction of the new Transfer transaction type. Formerly, a single send transaction made use of v2-style Transfers (Type 0) whereas two or more sends required using a v2 MultiPayment transaction (Type 6). Under Solar Core 4.x , these have been combined under the MultiPayment pattern and are now known simply as 'Transfer' (Type 6), removing the unnecessary requirement of two separate transaction types. See the v3 Transfer structure here . TypeScript Code Example: const { Transactions , Managers , Utils } = require ( \"@solar-network/crypto\" ); const { Connection } = require ( \"@solar-network/client\" ); // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); // Set the network configuration Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 972604 ); ( async () => { // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . memo ( \"This is an example memo\" ) . addTransfer ( \"Address of Recipient Wallet 1\" , 1 * 1e8 ) . addTransfer ( \"Address of Recipient Wallet 2\" , 1 * 1e8 ) . addTransfer ( \"Address of Recipient Wallet 3\" , 1 * 1e8 ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); See the Python code example here .","title":"v3 transfer"},{"location":"core/updates/4.0.1/#v3-vote","text":"TypeGroup Type 2 2 Voting has undergone a significant conceptual change in Core 4.x . Previously, a wallet could vote for only one delegate at a time. Under the new scheme, a wallet can vote for up to 53 delegates in total as well as optionally customise the distribution of their vote weight. For instance, the default behaviour of voting for three delegates where no custom distribution is specified would look as follows: { ... \"votes\" : { \"cactus1549\" : 33.34 , \"gym\" : 33.33 , \"sl33p\" : 33.33 } ... } Note Note that the vote weight is distributed evenly and uses a natural sorting order. Because the vote weight must total 100%, the remaining 0.01% is subsequently distributed in ascending order. When manually specifying vote weight distribution, natural sorting is still used; however, vote weight is prioritised while determining the list's order. For example: { ... \"votes\" : { \"sl33p\" : 40.50 , \"cactus1549\" : 29.75 , \"gym\" : 29.75 } ... } See the v3 Vote structure here .","title":"v3 Vote"},{"location":"core/updates/4.0.1/#v3-delegate-resignation-types","text":"TypeGroup Type 1 7 Previously, v2-style Delegate Resignation was a permanent action. There was no way for a resigned delegate to reinstate their eligibility to receive votes and produce blocks. This was only useful in cases where a delegate no longer wanted to participate in network consensus. Solar Core 4.x adds a new 'Temporary' resignation option where their resigned status may be 'Revoked' after at least two rounds (~106 blocks). This is useful when a delegate may only wish to resign for a short time without negatively impacting the network (e.g., missing blocks) and can be for a variety of reasons, from temporary node maintenance to personal/private matters. Resignation Type Value Description Temporary 0 Resign only for a short time. Delegate will be temporarily blocked from receiving votes or forging. (the default when no resign type is declared) Permanent 1 Irreversible. Delegate will no longer be allowed to receive votes or forge. Revoke 2 Reverses a temporary resignation. See the v3 Delegate Resignation structure here .","title":"v3 Delegate Resignation types"},{"location":"core/updates/4.1.1/","text":"4.1.1 Nebula \u00b6 Time critical update This new release will activate a fork after block height 1,812,866 (estimated at around 12th September 2022 at 17:00 UTC). Changes since 4.0.3 \u00b6 New features \u00b6 automatic allocation of 5% of forging rewards for foundation funding following a governance vote on the issue events are emitted when delegate vote state changes new /blockchain/search api endpoint added to search the blockchain easily rolling 30 day productivity statistics are shown on the api support for bls12-381 has been added websocket api and websocket event subscriptions service introduced Bug fixes \u00b6 better vote balance handling if there is no balance destructive snapshot actions cannot execute while core is running fork resolution checks no longer hold up the process queue htlc fee handling now works as expected multiple api bug fixes only unicast ip addresses are accepted as peers rollback edge cases are now handled better state machine transitions are handled consistently Maintenance \u00b6 block deletion on rollback is more efficient database configuration has been tuned database indexes have been added for better optimisation delegate usernames are used instead of the generator public key delegates.json now stores hexadecimal private keys instead of plain passphrase secrets legacy upstream code has been removed much code cleanup transaction handlers now have a consistent implementation transaction sender addresses are used instead of the public key various dependency changes See all of the changes here: github.com/Solar-network/core/pull/117 Upgrade instructions \u00b6 If you are a delegate, please be aware that this update will perform a destructive modification to your delegates.json file, overwriting your delegate passphrase(s) with their hexadecimal private key equivalents. Please make sure you have your passphrases backed up somewhere safe prior to updating to Core 4.1.1 because you will not be able to retrieve your passphrase(s) from delegates.json anymore. Also, you should update your primary node BEFORE updating any backups. Note that this is not the usual solar update command! Please update your mainnet nodes now with the following command: wget -4O- https://gist.githubusercontent.com/alessiodf/5449ed2cf3ec3ff2cd23776af3404c35/raw/0de41a16ee2bf16186b70cdbf538838bc631118d/update.sh | bash","title":"4.1.1"},{"location":"core/updates/4.1.1/#411-nebula","text":"Time critical update This new release will activate a fork after block height 1,812,866 (estimated at around 12th September 2022 at 17:00 UTC).","title":"4.1.1 Nebula"},{"location":"core/updates/4.1.1/#changes-since-403","text":"","title":"Changes since 4.0.3"},{"location":"core/updates/4.1.1/#new-features","text":"automatic allocation of 5% of forging rewards for foundation funding following a governance vote on the issue events are emitted when delegate vote state changes new /blockchain/search api endpoint added to search the blockchain easily rolling 30 day productivity statistics are shown on the api support for bls12-381 has been added websocket api and websocket event subscriptions service introduced","title":"New features"},{"location":"core/updates/4.1.1/#bug-fixes","text":"better vote balance handling if there is no balance destructive snapshot actions cannot execute while core is running fork resolution checks no longer hold up the process queue htlc fee handling now works as expected multiple api bug fixes only unicast ip addresses are accepted as peers rollback edge cases are now handled better state machine transitions are handled consistently","title":"Bug fixes"},{"location":"core/updates/4.1.1/#maintenance","text":"block deletion on rollback is more efficient database configuration has been tuned database indexes have been added for better optimisation delegate usernames are used instead of the generator public key delegates.json now stores hexadecimal private keys instead of plain passphrase secrets legacy upstream code has been removed much code cleanup transaction handlers now have a consistent implementation transaction sender addresses are used instead of the public key various dependency changes See all of the changes here: github.com/Solar-network/core/pull/117","title":"Maintenance"},{"location":"core/updates/4.1.1/#upgrade-instructions","text":"If you are a delegate, please be aware that this update will perform a destructive modification to your delegates.json file, overwriting your delegate passphrase(s) with their hexadecimal private key equivalents. Please make sure you have your passphrases backed up somewhere safe prior to updating to Core 4.1.1 because you will not be able to retrieve your passphrase(s) from delegates.json anymore. Also, you should update your primary node BEFORE updating any backups. Note that this is not the usual solar update command! Please update your mainnet nodes now with the following command: wget -4O- https://gist.githubusercontent.com/alessiodf/5449ed2cf3ec3ff2cd23776af3404c35/raw/0de41a16ee2bf16186b70cdbf538838bc631118d/update.sh | bash","title":"Upgrade instructions"},{"location":"core/updates/4.1.2/","text":"4.1.2 \u00b6 Changes since 4.1.1 \u00b6 Bug Fixes \u00b6 legacy votes are included when fetching a previous vote the webhook listeners only activates when webhooks are enabled the peer-to-peer communicator verifies that a wallet belongs to a registered delegate before adding attributes cloned wallets are indexed if its corresponding blockchain wallet is also indexed Maintenance \u00b6 unnecessary variables have been removed from the legacy vote handler legacy upstream code has been removed from the snapshot package a new method for retrieving pool wallets has been added various performance optimisations have been added across multiple core packages obsolete transitional code has been removed second signature public keys must differ from their corresponding wallet's public key testnet milestones have been updated and improved See all of the changes here: https://github.com/Solar-network/core/compare/4.1.1...4.1.2 Upgrade instructions \u00b6 Please update your mainnet nodes now with the following command: solar update","title":"4.1.2"},{"location":"core/updates/4.1.2/#412","text":"","title":"4.1.2"},{"location":"core/updates/4.1.2/#changes-since-411","text":"","title":"Changes since 4.1.1"},{"location":"core/updates/4.1.2/#bug-fixes","text":"legacy votes are included when fetching a previous vote the webhook listeners only activates when webhooks are enabled the peer-to-peer communicator verifies that a wallet belongs to a registered delegate before adding attributes cloned wallets are indexed if its corresponding blockchain wallet is also indexed","title":"Bug Fixes"},{"location":"core/updates/4.1.2/#maintenance","text":"unnecessary variables have been removed from the legacy vote handler legacy upstream code has been removed from the snapshot package a new method for retrieving pool wallets has been added various performance optimisations have been added across multiple core packages obsolete transitional code has been removed second signature public keys must differ from their corresponding wallet's public key testnet milestones have been updated and improved See all of the changes here: https://github.com/Solar-network/core/compare/4.1.1...4.1.2","title":"Maintenance"},{"location":"core/updates/4.1.2/#upgrade-instructions","text":"Please update your mainnet nodes now with the following command: solar update","title":"Upgrade instructions"},{"location":"core/updates/4.1.3/","text":"4.1.3 \u00b6 Changes since 4.1.2 \u00b6 Bug Fixes \u00b6 the pool now listens to the queue drain event for only the block processing queue See all of the changes here: https://github.com/Solar-network/core/compare/4.1.2...4.1.3 Upgrade instructions \u00b6 Please update your mainnet nodes now with the following command: solar update","title":"4.1.3"},{"location":"core/updates/4.1.3/#413","text":"","title":"4.1.3"},{"location":"core/updates/4.1.3/#changes-since-412","text":"","title":"Changes since 4.1.2"},{"location":"core/updates/4.1.3/#bug-fixes","text":"the pool now listens to the queue drain event for only the block processing queue See all of the changes here: https://github.com/Solar-network/core/compare/4.1.2...4.1.3","title":"Bug Fixes"},{"location":"core/updates/4.1.3/#upgrade-instructions","text":"Please update your mainnet nodes now with the following command: solar update","title":"Upgrade instructions"},{"location":"core/updates/4.2.0/","text":"4.2.0 \u00b6 Time critical update Nodes that have not updated by Saturday, December 17th 2022 will NOT be able to synchronise with the network! THIS IS A MANDATORY UPDATE FOR EVERYONE RUNNING SOLAR CORE! Including all Delegates, Exchanges, and Relay operators! Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6) Changes since 4.1.3 \u00b6 Maintenance \u00b6 performance and security improvements for the sxp-swap plugin have been made See all of the changes here: https://github.com/Solar-network/core/compare/4.1.3...4.2.0 Upgrade instructions \u00b6 Please update your mainnet nodes now with the following command: solar update","title":"4.2.0"},{"location":"core/updates/4.2.0/#420","text":"Time critical update Nodes that have not updated by Saturday, December 17th 2022 will NOT be able to synchronise with the network! THIS IS A MANDATORY UPDATE FOR EVERYONE RUNNING SOLAR CORE! Including all Delegates, Exchanges, and Relay operators! Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6)","title":"4.2.0"},{"location":"core/updates/4.2.0/#changes-since-413","text":"","title":"Changes since 4.1.3"},{"location":"core/updates/4.2.0/#maintenance","text":"performance and security improvements for the sxp-swap plugin have been made See all of the changes here: https://github.com/Solar-network/core/compare/4.1.3...4.2.0","title":"Maintenance"},{"location":"core/updates/4.2.0/#upgrade-instructions","text":"Please update your mainnet nodes now with the following command: solar update","title":"Upgrade instructions"},{"location":"core/updates/4.2.1/","text":"4.2.1 \u00b6 Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6) Changes since 4.2.0 \u00b6 Maintenance \u00b6 use maps and hardened regex when handling usernames update milestones for mainnet and testnet See the changes here: https://github.com/Solar-network/core/compare/4.2.0...4.2.1 Upgrade instructions \u00b6 Please update your mainnet nodes with the following command: solar update","title":"4.2.1"},{"location":"core/updates/4.2.1/#421","text":"Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6)","title":"4.2.1"},{"location":"core/updates/4.2.1/#changes-since-420","text":"","title":"Changes since 4.2.0"},{"location":"core/updates/4.2.1/#maintenance","text":"use maps and hardened regex when handling usernames update milestones for mainnet and testnet See the changes here: https://github.com/Solar-network/core/compare/4.2.0...4.2.1","title":"Maintenance"},{"location":"core/updates/4.2.1/#upgrade-instructions","text":"Please update your mainnet nodes with the following command: solar update","title":"Upgrade instructions"},{"location":"core/updates/4.3.0/","text":"4.3.0 \u00b6 Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6) Changes since 4.2.1 \u00b6 New features \u00b6 only votes for online block producer nodes are permitted to enter the pool resignation revocation requires an online block producer node Maintenance \u00b6 webpack has been updated from 5.73.0 to 5.80.0 postgres is started regardless of connection state multiple API service enhancements have been implemented the swap plugin now permits voting contingencies and service deprecation milestones for mainnet and testnet have been updated See the changes here: https://github.com/Solar-network/core/compare/4.2.1...4.3.0 Upgrade instructions \u00b6 Please update your mainnet nodes with the following command: solar update","title":"4.3.0"},{"location":"core/updates/4.3.0/#430","text":"Type 0 Transfers are deprecated Type 0 Transfers will not be accepted on the Solar Network mainnet starting at height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges should continue to detect and accept legacy (type 0) transfers for the time being See the updated transaction type here: Transfer (Type 6)","title":"4.3.0"},{"location":"core/updates/4.3.0/#changes-since-421","text":"","title":"Changes since 4.2.1"},{"location":"core/updates/4.3.0/#new-features","text":"only votes for online block producer nodes are permitted to enter the pool resignation revocation requires an online block producer node","title":"New features"},{"location":"core/updates/4.3.0/#maintenance","text":"webpack has been updated from 5.73.0 to 5.80.0 postgres is started regardless of connection state multiple API service enhancements have been implemented the swap plugin now permits voting contingencies and service deprecation milestones for mainnet and testnet have been updated See the changes here: https://github.com/Solar-network/core/compare/4.2.1...4.3.0","title":"Maintenance"},{"location":"core/updates/4.3.0/#upgrade-instructions","text":"Please update your mainnet nodes with the following command: solar update","title":"Upgrade instructions"},{"location":"core/updates/4.3.1/","text":"4.3.1 \u00b6 Type 0 Transfers are deprecated Type 0 Transfers are no longer accepted on the Solar Network as of height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges no longer need to monitor for legacy (type 0) transfers See the updated transaction type here: Transfer (Type 6) Changes since 4.3.0 \u00b6 Changed \u00b6 semver has been updated from 6.3.0 to 7.5.4 protobufjs has been updated from 6.11.3 to 7.2.4 Removed \u00b6 support for the sxp-swap plugin has been removed Fixed \u00b6 a database timeout issue relating to snapshots has been resolved See the changes here: https://github.com/Solar-network/core/compare/4.3.0...4.3.1 Upgrade instructions \u00b6 Please update your mainnet nodes with the following command: solar update","title":"4.3.1"},{"location":"core/updates/4.3.1/#431","text":"Type 0 Transfers are deprecated Type 0 Transfers are no longer accepted on the Solar Network as of height 5,000,000* \u274c Type 6 Transfers should be used from now on \u2705 \u2003 *exchanges no longer need to monitor for legacy (type 0) transfers See the updated transaction type here: Transfer (Type 6)","title":"4.3.1"},{"location":"core/updates/4.3.1/#changes-since-430","text":"","title":"Changes since 4.3.0"},{"location":"core/updates/4.3.1/#changed","text":"semver has been updated from 6.3.0 to 7.5.4 protobufjs has been updated from 6.11.3 to 7.2.4","title":"Changed"},{"location":"core/updates/4.3.1/#removed","text":"support for the sxp-swap plugin has been removed","title":"Removed"},{"location":"core/updates/4.3.1/#fixed","text":"a database timeout issue relating to snapshots has been resolved See the changes here: https://github.com/Solar-network/core/compare/4.3.0...4.3.1","title":"Fixed"},{"location":"core/updates/4.3.1/#upgrade-instructions","text":"Please update your mainnet nodes with the following command: solar update","title":"Upgrade instructions"},{"location":"desktop-wallet/intro/","text":"Introduction \u00b6 What is it? \u00b6 The SXP Desktop Wallet is an application which allows you to manage SXP transactions. It provides an extensive set of functionalities, including management of profiles and wallets, the creation of both online and offline transactions, wallet summary, stylistic customisations, multilingual support and much more! Getting started \u00b6 To get started with the SXP Desktop Wallet, follow the documentation below for guides on Installation, Wallet Navigation, Creating Wallets and more... Transactions \u00b6 The SXP Desktop Wallet enables you to send a wide variety of transactions on the Solar (SXP) blockchain. Follow the guides below for information on each transaction. Developer guides \u00b6 The SXP Desktop Wallet offers a wide range of customisation which empowers developers to create Plugins to enhance the experience within the Wallet from Games, Utilities and Theme's. Follow the guides below to get started with development within the SXP Desktop Wallet. Support \u00b6","title":"Introduction"},{"location":"desktop-wallet/intro/#introduction","text":"","title":"Introduction"},{"location":"desktop-wallet/intro/#what-is-it","text":"The SXP Desktop Wallet is an application which allows you to manage SXP transactions. It provides an extensive set of functionalities, including management of profiles and wallets, the creation of both online and offline transactions, wallet summary, stylistic customisations, multilingual support and much more!","title":"What is it?"},{"location":"desktop-wallet/intro/#getting-started","text":"To get started with the SXP Desktop Wallet, follow the documentation below for guides on Installation, Wallet Navigation, Creating Wallets and more...","title":"Getting started"},{"location":"desktop-wallet/intro/#transactions","text":"The SXP Desktop Wallet enables you to send a wide variety of transactions on the Solar (SXP) blockchain. Follow the guides below for information on each transaction.","title":"Transactions"},{"location":"desktop-wallet/intro/#developer-guides","text":"The SXP Desktop Wallet offers a wide range of customisation which empowers developers to create Plugins to enhance the experience within the Wallet from Games, Utilities and Theme's. Follow the guides below to get started with development within the SXP Desktop Wallet.","title":"Developer guides"},{"location":"desktop-wallet/intro/#support","text":"","title":"Support"},{"location":"desktop-wallet/rewards/","text":"An Introduction to SXP Rewards (Staking) \u00b6 Solar is a sovereign blockchain with a native cryptoasset called SXP. It is based on the Delegated-Proof-of-Stake (DPoS) consensus mechanism and has 53 active block producers who secure the network. In this article, we will discuss how block rewards work within the Solar blockchain and how you can earn a portion of the rewards by becoming an active block producer or voting with your SXP coins. Staking considerations \u00b6 SXP Staking is unique in that user funds are not required to be sent or locked. When a user casts a vote, their votes are assigned to the network block producer of their choice. A user\u2019s votes adjusts automatically as funds are sent and received, and there is no need to re-vote or un-stake. To change a vote, a user simply casts a new vote transaction. Info For more information about voting, please visit: How to Vote for Block Producers in the Desktop Wallet Staking fees \u00b6 The cost of a vote covers the transaction itself. There is no requirement to send or lock additional funds in order to participate in consensus. This transaction fee is awarded to the block producer who adds the transaction to a given block. Info For more information about fees, please visit: Transaction Fees Block rewards \u00b6 Solar is a sovereign blockchain that is validated by 53 active block producers. Each block producer will submit one (1) block per round. A round consists of 53 blocks. Each block on the Solar Network has a block time of 8 seconds. A block producer, when active and submitting a particular block, earns a reward of 10% from the total transaction fees of that block, in addition to a dynamic, rank-based block reward. Block Rewards are inflationary coins, meaning the total SXP supply is increased by between 6.75 and 13.25 SXP every block. This serves as a form of consistent inflation that reduces over time due to the non-fluctuating rate of rewards. On Solar, 10% of the block reward is donated to the development fund and the Solar Blockchain Foundation while 90% goes to the block producer. Note: There are no \"halvenings\" of block rewards on Solar . Reward sharing on Solar \u00b6 As previously stated, block rewards and transaction fees are awarded to the active block producers responsible for reporting a given block. We call this combination of the block reward and 10% of any fees the total reward. On Solar, many of these block producers choose to take a small commission from the total reward and share the remaining after commission reward (ACR) with their voters. This form of reward sharing is completely optional and not all block producers will share their rewards Reward sharing can vary wildly with block producers taking commissions of anywhere from 0-100% of the total rewards. You can also view all registered block producers using the public REST API or a block explorer Contact us \u00b6 If you still have questions or need more information, please feel free to ask the community on Discord , Telegram .","title":"An Introduction to SXP Rewards (Staking)"},{"location":"desktop-wallet/rewards/#an-introduction-to-sxp-rewards-staking","text":"Solar is a sovereign blockchain with a native cryptoasset called SXP. It is based on the Delegated-Proof-of-Stake (DPoS) consensus mechanism and has 53 active block producers who secure the network. In this article, we will discuss how block rewards work within the Solar blockchain and how you can earn a portion of the rewards by becoming an active block producer or voting with your SXP coins.","title":"An Introduction to SXP Rewards (Staking)"},{"location":"desktop-wallet/rewards/#staking-considerations","text":"SXP Staking is unique in that user funds are not required to be sent or locked. When a user casts a vote, their votes are assigned to the network block producer of their choice. A user\u2019s votes adjusts automatically as funds are sent and received, and there is no need to re-vote or un-stake. To change a vote, a user simply casts a new vote transaction. Info For more information about voting, please visit: How to Vote for Block Producers in the Desktop Wallet","title":"Staking considerations"},{"location":"desktop-wallet/rewards/#staking-fees","text":"The cost of a vote covers the transaction itself. There is no requirement to send or lock additional funds in order to participate in consensus. This transaction fee is awarded to the block producer who adds the transaction to a given block. Info For more information about fees, please visit: Transaction Fees","title":"Staking fees"},{"location":"desktop-wallet/rewards/#block-rewards","text":"Solar is a sovereign blockchain that is validated by 53 active block producers. Each block producer will submit one (1) block per round. A round consists of 53 blocks. Each block on the Solar Network has a block time of 8 seconds. A block producer, when active and submitting a particular block, earns a reward of 10% from the total transaction fees of that block, in addition to a dynamic, rank-based block reward. Block Rewards are inflationary coins, meaning the total SXP supply is increased by between 6.75 and 13.25 SXP every block. This serves as a form of consistent inflation that reduces over time due to the non-fluctuating rate of rewards. On Solar, 10% of the block reward is donated to the development fund and the Solar Blockchain Foundation while 90% goes to the block producer. Note: There are no \"halvenings\" of block rewards on Solar .","title":"Block rewards"},{"location":"desktop-wallet/rewards/#reward-sharing-on-solar","text":"As previously stated, block rewards and transaction fees are awarded to the active block producers responsible for reporting a given block. We call this combination of the block reward and 10% of any fees the total reward. On Solar, many of these block producers choose to take a small commission from the total reward and share the remaining after commission reward (ACR) with their voters. This form of reward sharing is completely optional and not all block producers will share their rewards Reward sharing can vary wildly with block producers taking commissions of anywhere from 0-100% of the total rewards. You can also view all registered block producers using the public REST API or a block explorer","title":"Reward sharing on Solar"},{"location":"desktop-wallet/rewards/#contact-us","text":"If you still have questions or need more information, please feel free to ask the community on Discord , Telegram .","title":"Contact us"},{"location":"desktop-wallet/support/troubleshooting/","text":"Troubleshooting \u00b6 This page will cover common issues related to the Solar Desktop Wallet v2.x . Getting started \u00b6 A user experiencing unexpected errors should first check that their apps and software are up-to-date. Desktop wallet software \u00b6 First, check that the latest version of the Solar Desktop Wallet is installed. All official Desktop Wallet releases can be found here . Info If your issue is not covered here, you can ask the community on Discord , Telegram . or contact us using the \u2018Technical Support\u2019 form through our website .","title":"Troubleshooting"},{"location":"desktop-wallet/support/troubleshooting/#troubleshooting","text":"This page will cover common issues related to the Solar Desktop Wallet v2.x .","title":"Troubleshooting"},{"location":"desktop-wallet/support/troubleshooting/#getting-started","text":"A user experiencing unexpected errors should first check that their apps and software are up-to-date.","title":"Getting started"},{"location":"desktop-wallet/support/troubleshooting/#desktop-wallet-software","text":"First, check that the latest version of the Solar Desktop Wallet is installed. All official Desktop Wallet releases can be found here . Info If your issue is not covered here, you can ask the community on Discord , Telegram . or contact us using the \u2018Technical Support\u2019 form through our website .","title":"Desktop wallet software"},{"location":"desktop-wallet/user-guides/add-contact/","text":"Adding a Contact \u00b6 The application provides you a neat interface to add addresses to your contact list. This feature enables you to aggregate all of the addresses which you may transact with or be interested in.","title":"Adding a Contact"},{"location":"desktop-wallet/user-guides/add-contact/#adding-a-contact","text":"The application provides you a neat interface to add addresses to your contact list. This feature enables you to aggregate all of the addresses which you may transact with or be interested in.","title":"Adding a Contact"},{"location":"desktop-wallet/user-guides/create-import-wallets/","text":"Creating or importing a wallet \u00b6 The SXP Desktop Wallet allows you to both create new wallets and import existing ones. You can begin either process by clicking the appropriate button at the top of the sidebar when on the app dashboard. Creating a New Wallet \u00b6 Go to your Profile Click on the \"Create Wallet\" button Select one of the three created addresses or generate new ones Save your mnemonic. Be sure it's a safe place! Confirm your mnemonic by selecting the prompted words. Great! You created a new wallet. Importing your wallet \u00b6 Provide the mnemonic and/or address of the wallet, then click 'Next' Optional: encrypt wallet with a password. Or click 'Next' Optional: provide a wallet name. Click 'Next' and your wallet is imported!","title":"Creating/Importing a wallet"},{"location":"desktop-wallet/user-guides/create-import-wallets/#creating-or-importing-a-wallet","text":"The SXP Desktop Wallet allows you to both create new wallets and import existing ones. You can begin either process by clicking the appropriate button at the top of the sidebar when on the app dashboard.","title":"Creating or importing a wallet"},{"location":"desktop-wallet/user-guides/create-import-wallets/#creating-a-new-wallet","text":"Go to your Profile Click on the \"Create Wallet\" button Select one of the three created addresses or generate new ones Save your mnemonic. Be sure it's a safe place! Confirm your mnemonic by selecting the prompted words. Great! You created a new wallet.","title":"Creating a New Wallet"},{"location":"desktop-wallet/user-guides/create-import-wallets/#importing-your-wallet","text":"Provide the mnemonic and/or address of the wallet, then click 'Next' Optional: encrypt wallet with a password. Or click 'Next' Optional: provide a wallet name. Click 'Next' and your wallet is imported!","title":"Importing your wallet"},{"location":"desktop-wallet/user-guides/ledger/","text":"Solar Ledger App Guide \u00b6 Introduction \u00b6 This guide will help you get started in using your Ledger hardware wallet with the Solar Desktop Wallet software. Your Ledger device uses an offline, or cold storage, method of generating private keys, making it among the most secure ways to store cryptoassets, including Solar (SXP). With this enhanced security, your private keys remain offline and all transactions require physical confirmation on your device, protecting your funds from online threats and malware. It enables you to sign transactions securely, so you can send SXP or vote for your favourite block producers without the need to enter your mnemonic. Before you start \u00b6 This guide assumes you have the following set up, updated to the latest versions, and ready to use: A Ledger hardware wallet: https://shop.ledger.com Ledger Live: https://www.ledger.com/ledger-live/download Solar Desktop Wallet: https://solar.org/desktop-wallet Supported Devices Ledger Nano X Ledger Nano S Plus Ledger Stax Ledger Flex Info Make your Ledger device's firmware is updated to the latest version through Ledger Live before proceeding with installation of the Solar app. Installing the Solar Ledger App \u00b6 You can find and install the Solar Ledger app using Ledger Live. 1. Connect your device to Ledger Live \u00b6 To get started installing the Solar Ledger app, you'll need to connect your device to Ledger Live: Open Ledger Live Desktop. Click ' My Ledger ' in the side menu. Connect your Ledger device to your computer and unlock it using your PIN. Tip If prompted, click ' Allow ' to enable a secure connection with your Ledger device. Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus 2. Install the Solar app \u00b6 Using Ledger Live\u2019s App catalog, search for \" Solar \" and click \u2018 Install .\u2019 The Solar app will then be installed on your Ledger device. 3. Close Ledger Live \u00b6 Viewing Solar (SXP) Ledger Wallets \u00b6 After having installed the Solar app, your Ledger device is ready to be used with the Solar Desktop Wallet. 1. Close Ledger Live Desktop \u00b6 Having multiple Ledger-supported applications opened at the same time on your computer can interfere with the connection to your Ledger device, so you'll want to make sure Ledger Live, or any other software that connects to Ledger devices, is closed. 2. Connect your Ledger device \u00b6 If not already connected and unlocked, connect your Ledger device to your computer and unlock it using your PIN. Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus 3. Open the Solar Ledger app \u00b6 Next, open the Solar Ledger app on your Ledger device. Your device's screen should look like the image below: Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus 4. Open the Solar Desktop Wallet \u00b6 Once initialised, the Solar Desktop Wallet will load and display your Ledger wallets and their SXP balances. Ledger wallets are marked with a red \u2018Ledger\u2019 label. Creating Multiple Solar (SXP) Ledger Wallets \u00b6 Your Ledger device can manage multiple SXP wallet addresses using the \u2018Ledger Options\u2019 menu of the Solar Desktop Wallet. 1. Click \u2018My wallets\u2019 \u00b6 In the Solar Desktop Wallet, click on 'My Wallets.' 2. Click \u2018Ledger Options\u2019 \u00b6 Using the \u2018 Ledger Options \u2019 menu of the Solar Desktop Wallet, click \u2018 Load Additional Ledger Wallets .' 3. Click \u2018Load Wallets\u2019 \u00b6 Finally, type in however many Solar Ledger wallets you'd like to have displayed and click ' Load Wallets .' Receiving and Sending Solar (SXP) \u00b6 A Solar Ledger wallet works just like a traditional mnemonic-protected Solar wallet. Receiving Solar (SXP) \u00b6 Receive SXP from anyone by sharing your unique Solar (SXP) Ledger wallet address(es) with them. You can find a wallet's unique address in its banner as seen below. Sending Solar (SXP) \u00b6 Send SXP using your Ledger device and the Solar Desktop Wallet. 1. Open a Solar (SXP) Ledger wallet \u00b6 Using the Solar Desktop Wallet, open the Solar (SXP) Ledger address from which you'd like to send funds, then click ' Send .' Make sure your Ledger device is connected and unlocked and that the Solar app is opened. 2. Enter the Transfer Details \u00b6 Enter the recipient's wallet address (or pick one from your address book) and the amount of SXP you'd like to send. After entering and reviewing the information, click ' Next ' to proceed. 3. Confirm using your Ledger Device \u00b6 You will now be required to review the transaction details using your Ledger device. Take your time verifying the transaction details. Pay attention to the recipient address(es) and the amount of SXP shown. Make sure all values match what you entered using the Solar Desktop Wallet. Signing \u00b6 If everything looks correct and you'd like to proceed with signing the transaction... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Touch and hold as instructed on your Ledger device. Click ' Approve ' using your Ledger device. Rejecting \u00b6 If the details don't match... If you'd like to make changes... If you've simply changed your mind and want to cancel... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Tap ' Reject ' on your Ledger device, then tap ' Yes, reject ' to decline signing of the transaction. Click ' Reject ' using your Ledger device. 4. Confirm and Send \u00b6 After reviewing and approving the transaction details using your Ledger device, you'll have a third and final opportunity to review the transaction details before broadcasting it to the network. If everything looks good and you'd like to proceed with the transaction, click the \u2018 Send \u2019 button as shown below. Voting / Staking Solar (SXP) \u00b6 You can perform nearly any transaction using your Solar Ledger wallet as you could using a traditional Solar (SXP) wallet, including voting for your favourite block producers to stake your SXP. Learn more about block producers and their proposals and contributions here: https://delegates.solar.org 1. Open a Solar (SXP) Ledger wallet \u00b6 Using the Solar Desktop Wallet, open the Solar (SXP) Ledger address from which you'd like to vote. Then click the ' Block Producers ' tab. Make sure your Ledger device is connected and unlocked and that the Solar app is opened. 2. Select your Favourite Block Producers \u00b6 Select your favourite block producers from the list--or search for them by name. 3. Confirm the Vote Details \u00b6 After reviewing the vote details, click ' Vote '. 4. Confirm the Vote Fee \u00b6 You'll now be asked to confirm the vote fee. It's recommended to leave this set to the default (\"Average\") fee, there's no need to adjust it at this time. Click ' Next ' to proceed. 5. Confirm using your Ledger Device \u00b6 You will now be required to review the vote details using your Ledger device. Take your time verifying the transaction details. Make sure all values match what you entered using the Solar Desktop Wallet. Signing \u00b6 If everything looks correct and you'd like to proceed with signing the transaction... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Touch and hold as instructed on your Ledger device. Click ' Approve ' using your Ledger device. Rejecting \u00b6 If the details don't match... If you'd like to make changes... If you've simply changed your mind and want to cancel... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Tap ' Reject ' on your Ledger device, then tap ' Yes, reject ' to decline signing of the transaction. Click ' Reject ' using your Ledger device. 6. Confirm and Send \u00b6 After reviewing and approving the vote details using your Ledger device, you'll have a third and final opportunity to review the vote transaction details before broadcasting it to the network. If everything looks good and you'd like to proceed with voting, click the \u2018 Send \u2019 button as shown below. Troubleshooting \u00b6 My Solar Desktop Wallet does not show any Ledger wallets \u00b6 Make sure your Ledger device is connected to your computer, that it is unlocked, and that the Solar Ledger app is opened. The screen of your Ledger device should say \u2018 Solar is ready .\u2019 Make sure Ledger Live, or any other software that connects to Ledger devices, is not opened as this can interfere with a Ledger device's connection. Make sure you have installed the latest version of the Solar Desktop Wallet, available here: https://solar.org/desktop-wallet . Restart the Solar Desktop Wallet or 'Force Reload' it using CTRL + SHIFT + R (Windows) or CMD + SHIFT + R (Linux, macOS) Support \u00b6 If you have any questions, please reach out to the Solar community on the official Solar channels: Discord: https://discord.solar.org Telegram: https://telegram.solar.org","title":"Using a Ledger wallet"},{"location":"desktop-wallet/user-guides/ledger/#solar-ledger-app-guide","text":"","title":"Solar Ledger App Guide"},{"location":"desktop-wallet/user-guides/ledger/#introduction","text":"This guide will help you get started in using your Ledger hardware wallet with the Solar Desktop Wallet software. Your Ledger device uses an offline, or cold storage, method of generating private keys, making it among the most secure ways to store cryptoassets, including Solar (SXP). With this enhanced security, your private keys remain offline and all transactions require physical confirmation on your device, protecting your funds from online threats and malware. It enables you to sign transactions securely, so you can send SXP or vote for your favourite block producers without the need to enter your mnemonic.","title":"Introduction"},{"location":"desktop-wallet/user-guides/ledger/#before-you-start","text":"This guide assumes you have the following set up, updated to the latest versions, and ready to use: A Ledger hardware wallet: https://shop.ledger.com Ledger Live: https://www.ledger.com/ledger-live/download Solar Desktop Wallet: https://solar.org/desktop-wallet Supported Devices Ledger Nano X Ledger Nano S Plus Ledger Stax Ledger Flex Info Make your Ledger device's firmware is updated to the latest version through Ledger Live before proceeding with installation of the Solar app.","title":"Before you start"},{"location":"desktop-wallet/user-guides/ledger/#installing-the-solar-ledger-app","text":"You can find and install the Solar Ledger app using Ledger Live.","title":"Installing the Solar Ledger App"},{"location":"desktop-wallet/user-guides/ledger/#1-connect-your-device-to-ledger-live","text":"To get started installing the Solar Ledger app, you'll need to connect your device to Ledger Live: Open Ledger Live Desktop. Click ' My Ledger ' in the side menu. Connect your Ledger device to your computer and unlock it using your PIN. Tip If prompted, click ' Allow ' to enable a secure connection with your Ledger device. Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus","title":"1. Connect your device to Ledger Live"},{"location":"desktop-wallet/user-guides/ledger/#2-install-the-solar-app","text":"Using Ledger Live\u2019s App catalog, search for \" Solar \" and click \u2018 Install .\u2019 The Solar app will then be installed on your Ledger device.","title":"2. Install the Solar app"},{"location":"desktop-wallet/user-guides/ledger/#3-close-ledger-live","text":"","title":"3. Close Ledger Live"},{"location":"desktop-wallet/user-guides/ledger/#viewing-solar-sxp-ledger-wallets","text":"After having installed the Solar app, your Ledger device is ready to be used with the Solar Desktop Wallet.","title":"Viewing Solar (SXP) Ledger Wallets"},{"location":"desktop-wallet/user-guides/ledger/#1-close-ledger-live-desktop","text":"Having multiple Ledger-supported applications opened at the same time on your computer can interfere with the connection to your Ledger device, so you'll want to make sure Ledger Live, or any other software that connects to Ledger devices, is closed.","title":"1. Close Ledger Live Desktop"},{"location":"desktop-wallet/user-guides/ledger/#2-connect-your-ledger-device","text":"If not already connected and unlocked, connect your Ledger device to your computer and unlock it using your PIN. Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus","title":"2. Connect your Ledger device"},{"location":"desktop-wallet/user-guides/ledger/#3-open-the-solar-ledger-app","text":"Next, open the Solar Ledger app on your Ledger device. Your device's screen should look like the image below: Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus","title":"3. Open the Solar Ledger app"},{"location":"desktop-wallet/user-guides/ledger/#4-open-the-solar-desktop-wallet","text":"Once initialised, the Solar Desktop Wallet will load and display your Ledger wallets and their SXP balances. Ledger wallets are marked with a red \u2018Ledger\u2019 label.","title":"4. Open the Solar Desktop Wallet"},{"location":"desktop-wallet/user-guides/ledger/#creating-multiple-solar-sxp-ledger-wallets","text":"Your Ledger device can manage multiple SXP wallet addresses using the \u2018Ledger Options\u2019 menu of the Solar Desktop Wallet.","title":"Creating Multiple Solar (SXP) Ledger Wallets"},{"location":"desktop-wallet/user-guides/ledger/#1-click-my-wallets","text":"In the Solar Desktop Wallet, click on 'My Wallets.'","title":"1. Click \u2018My wallets\u2019"},{"location":"desktop-wallet/user-guides/ledger/#2-click-ledger-options","text":"Using the \u2018 Ledger Options \u2019 menu of the Solar Desktop Wallet, click \u2018 Load Additional Ledger Wallets .'","title":"2. Click \u2018Ledger Options\u2019"},{"location":"desktop-wallet/user-guides/ledger/#3-click-load-wallets","text":"Finally, type in however many Solar Ledger wallets you'd like to have displayed and click ' Load Wallets .'","title":"3. Click \u2018Load Wallets\u2019"},{"location":"desktop-wallet/user-guides/ledger/#receiving-and-sending-solar-sxp","text":"A Solar Ledger wallet works just like a traditional mnemonic-protected Solar wallet.","title":"Receiving and Sending Solar (SXP)"},{"location":"desktop-wallet/user-guides/ledger/#receiving-solar-sxp","text":"Receive SXP from anyone by sharing your unique Solar (SXP) Ledger wallet address(es) with them. You can find a wallet's unique address in its banner as seen below.","title":"Receiving Solar (SXP)"},{"location":"desktop-wallet/user-guides/ledger/#sending-solar-sxp","text":"Send SXP using your Ledger device and the Solar Desktop Wallet.","title":"Sending Solar (SXP)"},{"location":"desktop-wallet/user-guides/ledger/#1-open-a-solar-sxp-ledger-wallet","text":"Using the Solar Desktop Wallet, open the Solar (SXP) Ledger address from which you'd like to send funds, then click ' Send .' Make sure your Ledger device is connected and unlocked and that the Solar app is opened.","title":"1. Open a Solar (SXP) Ledger wallet"},{"location":"desktop-wallet/user-guides/ledger/#2-enter-the-transfer-details","text":"Enter the recipient's wallet address (or pick one from your address book) and the amount of SXP you'd like to send. After entering and reviewing the information, click ' Next ' to proceed.","title":"2. Enter the Transfer Details"},{"location":"desktop-wallet/user-guides/ledger/#3-confirm-using-your-ledger-device","text":"You will now be required to review the transaction details using your Ledger device. Take your time verifying the transaction details. Pay attention to the recipient address(es) and the amount of SXP shown. Make sure all values match what you entered using the Solar Desktop Wallet.","title":"3. Confirm using your Ledger Device"},{"location":"desktop-wallet/user-guides/ledger/#signing","text":"If everything looks correct and you'd like to proceed with signing the transaction... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Touch and hold as instructed on your Ledger device. Click ' Approve ' using your Ledger device.","title":"Signing"},{"location":"desktop-wallet/user-guides/ledger/#rejecting","text":"If the details don't match... If you'd like to make changes... If you've simply changed your mind and want to cancel... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Tap ' Reject ' on your Ledger device, then tap ' Yes, reject ' to decline signing of the transaction. Click ' Reject ' using your Ledger device.","title":"Rejecting"},{"location":"desktop-wallet/user-guides/ledger/#4-confirm-and-send","text":"After reviewing and approving the transaction details using your Ledger device, you'll have a third and final opportunity to review the transaction details before broadcasting it to the network. If everything looks good and you'd like to proceed with the transaction, click the \u2018 Send \u2019 button as shown below.","title":"4. Confirm and Send"},{"location":"desktop-wallet/user-guides/ledger/#voting-staking-solar-sxp","text":"You can perform nearly any transaction using your Solar Ledger wallet as you could using a traditional Solar (SXP) wallet, including voting for your favourite block producers to stake your SXP. Learn more about block producers and their proposals and contributions here: https://delegates.solar.org","title":"Voting / Staking Solar (SXP)"},{"location":"desktop-wallet/user-guides/ledger/#1-open-a-solar-sxp-ledger-wallet_1","text":"Using the Solar Desktop Wallet, open the Solar (SXP) Ledger address from which you'd like to vote. Then click the ' Block Producers ' tab. Make sure your Ledger device is connected and unlocked and that the Solar app is opened.","title":"1. Open a Solar (SXP) Ledger wallet"},{"location":"desktop-wallet/user-guides/ledger/#2-select-your-favourite-block-producers","text":"Select your favourite block producers from the list--or search for them by name.","title":"2. Select your Favourite Block Producers"},{"location":"desktop-wallet/user-guides/ledger/#3-confirm-the-vote-details","text":"After reviewing the vote details, click ' Vote '.","title":"3. Confirm the Vote Details"},{"location":"desktop-wallet/user-guides/ledger/#4-confirm-the-vote-fee","text":"You'll now be asked to confirm the vote fee. It's recommended to leave this set to the default (\"Average\") fee, there's no need to adjust it at this time. Click ' Next ' to proceed.","title":"4. Confirm the Vote Fee"},{"location":"desktop-wallet/user-guides/ledger/#5-confirm-using-your-ledger-device","text":"You will now be required to review the vote details using your Ledger device. Take your time verifying the transaction details. Make sure all values match what you entered using the Solar Desktop Wallet.","title":"5. Confirm using your Ledger Device"},{"location":"desktop-wallet/user-guides/ledger/#signing_1","text":"If everything looks correct and you'd like to proceed with signing the transaction... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Touch and hold as instructed on your Ledger device. Click ' Approve ' using your Ledger device.","title":"Signing"},{"location":"desktop-wallet/user-guides/ledger/#rejecting_1","text":"If the details don't match... If you'd like to make changes... If you've simply changed your mind and want to cancel... Ledger Flex / Ledger Stax Ledger Nano X / Ledger Nano S Plus Tap ' Reject ' on your Ledger device, then tap ' Yes, reject ' to decline signing of the transaction. Click ' Reject ' using your Ledger device.","title":"Rejecting"},{"location":"desktop-wallet/user-guides/ledger/#6-confirm-and-send","text":"After reviewing and approving the vote details using your Ledger device, you'll have a third and final opportunity to review the vote transaction details before broadcasting it to the network. If everything looks good and you'd like to proceed with voting, click the \u2018 Send \u2019 button as shown below.","title":"6. Confirm and Send"},{"location":"desktop-wallet/user-guides/ledger/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"desktop-wallet/user-guides/ledger/#my-solar-desktop-wallet-does-not-show-any-ledger-wallets","text":"Make sure your Ledger device is connected to your computer, that it is unlocked, and that the Solar Ledger app is opened. The screen of your Ledger device should say \u2018 Solar is ready .\u2019 Make sure Ledger Live, or any other software that connects to Ledger devices, is not opened as this can interfere with a Ledger device's connection. Make sure you have installed the latest version of the Solar Desktop Wallet, available here: https://solar.org/desktop-wallet . Restart the Solar Desktop Wallet or 'Force Reload' it using CTRL + SHIFT + R (Windows) or CMD + SHIFT + R (Linux, macOS)","title":"My Solar Desktop Wallet does not show any Ledger wallets"},{"location":"desktop-wallet/user-guides/ledger/#support","text":"If you have any questions, please reach out to the Solar community on the official Solar channels: Discord: https://discord.solar.org Telegram: https://telegram.solar.org","title":"Support"},{"location":"desktop-wallet/user-guides/register-resign-block-producer/","text":"Registering or Resigning a Block Producer \u00b6 Register as a Block Producer \u00b6 Registering as a block producer is a simple transaction. It provides network nodes with a record of the sending address opening itself to accept votes from other wallets via a registered username. You can only vote for an address that was registered in this fashion. Click on the circle on the top-right Click on \"Block Producer Registration\" Enter your mnemonic or encryption password Minimum fee for block producer registration is 75 SXP! Info For more information about fees, please visit: Transaction Fees Resign your Block Producer \u00b6 \"Block Producer Resignation\" is a transaction type being offered in Solar Core that gives block producers the ability to either temporarily or permanently resign and exclude themselves from the block producer rankings. Only a temporary resignation can be revoked by submitting a Resignation Recovation transaction. Open the Solar Desktop Wallet and select the vertical ellipsis icon next to the right of the send button. Select the dropdown menu under Registration and select \"Resign Block Producer\" Enter your wallet\u2019s mnemonic (or password if you are using encrypted option) and confirm the transaction. Refresh your wallet and you will see that after the next round of forging, your block producer will be marked resigned and no longer counted in the active block producer rankings (top 53).","title":"Registering/Resigning a Block Producer"},{"location":"desktop-wallet/user-guides/register-resign-block-producer/#registering-or-resigning-a-block-producer","text":"","title":"Registering or Resigning a Block Producer"},{"location":"desktop-wallet/user-guides/register-resign-block-producer/#register-as-a-block-producer","text":"Registering as a block producer is a simple transaction. It provides network nodes with a record of the sending address opening itself to accept votes from other wallets via a registered username. You can only vote for an address that was registered in this fashion. Click on the circle on the top-right Click on \"Block Producer Registration\" Enter your mnemonic or encryption password Minimum fee for block producer registration is 75 SXP! Info For more information about fees, please visit: Transaction Fees","title":"Register as a Block Producer"},{"location":"desktop-wallet/user-guides/register-resign-block-producer/#resign-your-block-producer","text":"\"Block Producer Resignation\" is a transaction type being offered in Solar Core that gives block producers the ability to either temporarily or permanently resign and exclude themselves from the block producer rankings. Only a temporary resignation can be revoked by submitting a Resignation Recovation transaction. Open the Solar Desktop Wallet and select the vertical ellipsis icon next to the right of the send button. Select the dropdown menu under Registration and select \"Resign Block Producer\" Enter your wallet\u2019s mnemonic (or password if you are using encrypted option) and confirm the transaction. Refresh your wallet and you will see that after the next round of forging, your block producer will be marked resigned and no longer counted in the active block producer rankings (top 53).","title":"Resign your Block Producer"},{"location":"desktop-wallet/user-guides/register-second-mnemonic/","text":"Registering a Second Mnemonic \u00b6 Security is critical. By issuing an extra signature transaction, you tell network nodes to verify that every transaction coming from your wallet is also signed by another mnemonic. Info For more information about fees, please visit: Transaction Fees","title":"Registering a 2nd Mnemonic"},{"location":"desktop-wallet/user-guides/register-second-mnemonic/#registering-a-second-mnemonic","text":"Security is critical. By issuing an extra signature transaction, you tell network nodes to verify that every transaction coming from your wallet is also signed by another mnemonic. Info For more information about fees, please visit: Transaction Fees","title":"Registering a Second Mnemonic"},{"location":"desktop-wallet/user-guides/send/","text":"Sending SXP \u00b6 Transferring SXP from your wallet is the most common type of transaction. A transfer transaction can transfer funds to one or multiple addresses. You can quickly send a transfer by clicking on the Send button in the header of the wallet detail page. This will bring up a prompt, on which you can fill in the required information to create a transfer transaction. Info For more information about fees, please visit: Transaction Fees Enter the address(es) and amount(s) to transfer, your desired transaction fee and your mnemonic or encryption password. Upon clicking Next , you will have to review the transfer transaction's details. Proceed by clicking the \"Send\" button and voila!","title":"Sending SXP"},{"location":"desktop-wallet/user-guides/send/#sending-sxp","text":"Transferring SXP from your wallet is the most common type of transaction. A transfer transaction can transfer funds to one or multiple addresses. You can quickly send a transfer by clicking on the Send button in the header of the wallet detail page. This will bring up a prompt, on which you can fill in the required information to create a transfer transaction. Info For more information about fees, please visit: Transaction Fees Enter the address(es) and amount(s) to transfer, your desired transaction fee and your mnemonic or encryption password. Upon clicking Next , you will have to review the transfer transaction's details. Proceed by clicking the \"Send\" button and voila!","title":"Sending SXP"},{"location":"desktop-wallet/user-guides/sign-verify/","text":"Signing and Verifying Messages \u00b6 The wallet allows you to create and sign a message that other users will be able to verify as authentically yours. Message signing and verifying is all done under the Sign tab of the wallet detail page. Signing a message \u00b6 With a signed message, others can verify that a given message and signature combination originate from you. Verifying a message \u00b6 To verify a message that was signed by a different wallet, you need the wallet's public key, the original message, and the resulting signature. Success The public key of a wallet is much like the address, except it doesn't follow the same format and is not shown by default in the Desktop Wallet. You can view your wallet's public key by clicking the key icon next to your wallet's address in the wallet detail page's header. The SXP network will only know your public key once you have sent a transaction. For demonstration purposes, the images below are shown from the perspective of a second wallet, assuming the necessary details to verify the message were provided to the verifying user.","title":"Signing and Verifying Messages"},{"location":"desktop-wallet/user-guides/sign-verify/#signing-and-verifying-messages","text":"The wallet allows you to create and sign a message that other users will be able to verify as authentically yours. Message signing and verifying is all done under the Sign tab of the wallet detail page.","title":"Signing and Verifying Messages"},{"location":"desktop-wallet/user-guides/sign-verify/#signing-a-message","text":"With a signed message, others can verify that a given message and signature combination originate from you.","title":"Signing a message"},{"location":"desktop-wallet/user-guides/sign-verify/#verifying-a-message","text":"To verify a message that was signed by a different wallet, you need the wallet's public key, the original message, and the resulting signature. Success The public key of a wallet is much like the address, except it doesn't follow the same format and is not shown by default in the Desktop Wallet. You can view your wallet's public key by clicking the key icon next to your wallet's address in the wallet detail page's header. The SXP network will only know your public key once you have sent a transaction. For demonstration purposes, the images below are shown from the perspective of a second wallet, assuming the necessary details to verify the message were provided to the verifying user.","title":"Verifying a message"},{"location":"desktop-wallet/user-guides/transaction-fees/","text":"SXP Transaction Fees \u00b6 90% of all transaction fees are automatically burned. The remaining 10% are allocated to the block producer responsible for adding the respective transaction to a particular block. Though dynamic fees allow setting a custom amount, there is no reason to increase a transaction fee above the \u2018average\u2019 at this time. A user may enter a lower fee if desired, though there is no guarantee the transaction will be included in a block. Fortunately, rejected transactions do not forfeit the fee as with Ethereum and its \"gas fee\". Since the SXP transaction failed and funds never technically left the user's wallet, the Desktop Wallet and Solar simply behave as if the transaction never existed.","title":"Transaction Fees"},{"location":"desktop-wallet/user-guides/transaction-fees/#sxp-transaction-fees","text":"90% of all transaction fees are automatically burned. The remaining 10% are allocated to the block producer responsible for adding the respective transaction to a particular block. Though dynamic fees allow setting a custom amount, there is no reason to increase a transaction fee above the \u2018average\u2019 at this time. A user may enter a lower fee if desired, though there is no guarantee the transaction will be included in a block. Fortunately, rejected transactions do not forfeit the fee as with Ethereum and its \"gas fee\". Since the SXP transaction failed and funds never technically left the user's wallet, the Desktop Wallet and Solar simply behave as if the transaction never existed.","title":"SXP Transaction Fees"},{"location":"desktop-wallet/user-guides/vote/","text":"Voting for Block Producers \u00b6 General information \u00b6 You can use your SXP to vote for block producers. Some basic voting info: 1 SXP address can vote for up to 53 Block Producers at any time \u00b6 If you wish to vote for one or multiple block producers, you can simply do so from inside the Desktop Wallet. You can vote for up to 53 block producers at a time from one address. You can create as many wallets as you want and divide your SXP among them in any proportion you choose, if you want to manage your votes in a different way. Each address will be eligible to vote from 1 up to 53 block producers. 1 SXP equals a voting weight of 1 \u00b6 The more SXP you hold, the more votes you possess. If you split your SXP into multiple wallets, your votes divides proportionally among those wallets. For example, if you have 1,000 SXP your votes are equal to 1,000 SXP. If you split your SXP into two wallets of 500 SXP, each will have 500 votes. Each vote or cancel vote comes with a fee \u00b6 Each transaction in the SXP network costs a certain amount of SXP. With the implementation of dynamic fees, this cost will become adjustable. You can choose how much you want to spend for each specific transaction, even for voting and for cancelling your vote. Info For more information about staking, please visit: SXP Rewards (Staking) Who to vote For? \u00b6 Visit SXP Block Producers , our community-run block producer resource, for more information on block producer proposals. From the current list of block producers, vote according to your preferences. You can also view all registered block producers using the public REST API or a block explorer Voting for a Block Producer \u00b6 Info For more information about fees, please visit: Transaction Fees Remember that you can always change your vote!","title":"Voting for Block Producers"},{"location":"desktop-wallet/user-guides/vote/#voting-for-block-producers","text":"","title":"Voting for Block Producers"},{"location":"desktop-wallet/user-guides/vote/#general-information","text":"You can use your SXP to vote for block producers. Some basic voting info:","title":"General information"},{"location":"desktop-wallet/user-guides/vote/#1-sxp-address-can-vote-for-up-to-53-block-producers-at-any-time","text":"If you wish to vote for one or multiple block producers, you can simply do so from inside the Desktop Wallet. You can vote for up to 53 block producers at a time from one address. You can create as many wallets as you want and divide your SXP among them in any proportion you choose, if you want to manage your votes in a different way. Each address will be eligible to vote from 1 up to 53 block producers.","title":"1 SXP address can vote for up to 53 Block Producers at any time"},{"location":"desktop-wallet/user-guides/vote/#1-sxp-equals-a-voting-weight-of-1","text":"The more SXP you hold, the more votes you possess. If you split your SXP into multiple wallets, your votes divides proportionally among those wallets. For example, if you have 1,000 SXP your votes are equal to 1,000 SXP. If you split your SXP into two wallets of 500 SXP, each will have 500 votes.","title":"1 SXP equals a voting weight of 1"},{"location":"desktop-wallet/user-guides/vote/#each-vote-or-cancel-vote-comes-with-a-fee","text":"Each transaction in the SXP network costs a certain amount of SXP. With the implementation of dynamic fees, this cost will become adjustable. You can choose how much you want to spend for each specific transaction, even for voting and for cancelling your vote. Info For more information about staking, please visit: SXP Rewards (Staking)","title":"Each vote or cancel vote comes with a fee"},{"location":"desktop-wallet/user-guides/vote/#who-to-vote-for","text":"Visit SXP Block Producers , our community-run block producer resource, for more information on block producer proposals. From the current list of block producers, vote according to your preferences. You can also view all registered block producers using the public REST API or a block explorer","title":"Who to vote For?"},{"location":"desktop-wallet/user-guides/vote/#voting-for-a-block-producer","text":"Info For more information about fees, please visit: Transaction Fees Remember that you can always change your vote!","title":"Voting for a Block Producer"},{"location":"exchanges/api-guide/","text":"Complementary Examples \u00b6 Prerequisites \u00b6 Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Crypto SDK and Client SDK . You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue. pnpm \u00b6 pnpm add @solar-network/crypto pnpm add @solar-network/client npm \u00b6 npm install @solar-network/crypto npm install @solar-network/client yarn \u00b6 yarn add @solar-network/crypto yarn add @solar-network/client Now that we're setup and ready to go we'll look into some examples for the most common tasks you'll encounter when wanting to interact with the SXP Blockchain. Persisting your transaction on the blockchain \u00b6 The process of getting your transaction verified and persisted on the SXP Blockchain involves a few steps with which our SDKs will help you but lets break them down to get a better idea of what is happening. Install the Client SDK and configure it to use a node of your choosing to broadcast your transactions to. Always make sure that you have a fallback node that you can use for broadcasting in case your primary node goes offline or acts strange otherwise. Install the Crypto SDK and configure it to match the configuration of the network. This is the most important part as misconfiguration can lead to a myriad of issues as Core will reject your transactions. Retrieve the nonce of the sender wallet and increase it by 1. You can read about what a sequential nonce is and why it is important here . Create an instance of the builder for the type of transaction you want to create. This is the step where we actually create a transaction and sign it so that the SXP Blockchain can later on verify it and decide if it will be accepted and finally forged. Turn the newly created transaction into JSON and broadcast it to the network through the Client SDK. Process the API response and verify that your transaction was accepted. If the network rejects your transaction you'll receive the reason as to why that is the case in the response which might mean that you need to create a new transaction and broadcast it. Troubleshooting \u00b6 A common issue when trying to get your transaction onto the blockchain is that you'll receive an error to the effect of Transaction Version 2 is not supported which indicates that your Crypto SDK configuration might be wrong. The solution to this is to make sure that your Crypto SDK instance is properly configured. This includes both the network preset and the height it's configured to assume the network has passed, if any of those don't match up you'll encounter the aforementioned issue with the version of your transactions. Mainnet \u00b6 Managers . configManager . setFromPreset ( \"mainnet\" ); Managers . configManager . setHeight ( \" 11800000 ); Testnet \u00b6 Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 8500000 ); Info You may also configure the block height using Solar's REST API as shown in the following sections. Creating and broadcasting a transfer transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . memo ( \"This is an example memo\" ) // memo is optional . addPayment ( \"Address of Recipient Wallet 1\" , \"100000000\" ) // 1 tSXP . addPayment ( \"Address of Recipient Wallet 2\" , \"200000000\" ) // 2 tSXP . addPayment ( \"Address of Recipient Wallet 3\" , \"300000000\" ) // 3 tSXP . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info The memo is optional and limited to a length of 255 characters. It can be a good idea to add a memo to your transactions if you want to be able to easily track or identify them in the future or include a personal message to the transaction's recipient(s). Creating and broadcasting a second signature transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . secondSignature () . nonce ( senderNonce . toFixed ()) . signatureAsset ( \"this is a top secret second passphrase\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Creating and broadcasting a vote transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . vote () . nonce ( senderNonce . toFixed ()) . votesAsset ({ delegate1 : 40 , delegate2 : 60 }) // The sum has to be 100 . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info Note the numbers in the object that is passed on the votesAsset function represent the percentage of the wallet balance you want to vote towards the related delegate. This implies that the sum of all of them must be 100 or the object has to be empty to cancel an existing vote.","title":"Complementary Examples"},{"location":"exchanges/api-guide/#complementary-examples","text":"","title":"Complementary Examples"},{"location":"exchanges/api-guide/#prerequisites","text":"Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Crypto SDK and Client SDK . You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue.","title":"Prerequisites"},{"location":"exchanges/api-guide/#pnpm","text":"pnpm add @solar-network/crypto pnpm add @solar-network/client","title":"pnpm"},{"location":"exchanges/api-guide/#npm","text":"npm install @solar-network/crypto npm install @solar-network/client","title":"npm"},{"location":"exchanges/api-guide/#yarn","text":"yarn add @solar-network/crypto yarn add @solar-network/client Now that we're setup and ready to go we'll look into some examples for the most common tasks you'll encounter when wanting to interact with the SXP Blockchain.","title":"yarn"},{"location":"exchanges/api-guide/#persisting-your-transaction-on-the-blockchain","text":"The process of getting your transaction verified and persisted on the SXP Blockchain involves a few steps with which our SDKs will help you but lets break them down to get a better idea of what is happening. Install the Client SDK and configure it to use a node of your choosing to broadcast your transactions to. Always make sure that you have a fallback node that you can use for broadcasting in case your primary node goes offline or acts strange otherwise. Install the Crypto SDK and configure it to match the configuration of the network. This is the most important part as misconfiguration can lead to a myriad of issues as Core will reject your transactions. Retrieve the nonce of the sender wallet and increase it by 1. You can read about what a sequential nonce is and why it is important here . Create an instance of the builder for the type of transaction you want to create. This is the step where we actually create a transaction and sign it so that the SXP Blockchain can later on verify it and decide if it will be accepted and finally forged. Turn the newly created transaction into JSON and broadcast it to the network through the Client SDK. Process the API response and verify that your transaction was accepted. If the network rejects your transaction you'll receive the reason as to why that is the case in the response which might mean that you need to create a new transaction and broadcast it.","title":"Persisting your transaction on the blockchain"},{"location":"exchanges/api-guide/#troubleshooting","text":"A common issue when trying to get your transaction onto the blockchain is that you'll receive an error to the effect of Transaction Version 2 is not supported which indicates that your Crypto SDK configuration might be wrong. The solution to this is to make sure that your Crypto SDK instance is properly configured. This includes both the network preset and the height it's configured to assume the network has passed, if any of those don't match up you'll encounter the aforementioned issue with the version of your transactions.","title":"Troubleshooting"},{"location":"exchanges/api-guide/#mainnet","text":"Managers . configManager . setFromPreset ( \"mainnet\" ); Managers . configManager . setHeight ( \" 11800000 );","title":"Mainnet"},{"location":"exchanges/api-guide/#testnet","text":"Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 8500000 ); Info You may also configure the block height using Solar's REST API as shown in the following sections.","title":"Testnet"},{"location":"exchanges/api-guide/#creating-and-broadcasting-a-transfer-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . memo ( \"This is an example memo\" ) // memo is optional . addPayment ( \"Address of Recipient Wallet 1\" , \"100000000\" ) // 1 tSXP . addPayment ( \"Address of Recipient Wallet 2\" , \"200000000\" ) // 2 tSXP . addPayment ( \"Address of Recipient Wallet 3\" , \"300000000\" ) // 3 tSXP . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info The memo is optional and limited to a length of 255 characters. It can be a good idea to add a memo to your transactions if you want to be able to easily track or identify them in the future or include a personal message to the transaction's recipient(s).","title":"Creating and broadcasting a transfer transaction"},{"location":"exchanges/api-guide/#creating-and-broadcasting-a-second-signature-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . secondSignature () . nonce ( senderNonce . toFixed ()) . signatureAsset ( \"this is a top secret second passphrase\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })();","title":"Creating and broadcasting a second signature transaction"},{"location":"exchanges/api-guide/#creating-and-broadcasting-a-vote-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . vote () . nonce ( senderNonce . toFixed ()) . votesAsset ({ delegate1 : 40 , delegate2 : 60 }) // The sum has to be 100 . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info Note the numbers in the object that is passed on the votesAsset function represent the percentage of the wallet balance you want to vote towards the related delegate. This implies that the sum of all of them must be 100 or the object has to be empty to cancel an existing vote.","title":"Creating and broadcasting a vote transaction"},{"location":"exchanges/intro/","text":"Welcome to Solar \u00b6 This section is tailored for institutional/production usage of Solar Core The Solar Blockchain provides a Public API for interacting with the chain and its native SXP coin. The following pages describe the processes of installing and interacting with the Solar blockchain and offers examples for accomplishing the most common chain-related tasks.","title":"Welcome to Solar"},{"location":"exchanges/intro/#welcome-to-solar","text":"This section is tailored for institutional/production usage of Solar Core The Solar Blockchain provides a Public API for interacting with the chain and its native SXP coin. The following pages describe the processes of installing and interacting with the Solar blockchain and offers examples for accomplishing the most common chain-related tasks.","title":"Welcome to Solar"},{"location":"exchanges/rate-limits/","text":"Configuring Rate Limits \u00b6 Solar Core is mainly used in the context of public services, providing desktop wallets with the necessary endpoints to function. Since they serve anonymous users and to protect against DDoS attacks, Solar Core nodes have strict rate limits. Enterprise users (such as exchanges) might encounter a problem creating large batches of transactions and broadcasting them. The rate limit can be configured in multiple ways to solve these problems. Exceeding the rate limit \u00b6 By default, rate limits are enabled on Solar Core nodes. When the rate limit is exceeded; a 429 HTTP status is returned. Configuring the rate limit \u00b6 You can fine tune or completely disable the node's rate limit by editing the .env file found at ~/.config/solar-core/{network}/.env . Find most important parameters below: CORE_API_RATE_LIMIT_DISABLED = true CORE_API_RATE_LIMIT_USER_LIMIT = 300 CORE_API_RATE_LIMIT_WHITELIST = 127.0.0.1 , 192.168.1.1 , 172.31.255.1 Setting CORE_API_RATE_LIMIT_DISABLED=true will globally disable all rate limits. For internal use this is safe. More fine-grained control may be exerted by using CORE_API_RATE_LIMIT_USER_LIMIT , which uses IP addresses to assign rate limits. The unit is requests/minute (default: 100 requests/per minute/per IP). Excluding certain IP addresses from rate limiting can be achieved by setting CORE_API_RATE_LIMIT_WHITELIST= followed by comma separated list of IP addresses (default: 172.0.0.1). Use case 1: Disable rate limits \u00b6 Warning Make sure API is accessible only to your internal network and not visible to the outside world. CORE_API_RATE_LIMIT_DISABLED = true Use case 2: Allow-listing (whitelisting) \u00b6 Info Instead of globally disabling rate limits it is possible to exclude certain IP addresses from rate limits and raise the global limits. CORE_API_RATE_LIMIT_WHITELIST = 127.0.0.1 , 192.168.1.1 , 172.31.255.1 CORE_API_RATE_LIMIT_USER_LIMIT = 300","title":"Rate Limits"},{"location":"exchanges/rate-limits/#configuring-rate-limits","text":"Solar Core is mainly used in the context of public services, providing desktop wallets with the necessary endpoints to function. Since they serve anonymous users and to protect against DDoS attacks, Solar Core nodes have strict rate limits. Enterprise users (such as exchanges) might encounter a problem creating large batches of transactions and broadcasting them. The rate limit can be configured in multiple ways to solve these problems.","title":"Configuring Rate Limits"},{"location":"exchanges/rate-limits/#exceeding-the-rate-limit","text":"By default, rate limits are enabled on Solar Core nodes. When the rate limit is exceeded; a 429 HTTP status is returned.","title":"Exceeding the rate limit"},{"location":"exchanges/rate-limits/#configuring-the-rate-limit","text":"You can fine tune or completely disable the node's rate limit by editing the .env file found at ~/.config/solar-core/{network}/.env . Find most important parameters below: CORE_API_RATE_LIMIT_DISABLED = true CORE_API_RATE_LIMIT_USER_LIMIT = 300 CORE_API_RATE_LIMIT_WHITELIST = 127.0.0.1 , 192.168.1.1 , 172.31.255.1 Setting CORE_API_RATE_LIMIT_DISABLED=true will globally disable all rate limits. For internal use this is safe. More fine-grained control may be exerted by using CORE_API_RATE_LIMIT_USER_LIMIT , which uses IP addresses to assign rate limits. The unit is requests/minute (default: 100 requests/per minute/per IP). Excluding certain IP addresses from rate limiting can be achieved by setting CORE_API_RATE_LIMIT_WHITELIST= followed by comma separated list of IP addresses (default: 172.0.0.1).","title":"Configuring the rate limit"},{"location":"exchanges/rate-limits/#use-case-1-disable-rate-limits","text":"Warning Make sure API is accessible only to your internal network and not visible to the outside world. CORE_API_RATE_LIMIT_DISABLED = true","title":"Use case 1: Disable rate limits"},{"location":"exchanges/rate-limits/#use-case-2-allow-listing-whitelisting","text":"Info Instead of globally disabling rate limits it is possible to exclude certain IP addresses from rate limits and raise the global limits. CORE_API_RATE_LIMIT_WHITELIST = 127.0.0.1 , 192.168.1.1 , 172.31.255.1 CORE_API_RATE_LIMIT_USER_LIMIT = 300","title":"Use case 2: Allow-listing (whitelisting)"},{"location":"exchanges/node-installation/baremetal/","text":"Installation Steps \u00b6 A step-by-step guide on how to prepare a fully-functional environment using the install script. Getting started \u00b6 The instructions on this page will guide you through creating a new user account with the correct privileges, installing and configuring Solar Core, then starting a relay instance and logging the output using the installation script. Directly below is a quick summary of these install commands: adduser solar su -l solar wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh solar relay:start pm2 logs Step-by-step installation via the install script \u00b6 If you are planning to setup a new server you can execute the following steps. Step 1: Create a new account \u00b6 Create a new dedicated user account to manage SXP-related software. We\u2019ll illustrate this command as adduser solar to create a user by the name of \u2018solar\u2019 , but you can chose something else, if preferred. On your server, type the following into the command line: adduser solar You'll be asked to create and confirm a new user password, and be prompted to enter the user\u2019s full name and some other information. ( Feel free to leave them blank by pressing \u2018enter\u2019, they are all optional fields. ) When prompted to confirm, type \u2018Y\u2019 and press \u2018enter\u2019 to finish. Adding user 'solar' ... Adding new group 'solar' ( 1000 ) ... Adding new user 'solar' ( 1000 ) with group 'solar' ... Creating home directory '/home/solar' ... Copying files from '/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for solar Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Y Step 2: Login as the new user \u00b6 We now should switch to the user account created above, this will also land us in the user's base directory ( ~/ ). Info In this example we use 'solar' for the name of the new user account, but you should use whatever username was set in the previous steps above. Enter the following command into your terminal: su -l solar Step 3: Run the installation script \u00b6 Here, we will use the install.sh script. This installs Solar Core and all of its dependencies onto your server, then publishes the configuration files for it. Run the install script by copying and pasting this one line command into your terminal: wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d Thanks for choosing to install Solar Core! Preparing the setup procedure... Step 4: Select the Core network \u00b6 Once the installation of dependencies and Solar Core is finished you will need to select which network you wish to operate on. This can be achieved by pressing the up or down arrow keys and confirming your selection by pressing enter . Mainnet is the public network, Testnet is the development network for testing. ? Which network do you want to connect to? \u203a - Use arrow-keys. Return to submit. \u276f Mainnet Testnet After you have made your selection, you will need to confirm by pressing y and confirm again with enter \u2714 Which network do you want to connect to? \u203a Mainnet ? Are you sure? \u203a ( y/N ) The installation process will then proceed. Installing Solar Core for mainnet. This process may take a few minutes \u2826 Downloading operating system dependencies \u203a Installing operating system dependencies \u203a Downloading Core 4 .1.3 \u203a Downloading Core dependencies \u203a Installing Core dependencies \u203a Building Core 4 .1.3 \u203a Saving configuration \u203a Adding plugins \u203a Setting up database The install process might take a while, don\u2019t interrupt it, wait for it to finish. At this point, Solar Core has been successfully installed with its configuration options properly published. Installing Solar Core for mainnet. This process may take a few minutes \u2714 Downloading operating system dependencies \u2714 Installing operating system dependencies \u2714 Downloading Core 4 .1.3 \u2714 Downloading Core dependencies \u2714 Installing Core dependencies \u2714 Building Core 4 .1.3 \u2714 Saving configuration \u2714 Adding plugins \u2714 Setting up database Solar Core has been successfully installed! To get started, type solar Success \u00b6 Your installation is all set! \ud83c\udf89 That\u2019s it, you may now start your relay and view its logs using the following command: solar relay:start && pm2 logs \u2714 Starting solar-relay ... 1 | solar-relay | [ 2022 -11-06 22 :36:49.742 ] INFO: Connecting to database: solar_mainnet 1 | solar-relay | [ 2022 -11-06 22 :36:49.803 ] DEBUG: Database migration: Creating rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.809 ] DEBUG: Database migration: Creating blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.816 ] DEBUG: Database migration: Creating transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.821 ] DEBUG: Database migration: Adding block_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.823 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.825 ] DEBUG: Database migration: Adding timestamp index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.827 ] DEBUG: Database migration: Adding sender_public_key index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.829 ] DEBUG: Database migration: Adding recipient_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.832 ] DEBUG: Database migration: Adding block_id constraint to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.834 ] DEBUG: Database migration: Dropping id from rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.836 ] DEBUG: Database migration: Adding chained_blocks constraint to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.838 ] DEBUG: Database migration: Adding type_group to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.839 ] DEBUG: Database migration: Adding nonce to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.843 ] DEBUG: Database migration: Adding nonce trigger to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.845 ] DEBUG: Database migration: Adding asset to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.846 ] DEBUG: Database migration: Renaming and converting vendor_field_hex to vendor_field in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.851 ] DEBUG: Database migration: Adding type index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.853 ] DEBUG: Database migration: Adding type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.855 ] DEBUG: Database migration: Adding indexes to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.880 ] DEBUG: Database migration: Adding block_height to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.885 ] DEBUG: Database migration: Creating wallets table 1 | solar-relay | [ 2022 -11-06 22 :36:49.889 ] DEBUG: Database migration: Adding payments asset index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.890 ] DEBUG: Database migration: Configuring autovacuum on all tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.891 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.893 ] DEBUG: Database migration: Adding burned_fee to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.898 ] DEBUG: Database migration: Adding dev_fund to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.901 ] DEBUG: Database migration: Disabling fastupdate on indexes in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.902 ] DEBUG: Database migration: Renaming serialized to serialised in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.903 ] DEBUG: Database migration: Renaming payments asset to transfers in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.905 ] DEBUG: Database migration: Setting empty recipient_id to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.906 ] DEBUG: Database migration: Setting zero amount to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.907 ] DEBUG: Database migration: Renaming vendor_field to memo in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.908 ] DEBUG: Database migration: Adding username to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.911 ] DEBUG: Database migration: Creating missed_blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.913 ] DEBUG: Database migration: Adding sender_id to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.915 ] DEBUG: Database migration: Adding id index with operator class to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.917 ] DEBUG: Database migration: Adding id index with operator class to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.918 ] DEBUG: Database migration: Renaming dev_fund to donations in blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.921 ] DEBUG: Database migration: Adding timestamp, username index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.923 ] DEBUG: Database migration: Adding type, type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.926 ] DEBUG: Updating database configuration \ud83d\udcda 1 | solar-relay | [ 2022 -11-06 22 :36:49.928 ] DEBUG: Connection established 1 | solar-relay | [ 2022 -11-06 22 :36:50.192 ] WARNING: No block found in database \ud83d\ude2f 1 | solar-relay | [ 2022 -11-06 22 :36:50.236 ] NOTICE: Milestone change 1 | solar-relay | [ 2022 -11-06 22 :36:50.303 ] INFO: P2P Server started at http://suitable-wagtail:6001 1 | solar-relay | [ 2022 -11-06 22 :36:50.304 ] INFO: Starting Blockchain Manager \u26d3\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.309 ] DEBUG: event 'START' : \"uninitialised\" -> \"initialise\" -> actions: [ initialise ] 1 | solar-relay | [ 2022 -11-06 22 :36:50.313 ] INFO: Last block in database: 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: No saved states exist so a fresh state will now be generated \u203c\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: Verifying database integrity \u23f3 1 | solar-relay | [ 2022 -11-06 22 :36:50.345 ] INFO: Verified database integrity \ud83d\ude38 1 | solar-relay | [ 2022 -11-06 22 :36:50.350 ] INFO: State Generation - Step 1 of 16 : LegacyTransfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.359 ] INFO: State Generation - Step 2 of 16 : SecondSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.361 ] INFO: State Generation - Step 3 of 16 : DelegateRegistration 1 | solar-relay | [ 2022 -11-06 22 :36:50.374 ] INFO: State Generation - Step 4 of 16 : LegacyVote 1 | solar-relay | [ 2022 -11-06 22 :36:50.384 ] INFO: State Generation - Step 5 of 16 : MultiSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.391 ] INFO: State Generation - Step 6 of 16 : Ipfs 1 | solar-relay | [ 2022 -11-06 22 :36:50.393 ] INFO: State Generation - Step 7 of 16 : Transfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.396 ] INFO: State Generation - Step 8 of 16 : DelegateResignation 1 | solar-relay | [ 2022 -11-06 22 :36:50.397 ] INFO: State Generation - Step 9 of 16 : HtlcLock 1 | solar-relay | [ 2022 -11-06 22 :36:50.401 ] INFO: State Generation - Step 10 of 16 : HtlcClaim 1 | solar-relay | [ 2022 -11-06 22 :36:50.404 ] INFO: State Generation - Step 11 of 16 : HtlcRefund 1 | solar-relay | [ 2022 -11-06 22 :36:50.407 ] INFO: State Generation - Step 12 of 16 : Burn 1 | solar-relay | [ 2022 -11-06 22 :36:50.409 ] INFO: State Generation - Step 13 of 16 : Vote 1 | solar-relay | [ 2022 -11-06 22 :36:50.410 ] INFO: State Generation - Step 14 of 16 : Fees & Nonces 1 | solar-relay | [ 2022 -11-06 22 :36:50.412 ] INFO: State Generation - Step 15 of 16 : Block Rewards 1 | solar-relay | [ 2022 -11-06 22 :36:50.414 ] INFO: State Generation - Step 16 of 16 : Vote Balances & Delegate Ranking 1 | solar-relay | [ 2022 -11-06 22 :36:50.418 ] INFO: Number of registered delegates: 53 1 | solar-relay | [ 2022 -11-06 22 :36:50.420 ] INFO: Calculating productivity data \ud83e\uddee 1 | solar-relay | [ 2022 -11-06 22 :36:50.440 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.446 ] INFO: Starting Round 1 \ud83d\udd4a\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.448 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.449 ] INFO: Saving round 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.655 ] INFO: Your network connectivity has been verified by 8 .8.4.4 \u2705 ... 1 | solar-re | [ 2022 -11-06 22 :40:46.370 ] DEBUG: Delegate bfx is allowed to forge block 76 ,805 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.371 ] DEBUG: Delegate sxp is allowed to forge block 76 ,807 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.372 ] DEBUG: Delegate sl33p is allowed to forge block 76 ,809 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.373 ] DEBUG: Delegate advin is allowed to forge block 76 ,816 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.383 ] DEBUG: Delegate cactus1549 is allowed to forge block 76 ,819 \ud83d\udc4d ... Info Synchronisation of the blockchain can take some time. Once synchronised, the allowed to forge block ... messages will be logged every ~8 seconds \u2014 as opposed to the millisecond intervals shown during sync. A single round consists of 53 delegates, each forging a single block.","title":"Installation Steps"},{"location":"exchanges/node-installation/baremetal/#installation-steps","text":"A step-by-step guide on how to prepare a fully-functional environment using the install script.","title":"Installation Steps"},{"location":"exchanges/node-installation/baremetal/#getting-started","text":"The instructions on this page will guide you through creating a new user account with the correct privileges, installing and configuring Solar Core, then starting a relay instance and logging the output using the installation script. Directly below is a quick summary of these install commands: adduser solar su -l solar wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh solar relay:start pm2 logs","title":"Getting started"},{"location":"exchanges/node-installation/baremetal/#step-by-step-installation-via-the-install-script","text":"If you are planning to setup a new server you can execute the following steps.","title":"Step-by-step installation via the install script"},{"location":"exchanges/node-installation/baremetal/#step-1-create-a-new-account","text":"Create a new dedicated user account to manage SXP-related software. We\u2019ll illustrate this command as adduser solar to create a user by the name of \u2018solar\u2019 , but you can chose something else, if preferred. On your server, type the following into the command line: adduser solar You'll be asked to create and confirm a new user password, and be prompted to enter the user\u2019s full name and some other information. ( Feel free to leave them blank by pressing \u2018enter\u2019, they are all optional fields. ) When prompted to confirm, type \u2018Y\u2019 and press \u2018enter\u2019 to finish. Adding user 'solar' ... Adding new group 'solar' ( 1000 ) ... Adding new user 'solar' ( 1000 ) with group 'solar' ... Creating home directory '/home/solar' ... Copying files from '/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for solar Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Y","title":"Step 1: Create a new account"},{"location":"exchanges/node-installation/baremetal/#step-2-login-as-the-new-user","text":"We now should switch to the user account created above, this will also land us in the user's base directory ( ~/ ). Info In this example we use 'solar' for the name of the new user account, but you should use whatever username was set in the previous steps above. Enter the following command into your terminal: su -l solar","title":"Step 2: Login as the new user"},{"location":"exchanges/node-installation/baremetal/#step-3-run-the-installation-script","text":"Here, we will use the install.sh script. This installs Solar Core and all of its dependencies onto your server, then publishes the configuration files for it. Run the install script by copying and pasting this one line command into your terminal: wget -O install.sh https://raw.githubusercontent.com/solar-network/core/main/install.sh bash install.sh \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d Thanks for choosing to install Solar Core! Preparing the setup procedure...","title":"Step 3: Run the installation script"},{"location":"exchanges/node-installation/baremetal/#step-4-select-the-core-network","text":"Once the installation of dependencies and Solar Core is finished you will need to select which network you wish to operate on. This can be achieved by pressing the up or down arrow keys and confirming your selection by pressing enter . Mainnet is the public network, Testnet is the development network for testing. ? Which network do you want to connect to? \u203a - Use arrow-keys. Return to submit. \u276f Mainnet Testnet After you have made your selection, you will need to confirm by pressing y and confirm again with enter \u2714 Which network do you want to connect to? \u203a Mainnet ? Are you sure? \u203a ( y/N ) The installation process will then proceed. Installing Solar Core for mainnet. This process may take a few minutes \u2826 Downloading operating system dependencies \u203a Installing operating system dependencies \u203a Downloading Core 4 .1.3 \u203a Downloading Core dependencies \u203a Installing Core dependencies \u203a Building Core 4 .1.3 \u203a Saving configuration \u203a Adding plugins \u203a Setting up database The install process might take a while, don\u2019t interrupt it, wait for it to finish. At this point, Solar Core has been successfully installed with its configuration options properly published. Installing Solar Core for mainnet. This process may take a few minutes \u2714 Downloading operating system dependencies \u2714 Installing operating system dependencies \u2714 Downloading Core 4 .1.3 \u2714 Downloading Core dependencies \u2714 Installing Core dependencies \u2714 Building Core 4 .1.3 \u2714 Saving configuration \u2714 Adding plugins \u2714 Setting up database Solar Core has been successfully installed! To get started, type solar","title":"Step 4: Select the Core network"},{"location":"exchanges/node-installation/baremetal/#success","text":"Your installation is all set! \ud83c\udf89 That\u2019s it, you may now start your relay and view its logs using the following command: solar relay:start && pm2 logs \u2714 Starting solar-relay ... 1 | solar-relay | [ 2022 -11-06 22 :36:49.742 ] INFO: Connecting to database: solar_mainnet 1 | solar-relay | [ 2022 -11-06 22 :36:49.803 ] DEBUG: Database migration: Creating rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.809 ] DEBUG: Database migration: Creating blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.816 ] DEBUG: Database migration: Creating transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.821 ] DEBUG: Database migration: Adding block_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.823 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.825 ] DEBUG: Database migration: Adding timestamp index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.827 ] DEBUG: Database migration: Adding sender_public_key index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.829 ] DEBUG: Database migration: Adding recipient_id index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.832 ] DEBUG: Database migration: Adding block_id constraint to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.834 ] DEBUG: Database migration: Dropping id from rounds table 1 | solar-relay | [ 2022 -11-06 22 :36:49.836 ] DEBUG: Database migration: Adding chained_blocks constraint to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.838 ] DEBUG: Database migration: Adding type_group to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.839 ] DEBUG: Database migration: Adding nonce to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.843 ] DEBUG: Database migration: Adding nonce trigger to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.845 ] DEBUG: Database migration: Adding asset to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.846 ] DEBUG: Database migration: Renaming and converting vendor_field_hex to vendor_field in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.851 ] DEBUG: Database migration: Adding type index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.853 ] DEBUG: Database migration: Adding type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.855 ] DEBUG: Database migration: Adding indexes to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.880 ] DEBUG: Database migration: Adding block_height to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.885 ] DEBUG: Database migration: Creating wallets table 1 | solar-relay | [ 2022 -11-06 22 :36:49.889 ] DEBUG: Database migration: Adding payments asset index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.890 ] DEBUG: Database migration: Configuring autovacuum on all tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.891 ] DEBUG: Database migration: Adding generator_public_key index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.893 ] DEBUG: Database migration: Adding burned_fee to blocks and transactions tables 1 | solar-relay | [ 2022 -11-06 22 :36:49.898 ] DEBUG: Database migration: Adding dev_fund to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.901 ] DEBUG: Database migration: Disabling fastupdate on indexes in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.902 ] DEBUG: Database migration: Renaming serialized to serialised in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.903 ] DEBUG: Database migration: Renaming payments asset to transfers in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.905 ] DEBUG: Database migration: Setting empty recipient_id to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.906 ] DEBUG: Database migration: Setting zero amount to null in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.907 ] DEBUG: Database migration: Renaming vendor_field to memo in transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.908 ] DEBUG: Database migration: Adding username to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.911 ] DEBUG: Database migration: Creating missed_blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.913 ] DEBUG: Database migration: Adding sender_id to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.915 ] DEBUG: Database migration: Adding id index with operator class to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.917 ] DEBUG: Database migration: Adding id index with operator class to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.918 ] DEBUG: Database migration: Renaming dev_fund to donations in blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.921 ] DEBUG: Database migration: Adding timestamp, username index to blocks table 1 | solar-relay | [ 2022 -11-06 22 :36:49.923 ] DEBUG: Database migration: Adding type, type_group index to transactions table 1 | solar-relay | [ 2022 -11-06 22 :36:49.926 ] DEBUG: Updating database configuration \ud83d\udcda 1 | solar-relay | [ 2022 -11-06 22 :36:49.928 ] DEBUG: Connection established 1 | solar-relay | [ 2022 -11-06 22 :36:50.192 ] WARNING: No block found in database \ud83d\ude2f 1 | solar-relay | [ 2022 -11-06 22 :36:50.236 ] NOTICE: Milestone change 1 | solar-relay | [ 2022 -11-06 22 :36:50.303 ] INFO: P2P Server started at http://suitable-wagtail:6001 1 | solar-relay | [ 2022 -11-06 22 :36:50.304 ] INFO: Starting Blockchain Manager \u26d3\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.309 ] DEBUG: event 'START' : \"uninitialised\" -> \"initialise\" -> actions: [ initialise ] 1 | solar-relay | [ 2022 -11-06 22 :36:50.313 ] INFO: Last block in database: 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: No saved states exist so a fresh state will now be generated \u203c\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.314 ] INFO: Verifying database integrity \u23f3 1 | solar-relay | [ 2022 -11-06 22 :36:50.345 ] INFO: Verified database integrity \ud83d\ude38 1 | solar-relay | [ 2022 -11-06 22 :36:50.350 ] INFO: State Generation - Step 1 of 16 : LegacyTransfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.359 ] INFO: State Generation - Step 2 of 16 : SecondSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.361 ] INFO: State Generation - Step 3 of 16 : DelegateRegistration 1 | solar-relay | [ 2022 -11-06 22 :36:50.374 ] INFO: State Generation - Step 4 of 16 : LegacyVote 1 | solar-relay | [ 2022 -11-06 22 :36:50.384 ] INFO: State Generation - Step 5 of 16 : MultiSignature 1 | solar-relay | [ 2022 -11-06 22 :36:50.391 ] INFO: State Generation - Step 6 of 16 : Ipfs 1 | solar-relay | [ 2022 -11-06 22 :36:50.393 ] INFO: State Generation - Step 7 of 16 : Transfer 1 | solar-relay | [ 2022 -11-06 22 :36:50.396 ] INFO: State Generation - Step 8 of 16 : DelegateResignation 1 | solar-relay | [ 2022 -11-06 22 :36:50.397 ] INFO: State Generation - Step 9 of 16 : HtlcLock 1 | solar-relay | [ 2022 -11-06 22 :36:50.401 ] INFO: State Generation - Step 10 of 16 : HtlcClaim 1 | solar-relay | [ 2022 -11-06 22 :36:50.404 ] INFO: State Generation - Step 11 of 16 : HtlcRefund 1 | solar-relay | [ 2022 -11-06 22 :36:50.407 ] INFO: State Generation - Step 12 of 16 : Burn 1 | solar-relay | [ 2022 -11-06 22 :36:50.409 ] INFO: State Generation - Step 13 of 16 : Vote 1 | solar-relay | [ 2022 -11-06 22 :36:50.410 ] INFO: State Generation - Step 14 of 16 : Fees & Nonces 1 | solar-relay | [ 2022 -11-06 22 :36:50.412 ] INFO: State Generation - Step 15 of 16 : Block Rewards 1 | solar-relay | [ 2022 -11-06 22 :36:50.414 ] INFO: State Generation - Step 16 of 16 : Vote Balances & Delegate Ranking 1 | solar-relay | [ 2022 -11-06 22 :36:50.418 ] INFO: Number of registered delegates: 53 1 | solar-relay | [ 2022 -11-06 22 :36:50.420 ] INFO: Calculating productivity data \ud83e\uddee 1 | solar-relay | [ 2022 -11-06 22 :36:50.440 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.446 ] INFO: Starting Round 1 \ud83d\udd4a\ufe0f 1 | solar-relay | [ 2022 -11-06 22 :36:50.448 ] DEBUG: Loaded 53 active delegates 1 | solar-relay | [ 2022 -11-06 22 :36:50.449 ] INFO: Saving round 1 1 | solar-relay | [ 2022 -11-06 22 :36:50.655 ] INFO: Your network connectivity has been verified by 8 .8.4.4 \u2705 ... 1 | solar-re | [ 2022 -11-06 22 :40:46.370 ] DEBUG: Delegate bfx is allowed to forge block 76 ,805 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.371 ] DEBUG: Delegate sxp is allowed to forge block 76 ,807 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.372 ] DEBUG: Delegate sl33p is allowed to forge block 76 ,809 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.373 ] DEBUG: Delegate advin is allowed to forge block 76 ,816 \ud83d\udc4d 1 | solar-re | [ 2022 -11-06 22 :40:46.383 ] DEBUG: Delegate cactus1549 is allowed to forge block 76 ,819 \ud83d\udc4d ... Info Synchronisation of the blockchain can take some time. Once synchronised, the allowed to forge block ... messages will be logged every ~8 seconds \u2014 as opposed to the millisecond intervals shown during sync. A single round consists of 53 delegates, each forging a single block.","title":"Success"},{"location":"exchanges/node-installation/requirements/","text":"Hardware Requirements \u00b6 A Relay Node is a full node in the Solar network; it maintains a complete copy of the ledger (blockchain). These nodes serve as Public API endpoint, use an internal service discovery mechanism to locate other nodes and keep each other in sync. Requirements \u00b6 Supported NodeJS Version 18 Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB SXP Nodes execute many query intensive operations. The most cost-effective approach for running a high-performance node is choosing SSD over HDD. Increasing the total RAM improves cache performance. Configuration requirements \u00b6 Stable internet connection Access to multiple open ports (actual ports may be configured) Service Port Required Enabled by default Documentation P2P 6001 \u2705 \u2705 reference Public API 6003 \u274c \u2705 reference Webhooks 6004 \u274c \u274c reference","title":"Requirements"},{"location":"exchanges/node-installation/requirements/#hardware-requirements","text":"A Relay Node is a full node in the Solar network; it maintains a complete copy of the ledger (blockchain). These nodes serve as Public API endpoint, use an internal service discovery mechanism to locate other nodes and keep each other in sync.","title":"Hardware Requirements"},{"location":"exchanges/node-installation/requirements/#requirements","text":"Supported NodeJS Version 18 Supported OS Release Ubuntu >= 20.x Debian >= 10.x Ubuntu <= 18.x and Debian <= 9 are no longer supported Relay Requirements Recommended Minimum CPUs 4 2 RAM 8GB 4GB HDD 100GB - 120GB 80GB SXP Nodes execute many query intensive operations. The most cost-effective approach for running a high-performance node is choosing SSD over HDD. Increasing the total RAM improves cache performance.","title":"Requirements"},{"location":"exchanges/node-installation/requirements/#configuration-requirements","text":"Stable internet connection Access to multiple open ports (actual ports may be configured) Service Port Required Enabled by default Documentation P2P 6001 \u2705 \u2705 reference Public API 6003 \u274c \u2705 reference Webhooks 6004 \u274c \u274c reference","title":"Configuration requirements"},{"location":"project/intro/","text":"Solar \u00b6 1. What is Solar? \u00b6 A decentralised community-driven blockchain project. Solar is focused on creating an ecosystem with true governance. An ecosystem with open-source developers and community involvement. 1.2 Project mission \u00b6 Solar is a blockchain with its own native SXP coin. The SXP blockchain offers a wide variety of features and tools that allows us to level with enterprise-grade applications. 1.3 Project key highlights \u00b6 Community-focused Competing with top tier crypto projects Open-source tools with many use-cases Scalable and secure using the latest blockchain technology Deflationary and inflationary at the same time 2. Solar products and technical infrastructure \u00b6 2.1 Existing products \u00b6 Solar Wallet The main software to interact directly with the SXP blockchain is by using the so-called Solar wallets. The initial Solar wallets are forked from the ARK repositories and it offers basic functions to send and receive SXP coins and to vote for delegates on the SXP blockchain. New desktop, mobile, and browser wallets are currently being developed to interact with all the features that the SXP blockchain has to offer, such as creating tokens, interacting with the metaverse, tools to monitor the blockchain and a lot more. 2.2 Technical infrastructure \u00b6 Solar is powered by Solar Core. A safe and secure Layer-1 Blockchain Framework. Solar utilises the Delegated Proof of Stake Consensus, also known as DPoS. The Blockchain with its own native coin named SXP is fast, modular, sustainable, efficient and fully decentralised without the known issues and vulnerabilities from traditional Proof of Work (PoW) blockchains. Issues and vulnerabilities such as being energy intensive or the risk of taking part in 51% attack vectors. The Blockchain Framework has been forked from ARK Core. Solar Core improved on the security of the Blockchain Framework by fully utilising Schnorr for signatures. Solar Core entirely drops all support for ECDSA due to persistent signature malleability vectors. Solar Core also provides a more robust block production routine to minimise the likelihood of nodes missing blocks and therefore creating a more stable and operational blockchain. Security first. The blockchain framework is open-source and actively maintained on Github by dedicated Core developers. Anyone is able to create a PR or open an issue on our Github repositories to discuss or point at a potential vulnerability in our code. These issues will always have the highest priority and will be taken seriously to ensure that the framework will always be safe to use for our users and for anyone participating in the Solar DAO. The Solar Core has several enhancements such as the Side Ledger Protocol for token issuing with and without metadata and custom transaction types to allow \u201cburning\u201d and \u201cSolContract\u201d which allows the creation of Solidity Smart Contracts on the SXP Blockchain. The Solar Core also enables dynamic forging rewards based on the position of a delegate. 3. SXP coin overview & use cases \u00b6 SXP utilises a Delegated Proof of Stake concensus, from which the forging rewards are distributed to delegates. The delegates are able to further distribute these rewards to their voters and keep a percentage as reward for the contribution to the network. 90% of the transaction fees are automatically burned on the network and 10% are rewarded to delegates that forge the block with the fees. Users may use the SXP coin in the following ways: Payments Create fungible and non-fungible tokens Use SXP in the Metaverse Staking Funding projects on the launchpad Voting in Governance Proposals 4. Team \u00b6 The Solar Project mainly consists of open-source developers from several top tier projects with Nayiem Willems as the project leader for 2022. At time of writing, the Solar team has 25 developers working on the initial start of the project. With the delegating consensus, Solar aims to bring more developers or contributors to the project and reward them with the forging rewards generated by the delegates. Solar will also additionally have a Community Fund to fund individual projects that are using the SXP blockchain. More information about the developers can be obtained from this Github Page .","title":"Solar"},{"location":"project/intro/#solar","text":"","title":"Solar"},{"location":"project/intro/#1-what-is-solar","text":"A decentralised community-driven blockchain project. Solar is focused on creating an ecosystem with true governance. An ecosystem with open-source developers and community involvement.","title":"1. What is Solar?"},{"location":"project/intro/#12-project-mission","text":"Solar is a blockchain with its own native SXP coin. The SXP blockchain offers a wide variety of features and tools that allows us to level with enterprise-grade applications.","title":"1.2 Project mission"},{"location":"project/intro/#13-project-key-highlights","text":"Community-focused Competing with top tier crypto projects Open-source tools with many use-cases Scalable and secure using the latest blockchain technology Deflationary and inflationary at the same time","title":"1.3 Project key highlights"},{"location":"project/intro/#2-solar-products-and-technical-infrastructure","text":"","title":"2. Solar products and technical infrastructure"},{"location":"project/intro/#21-existing-products","text":"Solar Wallet The main software to interact directly with the SXP blockchain is by using the so-called Solar wallets. The initial Solar wallets are forked from the ARK repositories and it offers basic functions to send and receive SXP coins and to vote for delegates on the SXP blockchain. New desktop, mobile, and browser wallets are currently being developed to interact with all the features that the SXP blockchain has to offer, such as creating tokens, interacting with the metaverse, tools to monitor the blockchain and a lot more.","title":"2.1 Existing products"},{"location":"project/intro/#22-technical-infrastructure","text":"Solar is powered by Solar Core. A safe and secure Layer-1 Blockchain Framework. Solar utilises the Delegated Proof of Stake Consensus, also known as DPoS. The Blockchain with its own native coin named SXP is fast, modular, sustainable, efficient and fully decentralised without the known issues and vulnerabilities from traditional Proof of Work (PoW) blockchains. Issues and vulnerabilities such as being energy intensive or the risk of taking part in 51% attack vectors. The Blockchain Framework has been forked from ARK Core. Solar Core improved on the security of the Blockchain Framework by fully utilising Schnorr for signatures. Solar Core entirely drops all support for ECDSA due to persistent signature malleability vectors. Solar Core also provides a more robust block production routine to minimise the likelihood of nodes missing blocks and therefore creating a more stable and operational blockchain. Security first. The blockchain framework is open-source and actively maintained on Github by dedicated Core developers. Anyone is able to create a PR or open an issue on our Github repositories to discuss or point at a potential vulnerability in our code. These issues will always have the highest priority and will be taken seriously to ensure that the framework will always be safe to use for our users and for anyone participating in the Solar DAO. The Solar Core has several enhancements such as the Side Ledger Protocol for token issuing with and without metadata and custom transaction types to allow \u201cburning\u201d and \u201cSolContract\u201d which allows the creation of Solidity Smart Contracts on the SXP Blockchain. The Solar Core also enables dynamic forging rewards based on the position of a delegate.","title":"2.2 Technical infrastructure"},{"location":"project/intro/#3-sxp-coin-overview-use-cases","text":"SXP utilises a Delegated Proof of Stake concensus, from which the forging rewards are distributed to delegates. The delegates are able to further distribute these rewards to their voters and keep a percentage as reward for the contribution to the network. 90% of the transaction fees are automatically burned on the network and 10% are rewarded to delegates that forge the block with the fees. Users may use the SXP coin in the following ways: Payments Create fungible and non-fungible tokens Use SXP in the Metaverse Staking Funding projects on the launchpad Voting in Governance Proposals","title":"3. SXP coin overview &amp; use cases"},{"location":"project/intro/#4-team","text":"The Solar Project mainly consists of open-source developers from several top tier projects with Nayiem Willems as the project leader for 2022. At time of writing, the Solar team has 25 developers working on the initial start of the project. With the delegating consensus, Solar aims to bring more developers or contributors to the project and reward them with the forging rewards generated by the delegates. Solar will also additionally have a Community Fund to fund individual projects that are using the SXP blockchain. More information about the developers can be obtained from this Github Page .","title":"4. Team"},{"location":"project/whitepaper/","text":"Solar Whitepaper V2 (July 2023) The following whitepaper refers to goals and mission statements made by the Solar Blockchain Foundation. Click on the link below to view or download the whitepaper. English Whitepaper - July 2023 Vietnamese Whitepaper - July 2023 Tip If you wish to translate the whitepaper into your native language, please open a pull request in our GitHub repository .","title":"Whitepaper"},{"location":"sdk/documentation/","text":"Introduction \u00b6 Using the Solar SDKs, developers can build applications utilising the Solar blockchain. The Solar SDKs are split into two packages for each language: Client SDKs - helps developers fetch information from the Solar blockchain about its current state: which delegates are currently forging, what transactions are associated with a given wallet, and so on. Cryptography SDKs - assists developers in working with transactions: signing, serialising, deserialising, etc. If your application doesn't involve sending transactions, you can most likely build your application using the Client SDK alone. Otherwise, applications looking to leverage the full spectrum of SXP APIs should make use of both Client and Cryptography SDKs. Usage guides are included for each supported language, and examples of how to use these libraries can be found in the Examples section of each specific library. Supported languages & frameworks \u00b6 Crypto Client TypeScript TypeScript Python Python","title":"Introduction"},{"location":"sdk/documentation/#introduction","text":"Using the Solar SDKs, developers can build applications utilising the Solar blockchain. The Solar SDKs are split into two packages for each language: Client SDKs - helps developers fetch information from the Solar blockchain about its current state: which delegates are currently forging, what transactions are associated with a given wallet, and so on. Cryptography SDKs - assists developers in working with transactions: signing, serialising, deserialising, etc. If your application doesn't involve sending transactions, you can most likely build your application using the Client SDK alone. Otherwise, applications looking to leverage the full spectrum of SXP APIs should make use of both Client and Cryptography SDKs. Usage guides are included for each supported language, and examples of how to use these libraries can be found in the Examples section of each specific library.","title":"Introduction"},{"location":"sdk/documentation/#supported-languages-frameworks","text":"Crypto Client TypeScript TypeScript Python Python","title":"Supported languages &amp; frameworks"},{"location":"sdk/python/complementary-examples/","text":"Complementary Examples \u00b6 Prerequisites \u00b6 Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Solar Crypto SDK and Solar Client SDK. You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue. sudo apt update && sudo apt install python3-pip python3-dev python3-venv cd <PROJECT_DIR> python3 -m venv .venv . ./venv/bin/activate pip3 install wheel pip3 install git+https://github.com/Solar-network/python-client.git@master#egg = solar-client --upgrade pip3 install solar-crypto --upgrade Creating and broadcasting a transfer transaction \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.transfer import Transfer # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = Transfer () transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . add_transfer ( 1 , 'RECIPIENT_WALLET_ADDRESS_1' ) transaction . add_transfer ( 2 , 'RECIPIENT_WALLET_ADDRESS_2' ) transaction . set_memo ( \"Hello World\" ) #transaction.set_version(3) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Info The transaction memo is optional and limited to a length of 255 characters. It can be a good idea to add memo to your transactions if you want to be able to easily track them in the future. Rest of the examples assume V3 transactions as default. You must set the version explicitly using transaction.set_version(int) otherwise. Creating and broadcasting a legacy transfer transaction \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.legacy_transfer import LegacyTransfer # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = LegacyTransfer ( recipientId = 'RECIPIENT_WALLET_ADDRESS' , amount = 200000000 , memo = \"Hello World\" ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Creating and broadcasting a second signature transaction \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.second_signature_registration import SecondSignatureRegistration # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = SecondSignatureRegistration ( 'this is a top secret second passphrase' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Creating and broadcasting a delegate registration transaction \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.delegate_registration import DelegateRegistration # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = DelegateRegistration ( 'johndoe' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Creating and broadcasting a delegate resignation transaction \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.delegate_resignation import DelegateResignation # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = DelegateResignation () transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Info A delegate resignation has to be sent from the delegate wallet itself to verify its identity. Creating and broadcasting a vote (Solar version >= 4.0.0) \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.vote import Vote # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = Vote () transaction . set_votes ({ \"asterix\" : 34.9 , \"obelix\" : 35.1 , \"getafix\" : 30.0 }) # must tot up to 100.00 transaction . set_votes ([ \"+asterix\" , \"-obelix\" , \"+getafix\" ]) # will ignore obelix and distribute the wallet to asterix & getafix 50:50 transaction . set_votes ([ \"-obelix\" ]) # will ignore obelix and cancel vote transaction . set_votes ({}) #cancel vote transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Creating and broadcasting a legacy vote (Solar version >= 3.3.0 & < 4.0.0) \u00b6 from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.legacy_vote import LegacyVote # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = LegacyVote () transaction . set_votes ([ \"-obelix\" ]) # cancel vote transaction . set_votes ([ \"+asterix\" ]) # vote transaction . set_votes ([ \"-obelix\" , \"+asterix\" ]) # switch vote transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) `` ## Creating and broadcasting an IPFS transaction ``` python from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.ipfs import IPFS # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = IPFS ( 'QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Complementary Examples"},{"location":"sdk/python/complementary-examples/#complementary-examples","text":"","title":"Complementary Examples"},{"location":"sdk/python/complementary-examples/#prerequisites","text":"Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Solar Crypto SDK and Solar Client SDK. You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue. sudo apt update && sudo apt install python3-pip python3-dev python3-venv cd <PROJECT_DIR> python3 -m venv .venv . ./venv/bin/activate pip3 install wheel pip3 install git+https://github.com/Solar-network/python-client.git@master#egg = solar-client --upgrade pip3 install solar-crypto --upgrade","title":"Prerequisites"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-transfer-transaction","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.transfer import Transfer # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = Transfer () transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . add_transfer ( 1 , 'RECIPIENT_WALLET_ADDRESS_1' ) transaction . add_transfer ( 2 , 'RECIPIENT_WALLET_ADDRESS_2' ) transaction . set_memo ( \"Hello World\" ) #transaction.set_version(3) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Info The transaction memo is optional and limited to a length of 255 characters. It can be a good idea to add memo to your transactions if you want to be able to easily track them in the future. Rest of the examples assume V3 transactions as default. You must set the version explicitly using transaction.set_version(int) otherwise.","title":"Creating and broadcasting a transfer transaction"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-legacy-transfer-transaction","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.legacy_transfer import LegacyTransfer # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = LegacyTransfer ( recipientId = 'RECIPIENT_WALLET_ADDRESS' , amount = 200000000 , memo = \"Hello World\" ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Creating and broadcasting a legacy transfer transaction"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-second-signature-transaction","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.second_signature_registration import SecondSignatureRegistration # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = SecondSignatureRegistration ( 'this is a top secret second passphrase' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Creating and broadcasting a second signature transaction"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-delegate-registration-transaction","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.delegate_registration import DelegateRegistration # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = DelegateRegistration ( 'johndoe' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Creating and broadcasting a delegate registration transaction"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-delegate-resignation-transaction","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.delegate_resignation import DelegateResignation # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = DelegateResignation () transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) Info A delegate resignation has to be sent from the delegate wallet itself to verify its identity.","title":"Creating and broadcasting a delegate resignation transaction"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-vote-solar-version-400","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.vote import Vote # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = Vote () transaction . set_votes ({ \"asterix\" : 34.9 , \"obelix\" : 35.1 , \"getafix\" : 30.0 }) # must tot up to 100.00 transaction . set_votes ([ \"+asterix\" , \"-obelix\" , \"+getafix\" ]) # will ignore obelix and distribute the wallet to asterix & getafix 50:50 transaction . set_votes ([ \"-obelix\" ]) # will ignore obelix and cancel vote transaction . set_votes ({}) #cancel vote transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Creating and broadcasting a vote (Solar version &gt;= 4.0.0)"},{"location":"sdk/python/complementary-examples/#creating-and-broadcasting-a-legacy-vote-solar-version-330-400","text":"from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.legacy_vote import LegacyVote # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = LegacyVote () transaction . set_votes ([ \"-obelix\" ]) # cancel vote transaction . set_votes ([ \"+asterix\" ]) # vote transaction . set_votes ([ \"-obelix\" , \"+asterix\" ]) # switch vote transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse ) `` ## Creating and broadcasting an IPFS transaction ``` python from solar_client import SolarClient from solar_client.exceptions import SolarHTTPException from solar_crypto.constants import TRANSACTION_TYPE_GROUP from solar_crypto.configuration.network import set_network from solar_crypto.networks.testnet import Testnet from solar_crypto.transactions.builder.ipfs import IPFS # Set your network set_network ( Testnet ) # Configure our API client client = SolarClient ( 'https://tapi.solar.org/api' ) # Step 1: Retrieve the incremental nonce of the sender wallet senderWallet = client . wallets . get ( 'SENDER_WALLET_ADDRESS' ) nonce = int ( senderWallet [ 'data' ][ 'nonce' ]) + 1 # Step 2: Create the transaction transaction = IPFS ( 'QmYSK2JyM3RyDyB52caZCTKFR3HKniEcMnNJYdk8DQ6KKB' ) transaction . set_type_group ( TRANSACTION_TYPE_GROUP . CORE ) transaction . set_nonce ( nonce ) transaction . sign ( 'this is a top secret passphrase' ) # Step 3: Broadcast the transaction try : broadcastResponse = client . transactions . create ([ transaction . to_dict ()]) except SolarHTTPException as exception : print ( exception . response . json ()) # Step 4: Log the response print ( broadcastResponse )","title":"Creating and broadcasting a legacy vote (Solar version &gt;= 3.3.0 &amp; &lt; 4.0.0)"},{"location":"sdk/python/installation/","text":"Installation \u00b6 Python can be downloaded here . For further information on how to install Python on your operating system : Windows guide Unix guide OSx guide On OSx you can also install Python through HomeBrew , which would also install pip along, to do so, you need to install HomeBrew and then run the following command : brew install python3 Install pip \u00b6 pip is the standard package manager for Python. It allows you to install and manage additional packages that are not part of the Python standard library. On Windows : Download get-pip.py Open your terminal ( powershell , cmd , ...) and navigate to the folder containing get-pip.py Run the following command : python get-pip.py Pip is now installed On Unix : Debian / Ubuntu : sudo apt install python3-pip CentOS / Rhel : sudo yum install epel-release sudo yum install python-pip Fedora : sudo dnf install python3 Arch Linux : sudo pacman -S python-pip openSUSE : sudo zypper install python3-pip On macOS : Download get-pip.py and then run it curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py With Brew : brew install python3 You can verify that pip was installed properly by running the following command in your terminal : pip -V which should returns the version of the installed pip program.","title":"Installation"},{"location":"sdk/python/installation/#installation","text":"Python can be downloaded here . For further information on how to install Python on your operating system : Windows guide Unix guide OSx guide On OSx you can also install Python through HomeBrew , which would also install pip along, to do so, you need to install HomeBrew and then run the following command : brew install python3","title":"Installation"},{"location":"sdk/python/installation/#install-pip","text":"pip is the standard package manager for Python. It allows you to install and manage additional packages that are not part of the Python standard library. On Windows : Download get-pip.py Open your terminal ( powershell , cmd , ...) and navigate to the folder containing get-pip.py Run the following command : python get-pip.py Pip is now installed On Unix : Debian / Ubuntu : sudo apt install python3-pip CentOS / Rhel : sudo yum install epel-release sudo yum install python-pip Fedora : sudo dnf install python3 Arch Linux : sudo pacman -S python-pip openSUSE : sudo zypper install python3-pip On macOS : Download get-pip.py and then run it curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py With Brew : brew install python3 You can verify that pip was installed properly by running the following command in your terminal : pip -V which should returns the version of the installed pip program.","title":"Install pip"},{"location":"sdk/python/client/api-documentation/","text":"API Documentation \u00b6 client.api.blocks.Blocks \u00b6 all() \u00b6 def all ( self , page = None , limit = 100 , ** kwargs ) List All Blocks. Parameters \u00b6 Type Name Required Description int page No Pagination int limit No Result limits any **kwargs No Query parameters Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , block_id ) Retrieve a Block Parameters \u00b6 Type Name Required Description int block_id Yes Block ID Return value \u00b6 <class 'dict'> transactions() \u00b6 def transactions ( self , block_id , page = None , limit = 100 ) List All Transactions of a Block Parameters \u00b6 Type Name Required Description str block_id Yes Block ID int page No Pagination int limit No Query parameters Return value \u00b6 <class 'dict'> search() \u00b6 def search ( self , criteria , page = None , limit = 100 ) Search All Blocks Parameters \u00b6 Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> client.api.delegates.Delegates \u00b6 all() \u00b6 def all ( self , page = None , limit = 100 , ** kwargs ) List All Delegates Parameters \u00b6 Type Name Required Description int page No Pagination int limit No Result limits any **kwargs No Query parameters Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , delegate_id ) Retrieve a Delegate Parameters \u00b6 Type Name Required Description int delegate_id Yes Delegate identifier Return value \u00b6 <class 'dict'> search() \u00b6 def search ( self , username , page = None , limit = 100 ) Search Delegates Parameters \u00b6 Type Name Required Description str username Yes Delegate username int page No Pagination int limit No Result limits Return value \u00b6 <class 'dict'> blocks() \u00b6 def blocks ( self , delegate_id , page = None , limit = 100 ) List All Blocks of a Delegate Parameters \u00b6 Type Name Required Description str delegate_id Yes Delegate identifier int page No Pagination int limit No Result limits Return value \u00b6 <class 'dict'> voters() \u00b6 def voters ( self , delegate_id , page = None , limit = 100 , ** kwargs ) List All Voters of a Delegate Parameters \u00b6 Type Name Required Description str delegate_id Yes Delegate identifier int page No Pagination int limit No Result limits any **kwargs No Query parameters Return value \u00b6 <class 'dict'> client.api.node.Node \u00b6 configuration() \u00b6 def configuration ( self ) Retrieve the Configuration Return value \u00b6 <class 'dict'> status() \u00b6 def status ( self ) Retrieve the Status Return value \u00b6 <class 'dict'> syncing() \u00b6 def syncing ( self ) Retrieve the Syncing Status Return value \u00b6 <class 'dict'> fees() \u00b6 def fees ( self , days = None ) Retrieve the Fees Parameters \u00b6 Type Name Required Description int days No ... Return value \u00b6 <class 'dict'> client.api.peers.Peers \u00b6 all() \u00b6 def all ( self , os = None , status = None , port = None , version = None , order_by = None , page = None , limit = 100 ) List All Peers Parameters \u00b6 Type Name Required Description s str os No Operating System str status No Peer status int port No Peer port str version No Peer version str order_by No Order by int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , ip ) Retrieve a Peer Parameters \u00b6 Type Name Required Description str ip Yes IP address Return value \u00b6 <class 'dict'> client.api.transactions.Transactions \u00b6 create() \u00b6 def create ( self , transactions ) Create a Transaction Parameters \u00b6 Type Name Required Description list transactions Yes Transaction to broadcast Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , transaction_id ) Retrieve a Transaction Parameters \u00b6 Type Name Required Description str transaction_id Yes Transaction ID Return value \u00b6 <class 'dict'> all() \u00b6 def all ( self , page = None , limit = 100 , ** kwargs ) List All Transactions Parameters \u00b6 Type Name Required Description int page No Pagination int limit No Result limit any **kwargs No Query parameters Return value \u00b6 <class 'dict'> all_unconfirmed() \u00b6 def all_unconfirmed ( self , limit = 100 , offset = None , ** kwargs ) List All Unconfirmed Transactions Parameters \u00b6 Type Name Required Description int limit No Result limit int offset No Offset any **kwargs No Query parameters Return value \u00b6 <class 'dict'> get_unconfirmed() \u00b6 def get_unconfirmed ( self , transaction_id ) Get Unconfirmed Transaction Parameters \u00b6 Type Name Required Description str transaction_id Yes Transaction ID Return value \u00b6 <class 'dict'> search() \u00b6 def search ( self , criteria , page = None , limit = 100 ) Search Transactions Parameters \u00b6 Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> types() \u00b6 def types ( self ) List Transaction Types Return value \u00b6 <class 'dict'> fees() \u00b6 def fees ( self ) List Transaction Fees (Non-Dynamic) Return value \u00b6 <class 'dict'> client.api.votes.Votes \u00b6 all() \u00b6 def all ( self , page = None , limit = 100 ) List All Votes Parameters \u00b6 Type Name Required Description s int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , vote_id ) Retrieve a Vote Parameters \u00b6 Type Name Required Description str vote_id Yes Vote IDs Return value \u00b6 <class 'dict'> client.api.wallets.Wallets \u00b6 all() \u00b6 def all ( self , page = None , limit = 100 ) Retrieve All Wallets Parameters \u00b6 Type Name Required Description int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> get() \u00b6 def get ( self , wallet_id ) Retrieve a Wallet Parameters \u00b6 Type Name Required Description str wallet_id Yes Wallet identifier Return value \u00b6 <class 'dict'> transactions() \u00b6 def transactions ( self , wallet_id , page = None , limit = 100 , ** kwargs ) List All Transactions of a Wallet Parameters \u00b6 Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit any **kwargs No Query parameters Return value \u00b6 <class 'dict'> transactions_received() \u00b6 def transactions_received ( self , wallet_id , page = None , limit = 100 ) List All Received Transactions of a Wallet Parameters \u00b6 Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> transactions_sent() \u00b6 def transactions_sent ( self , wallet_id , page = None , limit = 100 ) List All Sent Transactions of a Wallet Parameters \u00b6 Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> votes() \u00b6 def votes ( self , wallet_id , page = None , limit = 100 ) List All Votes of a Wallet Parameters \u00b6 Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> top() \u00b6 def top ( self , page = None , limit = 100 ) List All Top Wallets Parameters \u00b6 Type Name Required Description int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'> search() \u00b6 def search ( self , criteria , page = None , limit = 100 ) Search All Wallets Parameters \u00b6 Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit Return value \u00b6 <class 'dict'>","title":"API Documentation"},{"location":"sdk/python/client/api-documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"sdk/python/client/api-documentation/#clientapiblocksblocks","text":"","title":"client.api.blocks.Blocks"},{"location":"sdk/python/client/api-documentation/#all","text":"def all ( self , page = None , limit = 100 , ** kwargs ) List All Blocks.","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters","text":"Type Name Required Description int page No Pagination int limit No Result limits any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get","text":"def get ( self , block_id ) Retrieve a Block","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_1","text":"Type Name Required Description int block_id Yes Block ID","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_1","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#transactions","text":"def transactions ( self , block_id , page = None , limit = 100 ) List All Transactions of a Block","title":"transactions()"},{"location":"sdk/python/client/api-documentation/#parameters_2","text":"Type Name Required Description str block_id Yes Block ID int page No Pagination int limit No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_2","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#search","text":"def search ( self , criteria , page = None , limit = 100 ) Search All Blocks","title":"search()"},{"location":"sdk/python/client/api-documentation/#parameters_3","text":"Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_3","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapidelegatesdelegates","text":"","title":"client.api.delegates.Delegates"},{"location":"sdk/python/client/api-documentation/#all_1","text":"def all ( self , page = None , limit = 100 , ** kwargs ) List All Delegates","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters_4","text":"Type Name Required Description int page No Pagination int limit No Result limits any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_4","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_1","text":"def get ( self , delegate_id ) Retrieve a Delegate","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_5","text":"Type Name Required Description int delegate_id Yes Delegate identifier","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_5","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#search_1","text":"def search ( self , username , page = None , limit = 100 ) Search Delegates","title":"search()"},{"location":"sdk/python/client/api-documentation/#parameters_6","text":"Type Name Required Description str username Yes Delegate username int page No Pagination int limit No Result limits","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_6","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#blocks","text":"def blocks ( self , delegate_id , page = None , limit = 100 ) List All Blocks of a Delegate","title":"blocks()"},{"location":"sdk/python/client/api-documentation/#parameters_7","text":"Type Name Required Description str delegate_id Yes Delegate identifier int page No Pagination int limit No Result limits","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_7","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#voters","text":"def voters ( self , delegate_id , page = None , limit = 100 , ** kwargs ) List All Voters of a Delegate","title":"voters()"},{"location":"sdk/python/client/api-documentation/#parameters_8","text":"Type Name Required Description str delegate_id Yes Delegate identifier int page No Pagination int limit No Result limits any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_8","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapinodenode","text":"","title":"client.api.node.Node"},{"location":"sdk/python/client/api-documentation/#configuration","text":"def configuration ( self ) Retrieve the Configuration","title":"configuration()"},{"location":"sdk/python/client/api-documentation/#return-value_9","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#status","text":"def status ( self ) Retrieve the Status","title":"status()"},{"location":"sdk/python/client/api-documentation/#return-value_10","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#syncing","text":"def syncing ( self ) Retrieve the Syncing Status","title":"syncing()"},{"location":"sdk/python/client/api-documentation/#return-value_11","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#fees","text":"def fees ( self , days = None ) Retrieve the Fees","title":"fees()"},{"location":"sdk/python/client/api-documentation/#parameters_9","text":"Type Name Required Description int days No ...","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_12","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapipeerspeers","text":"","title":"client.api.peers.Peers"},{"location":"sdk/python/client/api-documentation/#all_2","text":"def all ( self , os = None , status = None , port = None , version = None , order_by = None , page = None , limit = 100 ) List All Peers","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters_10","text":"Type Name Required Description s str os No Operating System str status No Peer status int port No Peer port str version No Peer version str order_by No Order by int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_13","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_2","text":"def get ( self , ip ) Retrieve a Peer","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_11","text":"Type Name Required Description str ip Yes IP address","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_14","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapitransactionstransactions","text":"","title":"client.api.transactions.Transactions"},{"location":"sdk/python/client/api-documentation/#create","text":"def create ( self , transactions ) Create a Transaction","title":"create()"},{"location":"sdk/python/client/api-documentation/#parameters_12","text":"Type Name Required Description list transactions Yes Transaction to broadcast","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_15","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_3","text":"def get ( self , transaction_id ) Retrieve a Transaction","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_13","text":"Type Name Required Description str transaction_id Yes Transaction ID","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_16","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#all_3","text":"def all ( self , page = None , limit = 100 , ** kwargs ) List All Transactions","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters_14","text":"Type Name Required Description int page No Pagination int limit No Result limit any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_17","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#all_unconfirmed","text":"def all_unconfirmed ( self , limit = 100 , offset = None , ** kwargs ) List All Unconfirmed Transactions","title":"all_unconfirmed()"},{"location":"sdk/python/client/api-documentation/#parameters_15","text":"Type Name Required Description int limit No Result limit int offset No Offset any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_18","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_unconfirmed","text":"def get_unconfirmed ( self , transaction_id ) Get Unconfirmed Transaction","title":"get_unconfirmed()"},{"location":"sdk/python/client/api-documentation/#parameters_16","text":"Type Name Required Description str transaction_id Yes Transaction ID","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_19","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#search_2","text":"def search ( self , criteria , page = None , limit = 100 ) Search Transactions","title":"search()"},{"location":"sdk/python/client/api-documentation/#parameters_17","text":"Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_20","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#types","text":"def types ( self ) List Transaction Types","title":"types()"},{"location":"sdk/python/client/api-documentation/#return-value_21","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#fees_1","text":"def fees ( self ) List Transaction Fees (Non-Dynamic)","title":"fees()"},{"location":"sdk/python/client/api-documentation/#return-value_22","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapivotesvotes","text":"","title":"client.api.votes.Votes"},{"location":"sdk/python/client/api-documentation/#all_4","text":"def all ( self , page = None , limit = 100 ) List All Votes","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters_18","text":"Type Name Required Description s int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_23","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_4","text":"def get ( self , vote_id ) Retrieve a Vote","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_19","text":"Type Name Required Description str vote_id Yes Vote IDs","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_24","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#clientapiwalletswallets","text":"","title":"client.api.wallets.Wallets"},{"location":"sdk/python/client/api-documentation/#all_5","text":"def all ( self , page = None , limit = 100 ) Retrieve All Wallets","title":"all()"},{"location":"sdk/python/client/api-documentation/#parameters_20","text":"Type Name Required Description int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_25","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#get_5","text":"def get ( self , wallet_id ) Retrieve a Wallet","title":"get()"},{"location":"sdk/python/client/api-documentation/#parameters_21","text":"Type Name Required Description str wallet_id Yes Wallet identifier","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_26","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#transactions_1","text":"def transactions ( self , wallet_id , page = None , limit = 100 , ** kwargs ) List All Transactions of a Wallet","title":"transactions()"},{"location":"sdk/python/client/api-documentation/#parameters_22","text":"Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit any **kwargs No Query parameters","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_27","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#transactions_received","text":"def transactions_received ( self , wallet_id , page = None , limit = 100 ) List All Received Transactions of a Wallet","title":"transactions_received()"},{"location":"sdk/python/client/api-documentation/#parameters_23","text":"Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_28","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#transactions_sent","text":"def transactions_sent ( self , wallet_id , page = None , limit = 100 ) List All Sent Transactions of a Wallet","title":"transactions_sent()"},{"location":"sdk/python/client/api-documentation/#parameters_24","text":"Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_29","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#votes","text":"def votes ( self , wallet_id , page = None , limit = 100 ) List All Votes of a Wallet","title":"votes()"},{"location":"sdk/python/client/api-documentation/#parameters_25","text":"Type Name Required Description str wallet_id Yes Wallet identifier int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_30","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#top","text":"def top ( self , page = None , limit = 100 ) List All Top Wallets","title":"top()"},{"location":"sdk/python/client/api-documentation/#parameters_26","text":"Type Name Required Description int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_31","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/api-documentation/#search_3","text":"def search ( self , criteria , page = None , limit = 100 ) Search All Wallets","title":"search()"},{"location":"sdk/python/client/api-documentation/#parameters_27","text":"Type Name Required Description dict criteria Yes Search parameters int page No Pagination int limit No Result limit","title":"Parameters"},{"location":"sdk/python/client/api-documentation/#return-value_32","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/client/examples/","text":"Examples \u00b6 Initialization \u00b6 from client import SolarClient client = SolarClient ( 'https://node.ip.address:port/api' ) Blocks \u00b6 This service API grants access to the blocks resource . A block is a signed set of transactions created by a delegate and permanently committed to the SXP blockchain. It is not possible to POST a block through the public API. Relay Nodes accept only blocks posted by a delegate at the correct time through the internal API. List all blocks \u00b6 blocks = client . blocks . all () # With parameters blocks = client . blocks . all ( page = 5 , limit = 10 , { \"orderBy\" : \"height\" }) # Available extra_parameters : # orderBy, ... print ( blocks ) >>> { 'meta' : { 'count' : 10 , ... }} Retrieve a block \u00b6 block = client . blocks . get ( 'validBlockId' ) print ( block ) >>> { 'data' : { 'id' : 'validBlockId' ... }} List all transactions of a block \u00b6 block_transactions = client . blocks . transactions ( 'validBlockId' ) # With parameters block_transactions = client . blocks . transactions ( 'validBlockId' , page = 5 , limit = 10 ) print ( block_transactions ) >>> { 'meta' : { 'count' : 10 , ... }} Search all blocks \u00b6 searched_blocks = client . blocks . search ({ \"generatorPublicKey\" : \"validPublicKey\" }) # With parameters searched_blocks = client . blocks . search ({ \"generatorPublicKey\" : \"validPublicKey\" }, page = 5 , limit = 10 ) # Available keys : # generatorPublicKey, ... print ( searched_blocks ) >>> { 'meta' : { 'count' : 100 , ... }} Delegates \u00b6 The client SDK can be used to query the delegate resource . A delegate is a regular wallet that has broadcast a registration transaction, acquired a sufficient number of votes, and has a Relay Node configured to forge new blocks through a forger module. At any time only 51 delegates are active. They are cost-efficient miners running the SXP network. Voters are wallets which have broadcast a vote transaction on a delegate. A vote remains active until an un-vote transaction is sent (it does not have to be recast unless a wallet wishes to change from delegate). Voting for a delegate does not give the delegate access to the wallet nor does it lock the coins in it. List all delegates \u00b6 delegates = client . delegates . all () # With parameters delegates = client . delegates . all ( page = 5 , limit = 20 , { \"orderBy\" : \"production\" ) # Available extra_parameters : # orderBy, ... print ( delegates ) >>> { 'meta' : { 'count' : 20 , ... }} Retrieve a delegate \u00b6 delegate = client . delegates . get ( \"delegateName\" ) print ( delegate ) >>> { 'data' : { 'username' : 'delegateName' , ... }} Search delegates \u00b6 searched_delegates = client . delegates . search ( \"delegateName\" ) # With parameters searched_delegates = client . delegates . search ( \"delegateName\" , page = 1 , limit = 5 ) print ( searched_delegates ) >>> { 'meta' : { 'count' : 1 , ... }} List all blocks of a delegate \u00b6 delegate_blocks = client . delegates . blocks ( \"delegateName\" ) # With parameters delegate_blocks = client . delegates . blocks ( \"delegateName\" , page = 1 , limit = 20 ) print ( delegate_blocks ) >>> { 'meta' : { 'count' : 20 , ... }} List all voters of a delegate \u00b6 delegate_voters = client . delegates . voters ( \"delegateName\" ) # With parameters delegate_voters = client . delegates . voters ( \"delegateName\" , page = 1 , limit = 10 ) print ( delegate_voters ) >>> { 'meta' : { 'count' : 10 , ... }} Node \u00b6 The SXP network consists of different anonymous nodes (servers), maintaining the public ledger, validating transactions and blocks and providing APIs. The node resource allows for querying the health and configurations of the node used by the instantiated client. Retrieve the configuration \u00b6 configuration = client . node . configuration () print ( configuration ) >>> { 'data' : { 'nethash' : '6e84d08bd299ed97c212c886c98a57e36545c8f5d645ca7eeae63a8bd62d8988' , ... }} Retrieve the status \u00b6 status = client . node . status () print ( status ) >>> { 'data' : { 'synced' : True , 'now' : 6897158 , 'blocksCount' : - 1 }} Retrieve the syncing status \u00b6 syncing_status = client . node . syncing () print ( syncing_status ) >>> { 'data' : { 'syncing' : False , 'blocks' : - 1 , 'height' : 6897160 , 'id' : '12905037940821862953' }} Retrieve the node fees \u00b6 fees = client . node . fees () print ( fees ) >>> { \"meta\" :{ \"days\" : 7 , ... }} Peers \u00b6 Each node is connected to a set of peers, which are Relay or Delegate Nodes as well. The peers resource provides access to all peers connected to our node. Peers have made their Public API available for use; however for mission-critical queries and transaction posting you should use a node which is under your control. We provide a guide to setting up a Relay Node here . List all peers \u00b6 peers = client . peers . all () # With parameters peers = client . peers . all ( os = \"\" , status = \"\" , port = 6002 , version = \"\" , orderBy = \"latency\" , page = 1 , limit = 10 ) print ( peers ) >>> { 'meta' : { 'count' : 10 , ... }} Retrieve a peer \u00b6 peer = client . peers . get ( \"peerIpAddress\" ) print ( peer ) >>> { 'data' : { 'count' : 20 , ... }} # Need to changes Transactions \u00b6 The heart of any blockchain is formed by its transactions; state-altering payloads signed by a wallet. Most likely you will be querying for transactions most often, using the transaction resource . A transaction is the only object which may be posted by a non-delegate. It requires a signature from a wallet containing a sufficient amount of SXP. Create a transaction \u00b6 transaction = client . transactions . create ([ signed_transaction ]) print ( transaction ) >>> < class ' dict '> # Need to update Retrieve a transaction \u00b6 transaction = client . transactions . get ( \"validTransactionId\" ) print ( transaction ) >>> < class ' dict '> # Need to update List all transactions \u00b6 transactions = client . transactions . all () # With parameters transactions = client . transactions . all ( page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... >>> { 'meta' : { 'count' : 10 , ... }} List all unconfirmed transactions \u00b6 unconfirmed_transactions = client . transactions . all_unconfirmed () # With parameters unconfirmed_transactions = client . transactions . all_unconfirmed ( page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( unconfirmed_transactions ) >>> { 'meta' : { 'count' : 10 , ... }} Get unconfirmed transaction \u00b6 unconfirmed_transaction = client . transactions . get_unconfirmed ( \"validTransactionId\" ) print ( unconfirmed_transaction ) >>> < class ' dict '> # Need to update Search transactions \u00b6 transactions = client . transactions . search ({ \"senderId\" : \"validPublicKey\" }) transactions = client . transactions . search ({ \"senderId\" : \"validPublicKey\" }, page = 1 , limit = 10 ) # Available keys : # senderId, ... print ( transactions ) >>> { 'meta' : { 'count' : 10 , ... }} List transaction types \u00b6 types = client . transactions . types () print ( types ) >>> { \"data\" :{ ... }} List transaction fees (non-dynamic) \u00b6 fees = client . transactions . fees () >>> { \"data\" :{ ... }} Votes \u00b6 A vote is a transaction sub-type, where the asset field contains a votes object and the transaction.type is 3 . List all votes \u00b6 votes = client . votes . all () # With parameters votes = client . votes . all ( page = 1 , limit = 10 ) print ( votes ) >>> { 'meta' : { 'count' : 10 , ... }} Retrieve a vote \u00b6 vote = client . votes . get ( 'validVoteId' ) print ( vote ) >>> { 'data' : { ... }} Wallets \u00b6 The wallet resource provides access to: Wallets. Incoming and outgoing transactions per wallet. Each wallet's votes. Retrieve all wallets \u00b6 wallets = client . wallets . all () # With parameters wallets = client . wallets . all ( page = 1 , limit = 10 ) print ( wallets ) >>> { 'meta' : { 'count' : 10 , ... }} Retrieve a wallet \u00b6 wallet = client . wallets . get ( 'validWalletId' ) print ( wallet ) >>> { 'data' : { 'id' : 'validWalletId' ... }} List all transactions of a wallet \u00b6 wallet_transactions = client . wallets . transactions ( 'validWalletId' ) wallet_transactions = client . wallets . transactions ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( wallet_transactions ) >>> { 'meta' : { 'count' : 10 , ... }} List all received transactions of a wallet \u00b6 received_transactions = client . wallets . transactions_received ( 'validWalletId' ) # With parameters received_transactions = client . wallets . transactions_received ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( received_transactions ) >>> { 'meta' : { 'count' : 10 , ... }} List all sent transactions of a wallet \u00b6 sent_transactions = client . wallets . transactions_sent ( 'validWalletId' ) # With parameters sent_transactions = client . wallets . transactions_sent ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( sent_transactions ) >>> { 'meta' : { 'count' : 10 , ... }} List all votes of a wallet \u00b6 wallet_votes = client . wallets . votes ( 'validWalletId' ) # With parameters wallet_votes = client . wallets . votes ( 'validWalletId' , page = 1 , limit = 10 ) print ( wallet_votes ) >>> { 'meta' : { 'count' : 10 , ... }} List all top wallets \u00b6 top_wallets = client . wallets . top () # With parameters top_wallets = client . wallets . top ( page = 1 , limit = 10 ) print ( top_wallets ) >>> { 'meta' : { 'count' : 10 , ... }} Search all wallets \u00b6 wallets = client . wallets . search ({ \"publicKey\" : \"validPublicKey\" }) # With parameters wallets = client . wallets . search ({ \"publicKey\" : \"validPublicKey\" }, page = 1 , limit = 10 ) # Available keys : # publicKey, ... print ( wallets ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"Examples"},{"location":"sdk/python/client/examples/#examples","text":"","title":"Examples"},{"location":"sdk/python/client/examples/#initialization","text":"from client import SolarClient client = SolarClient ( 'https://node.ip.address:port/api' )","title":"Initialization"},{"location":"sdk/python/client/examples/#blocks","text":"This service API grants access to the blocks resource . A block is a signed set of transactions created by a delegate and permanently committed to the SXP blockchain. It is not possible to POST a block through the public API. Relay Nodes accept only blocks posted by a delegate at the correct time through the internal API.","title":"Blocks"},{"location":"sdk/python/client/examples/#list-all-blocks","text":"blocks = client . blocks . all () # With parameters blocks = client . blocks . all ( page = 5 , limit = 10 , { \"orderBy\" : \"height\" }) # Available extra_parameters : # orderBy, ... print ( blocks ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all blocks"},{"location":"sdk/python/client/examples/#retrieve-a-block","text":"block = client . blocks . get ( 'validBlockId' ) print ( block ) >>> { 'data' : { 'id' : 'validBlockId' ... }}","title":"Retrieve a block"},{"location":"sdk/python/client/examples/#list-all-transactions-of-a-block","text":"block_transactions = client . blocks . transactions ( 'validBlockId' ) # With parameters block_transactions = client . blocks . transactions ( 'validBlockId' , page = 5 , limit = 10 ) print ( block_transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all transactions of a block"},{"location":"sdk/python/client/examples/#search-all-blocks","text":"searched_blocks = client . blocks . search ({ \"generatorPublicKey\" : \"validPublicKey\" }) # With parameters searched_blocks = client . blocks . search ({ \"generatorPublicKey\" : \"validPublicKey\" }, page = 5 , limit = 10 ) # Available keys : # generatorPublicKey, ... print ( searched_blocks ) >>> { 'meta' : { 'count' : 100 , ... }}","title":"Search all blocks"},{"location":"sdk/python/client/examples/#delegates","text":"The client SDK can be used to query the delegate resource . A delegate is a regular wallet that has broadcast a registration transaction, acquired a sufficient number of votes, and has a Relay Node configured to forge new blocks through a forger module. At any time only 51 delegates are active. They are cost-efficient miners running the SXP network. Voters are wallets which have broadcast a vote transaction on a delegate. A vote remains active until an un-vote transaction is sent (it does not have to be recast unless a wallet wishes to change from delegate). Voting for a delegate does not give the delegate access to the wallet nor does it lock the coins in it.","title":"Delegates"},{"location":"sdk/python/client/examples/#list-all-delegates","text":"delegates = client . delegates . all () # With parameters delegates = client . delegates . all ( page = 5 , limit = 20 , { \"orderBy\" : \"production\" ) # Available extra_parameters : # orderBy, ... print ( delegates ) >>> { 'meta' : { 'count' : 20 , ... }}","title":"List all delegates"},{"location":"sdk/python/client/examples/#retrieve-a-delegate","text":"delegate = client . delegates . get ( \"delegateName\" ) print ( delegate ) >>> { 'data' : { 'username' : 'delegateName' , ... }}","title":"Retrieve a delegate"},{"location":"sdk/python/client/examples/#search-delegates","text":"searched_delegates = client . delegates . search ( \"delegateName\" ) # With parameters searched_delegates = client . delegates . search ( \"delegateName\" , page = 1 , limit = 5 ) print ( searched_delegates ) >>> { 'meta' : { 'count' : 1 , ... }}","title":"Search delegates"},{"location":"sdk/python/client/examples/#list-all-blocks-of-a-delegate","text":"delegate_blocks = client . delegates . blocks ( \"delegateName\" ) # With parameters delegate_blocks = client . delegates . blocks ( \"delegateName\" , page = 1 , limit = 20 ) print ( delegate_blocks ) >>> { 'meta' : { 'count' : 20 , ... }}","title":"List all blocks of a delegate"},{"location":"sdk/python/client/examples/#list-all-voters-of-a-delegate","text":"delegate_voters = client . delegates . voters ( \"delegateName\" ) # With parameters delegate_voters = client . delegates . voters ( \"delegateName\" , page = 1 , limit = 10 ) print ( delegate_voters ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all voters of a delegate"},{"location":"sdk/python/client/examples/#node","text":"The SXP network consists of different anonymous nodes (servers), maintaining the public ledger, validating transactions and blocks and providing APIs. The node resource allows for querying the health and configurations of the node used by the instantiated client.","title":"Node"},{"location":"sdk/python/client/examples/#retrieve-the-configuration","text":"configuration = client . node . configuration () print ( configuration ) >>> { 'data' : { 'nethash' : '6e84d08bd299ed97c212c886c98a57e36545c8f5d645ca7eeae63a8bd62d8988' , ... }}","title":"Retrieve the configuration"},{"location":"sdk/python/client/examples/#retrieve-the-status","text":"status = client . node . status () print ( status ) >>> { 'data' : { 'synced' : True , 'now' : 6897158 , 'blocksCount' : - 1 }}","title":"Retrieve the status"},{"location":"sdk/python/client/examples/#retrieve-the-syncing-status","text":"syncing_status = client . node . syncing () print ( syncing_status ) >>> { 'data' : { 'syncing' : False , 'blocks' : - 1 , 'height' : 6897160 , 'id' : '12905037940821862953' }}","title":"Retrieve the syncing status"},{"location":"sdk/python/client/examples/#retrieve-the-node-fees","text":"fees = client . node . fees () print ( fees ) >>> { \"meta\" :{ \"days\" : 7 , ... }}","title":"Retrieve the node fees"},{"location":"sdk/python/client/examples/#peers","text":"Each node is connected to a set of peers, which are Relay or Delegate Nodes as well. The peers resource provides access to all peers connected to our node. Peers have made their Public API available for use; however for mission-critical queries and transaction posting you should use a node which is under your control. We provide a guide to setting up a Relay Node here .","title":"Peers"},{"location":"sdk/python/client/examples/#list-all-peers","text":"peers = client . peers . all () # With parameters peers = client . peers . all ( os = \"\" , status = \"\" , port = 6002 , version = \"\" , orderBy = \"latency\" , page = 1 , limit = 10 ) print ( peers ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all peers"},{"location":"sdk/python/client/examples/#retrieve-a-peer","text":"peer = client . peers . get ( \"peerIpAddress\" ) print ( peer ) >>> { 'data' : { 'count' : 20 , ... }} # Need to changes","title":"Retrieve a peer"},{"location":"sdk/python/client/examples/#transactions","text":"The heart of any blockchain is formed by its transactions; state-altering payloads signed by a wallet. Most likely you will be querying for transactions most often, using the transaction resource . A transaction is the only object which may be posted by a non-delegate. It requires a signature from a wallet containing a sufficient amount of SXP.","title":"Transactions"},{"location":"sdk/python/client/examples/#create-a-transaction","text":"transaction = client . transactions . create ([ signed_transaction ]) print ( transaction ) >>> < class ' dict '> # Need to update","title":"Create a transaction"},{"location":"sdk/python/client/examples/#retrieve-a-transaction","text":"transaction = client . transactions . get ( \"validTransactionId\" ) print ( transaction ) >>> < class ' dict '> # Need to update","title":"Retrieve a transaction"},{"location":"sdk/python/client/examples/#list-all-transactions","text":"transactions = client . transactions . all () # With parameters transactions = client . transactions . all ( page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all transactions"},{"location":"sdk/python/client/examples/#list-all-unconfirmed-transactions","text":"unconfirmed_transactions = client . transactions . all_unconfirmed () # With parameters unconfirmed_transactions = client . transactions . all_unconfirmed ( page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( unconfirmed_transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all unconfirmed transactions"},{"location":"sdk/python/client/examples/#get-unconfirmed-transaction","text":"unconfirmed_transaction = client . transactions . get_unconfirmed ( \"validTransactionId\" ) print ( unconfirmed_transaction ) >>> < class ' dict '> # Need to update","title":"Get unconfirmed transaction"},{"location":"sdk/python/client/examples/#search-transactions","text":"transactions = client . transactions . search ({ \"senderId\" : \"validPublicKey\" }) transactions = client . transactions . search ({ \"senderId\" : \"validPublicKey\" }, page = 1 , limit = 10 ) # Available keys : # senderId, ... print ( transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"Search transactions"},{"location":"sdk/python/client/examples/#list-transaction-types","text":"types = client . transactions . types () print ( types ) >>> { \"data\" :{ ... }}","title":"List transaction types"},{"location":"sdk/python/client/examples/#list-transaction-fees-non-dynamic","text":"fees = client . transactions . fees () >>> { \"data\" :{ ... }}","title":"List transaction fees (non-dynamic)"},{"location":"sdk/python/client/examples/#votes","text":"A vote is a transaction sub-type, where the asset field contains a votes object and the transaction.type is 3 .","title":"Votes"},{"location":"sdk/python/client/examples/#list-all-votes","text":"votes = client . votes . all () # With parameters votes = client . votes . all ( page = 1 , limit = 10 ) print ( votes ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all votes"},{"location":"sdk/python/client/examples/#retrieve-a-vote","text":"vote = client . votes . get ( 'validVoteId' ) print ( vote ) >>> { 'data' : { ... }}","title":"Retrieve a vote"},{"location":"sdk/python/client/examples/#wallets","text":"The wallet resource provides access to: Wallets. Incoming and outgoing transactions per wallet. Each wallet's votes.","title":"Wallets"},{"location":"sdk/python/client/examples/#retrieve-all-wallets","text":"wallets = client . wallets . all () # With parameters wallets = client . wallets . all ( page = 1 , limit = 10 ) print ( wallets ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"Retrieve all wallets"},{"location":"sdk/python/client/examples/#retrieve-a-wallet","text":"wallet = client . wallets . get ( 'validWalletId' ) print ( wallet ) >>> { 'data' : { 'id' : 'validWalletId' ... }}","title":"Retrieve a wallet"},{"location":"sdk/python/client/examples/#list-all-transactions-of-a-wallet","text":"wallet_transactions = client . wallets . transactions ( 'validWalletId' ) wallet_transactions = client . wallets . transactions ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( wallet_transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all transactions of a wallet"},{"location":"sdk/python/client/examples/#list-all-received-transactions-of-a-wallet","text":"received_transactions = client . wallets . transactions_received ( 'validWalletId' ) # With parameters received_transactions = client . wallets . transactions_received ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( received_transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all received transactions of a wallet"},{"location":"sdk/python/client/examples/#list-all-sent-transactions-of-a-wallet","text":"sent_transactions = client . wallets . transactions_sent ( 'validWalletId' ) # With parameters sent_transactions = client . wallets . transactions_sent ( 'validWalletId' , page = 1 , limit = 10 , { \"orderBy\" : \"amount\" }) # Available extra_parameters : # orderBy, ... print ( sent_transactions ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all sent transactions of a wallet"},{"location":"sdk/python/client/examples/#list-all-votes-of-a-wallet","text":"wallet_votes = client . wallets . votes ( 'validWalletId' ) # With parameters wallet_votes = client . wallets . votes ( 'validWalletId' , page = 1 , limit = 10 ) print ( wallet_votes ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all votes of a wallet"},{"location":"sdk/python/client/examples/#list-all-top-wallets","text":"top_wallets = client . wallets . top () # With parameters top_wallets = client . wallets . top ( page = 1 , limit = 10 ) print ( top_wallets ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"List all top wallets"},{"location":"sdk/python/client/examples/#search-all-wallets","text":"wallets = client . wallets . search ({ \"publicKey\" : \"validPublicKey\" }) # With parameters wallets = client . wallets . search ({ \"publicKey\" : \"validPublicKey\" }, page = 1 , limit = 10 ) # Available keys : # publicKey, ... print ( wallets ) >>> { 'meta' : { 'count' : 10 , ... }}","title":"Search all wallets"},{"location":"sdk/python/client/getting-started/","text":"Python installation \u00b6 Python can be downloaded here . For further information on how to install Python on your operating system : Windows guide Unix guide OSx guide On OSx you can also install Python through HomeBrew , which would also install pip along, to do so, you need to install HomeBrew and then run the following command : brew install python3 pip \u00b6 pip is the standard package manager for Python. It allows you to install and manage additional packages that are not part of the Python standard library. Install pip \u00b6 On Windows \u00b6 Download get-pip.py Open your terminal ( powershell , cmd , ...) and navigate to the folder containing get-pip.py Run the following command : python get-pip.py Pip is now installed On Unix \u00b6 Debian / Ubuntu : sudo apt install python3-pip CentOS / Rhel : sudo yum install epel-release sudo yum install python-pip Fedora : sudo dnf install python3 Arch Linux : sudo pacman -S python-pip openSUSE : sudo zypper install python3-pip On macOS : Download get-pip.py and then run it curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py With Brew : brew install python3 You can verify that pip was installed properly by running the following command in your terminal : pip -V which should returns the version of the installed pip program. Development \u00b6 Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-client Next, move into the fresh cloned directory. cd python-client The next step would be to create something like a virtual environment to ensure no name clashes occur. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install the dependencies. These are listed inside the setup.py file. pip install \\ requests \\ backoff \\ flake8 \\ flake8-import-order \\ flake8-print \\ flake8-quotes \\ pytest \\ pytest-responses \\ pytest-mock \\ pytest-cov Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Getting Started"},{"location":"sdk/python/client/getting-started/#python-installation","text":"Python can be downloaded here . For further information on how to install Python on your operating system : Windows guide Unix guide OSx guide On OSx you can also install Python through HomeBrew , which would also install pip along, to do so, you need to install HomeBrew and then run the following command : brew install python3","title":"Python installation"},{"location":"sdk/python/client/getting-started/#pip","text":"pip is the standard package manager for Python. It allows you to install and manage additional packages that are not part of the Python standard library.","title":"pip"},{"location":"sdk/python/client/getting-started/#install-pip","text":"","title":"Install pip"},{"location":"sdk/python/client/getting-started/#on-windows","text":"Download get-pip.py Open your terminal ( powershell , cmd , ...) and navigate to the folder containing get-pip.py Run the following command : python get-pip.py Pip is now installed","title":"On Windows"},{"location":"sdk/python/client/getting-started/#on-unix","text":"Debian / Ubuntu : sudo apt install python3-pip CentOS / Rhel : sudo yum install epel-release sudo yum install python-pip Fedora : sudo dnf install python3 Arch Linux : sudo pacman -S python-pip openSUSE : sudo zypper install python3-pip On macOS : Download get-pip.py and then run it curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py With Brew : brew install python3 You can verify that pip was installed properly by running the following command in your terminal : pip -V which should returns the version of the installed pip program.","title":"On Unix"},{"location":"sdk/python/client/getting-started/#development","text":"Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-client Next, move into the fresh cloned directory. cd python-client The next step would be to create something like a virtual environment to ensure no name clashes occur. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install the dependencies. These are listed inside the setup.py file. pip install \\ requests \\ backoff \\ flake8 \\ flake8-import-order \\ flake8-print \\ flake8-quotes \\ pytest \\ pytest-responses \\ pytest-mock \\ pytest-cov Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Development"},{"location":"sdk/python/client/intro/","text":"Client \u00b6 Development \u00b6 Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-client Next, move into the fresh cloned directory. cd python-client The next step would be to create something like a virtual environment to ensure no name clashes occur. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install dependencies. python -m pip install -e . \"[dev]\" Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Introduction"},{"location":"sdk/python/client/intro/#client","text":"","title":"Client"},{"location":"sdk/python/client/intro/#development","text":"Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-client Next, move into the fresh cloned directory. cd python-client The next step would be to create something like a virtual environment to ensure no name clashes occur. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install dependencies. python -m pip install -e . \"[dev]\" Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Development"},{"location":"sdk/python/crypto/api-documentation/","text":"API Documentation \u00b6 crypto.configuration.fee \u00b6 get_fee() \u00b6 def get_fee ( transaction_type , type_group ): Get a fee for a given transaction type Parameters \u00b6 Type Name Required Description int transaction_type Yes Transaction type for which we wish to get a fee int type_group Yes transaction type group (TRANSACTION_TYPE_GROUP(Enum)) Return value \u00b6 <class 'int'> set_fee() \u00b6 def set_fee ( transaction_type , type_group , value ): Set a fee Parameters \u00b6 Type Name Required Description int transaction_type Yes Transaction type for which we wish to set a fee int type_group Yes transaction type group (TRANSACTION_TYPE_GROUP(Enum)) int value Yes Fee for a given transaction type Return value \u00b6 <class 'NoneType'> crypto.configuration.network \u00b6 set_network() \u00b6 def set_network ( network_object ): Set what network you want to use in the crypto library Parameters \u00b6 Type Name Required Description Network network_object Yes Testnet, Mainnet Return value \u00b6 <class 'NoneType'> get_network() \u00b6 def get_network (): Get settings for a selected network, default network is Testnet Return value \u00b6 <class 'dict'> set_custom_network() \u00b6 def set_custom_network ( epoch , version , wif ): Set custom network Parameters \u00b6 Type Name Required Description datetime epoch Yes Network epoch time int version Yes Network version int wif Yes Network WIF Return value \u00b6 <class 'NoneType'> get_network_version() \u00b6 def get_network_version (): Get currently set network version Return value \u00b6 <class 'Network'> crypto.identity.address \u00b6 address_from_public_key() \u00b6 def address_from_public_key ( public_key , network_version = None ): Get an address from a public key Parameters \u00b6 Type Name Required Description str public_key Yes Public key int network_version No Version of the network Return value \u00b6 <class 'str'> address_from_private_key() \u00b6 def address_from_private_key ( private_key , network_version = None ): Get an address from private key Parameters \u00b6 Type Name Required Description str private_key Yes Private key int network_version No Version of the network Return value \u00b6 <class 'str'> address_from_passphrase() \u00b6 def address_from_passphrase ( passphrase , network_version = None ): Get an address from passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase int network_version No Version of the network Return value \u00b6 <class 'str'> validate_address() \u00b6 def validate_address ( address , network_version = None ): Validate a given address Parameters \u00b6 Type Name Required Description str address Yes Address to validate int network_version No Version of the network Return value \u00b6 <class 'bool'> crypto.identity.private_key.PrivateKey \u00b6 __init__() \u00b6 def __init__ ( self , private_key ): Create a new PrivateKey instance Parameters \u00b6 Type Name Required Description str private_key Yes Hex private key Return value \u00b6 <class 'solar_crypto.identity.private_key.PrivateKey'> sign() \u00b6 def sign ( self , message , nonce = None ): Sign a message with this private key object Parameters \u00b6 Type Name Required Description str message Yes Bytes data you want to sign int nonce No Deterministic nonce Return value \u00b6 <class 'str'> to_hex() \u00b6 def to_hex ( self ): Returns a private key in hex format Return value \u00b6 <class 'str'> from_passphrase() \u00b6 def from_passphrase ( cls , passphrase ): Create PrivateKey object from a given passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase Return value \u00b6 <class 'PrivateKey'> from_hex() \u00b6 def from_hex ( cls , private_key ): Create PrivateKey object from a given hex private key Parameters \u00b6 Type Name Required Description str private_key Yes Private key Return value \u00b6 <class 'PrivateKey'> crypto.identity.public_key.PublicKey \u00b6 to_hex() \u00b6 def to_hex ( self ): Returns a public key in hex format Return value \u00b6 <class 'str'> from_passphrase() \u00b6 def from_passphrase ( cls , passphrase ): Create PublicKey object from a given passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase Return value \u00b6 <class 'PublicKey'> from_hex() \u00b6 def from_hex ( cls , public_key ): Create PublicKey object from a given hex private key Parameters \u00b6 Type Name Required Description str public_key Yes Public key Return value \u00b6 <class 'PublicKey'> crypto.identity.wif \u00b6 wif_from_passphrase() \u00b6 def wif_from_passphrase ( passphrase , network_wif = None ): Get wif from passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase int network_wif No Network WIF Return value \u00b6 <class 'str'> crypto.transactions.builder.base.BaseTransactionBuilder \u00b6 to_dict() \u00b6 def to_dict ( self ): Convert the transaction to its dictionary representation. Return value \u00b6 <class 'dict'> to_json() \u00b6 def to_json ( self ): Convert the transaction to its JSON representation Return value \u00b6 <class 'dict'> sign() \u00b6 def sign ( self , passphrase ): Sign the transaction using the given passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase associated with the account sending this transaction Return value \u00b6 <class 'NoneType'> second_sign() \u00b6 def second_sign ( self , passphrase ): Sign the transaction using the given second passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Second passphrase associated with the account sending this transaction Return value \u00b6 <class 'NoneType'> multi_sign() \u00b6 def multi_sign ( self , passphrase , index ): Sign the transaction using the given passphrase. A signature will be generated inside the signatures array of the transaction at the specified index. Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase associated with the account sending this transaction int index Yes Index of the signature for the signatures array. Starts at 0. Return value \u00b6 <class 'NoneType'> verify() \u00b6 def verify ( self ): Verify the transaction validity Return value \u00b6 <class 'bool'> verify_multisig() \u00b6 def verify_multisig ( self ): Verify the multisignature transaction validity Return value \u00b6 <class 'bool'> set_nonce() \u00b6 def set_nonce ( self , nonce ): Set the nonce of the transaction. Parameters \u00b6 Type Name Required Description int nonce Yes Sequential Nonce of the transaction Return value \u00b6 <class 'NoneType'> set_fee() \u00b6 def set_fee ( self , fee : int ): Set a fee Parameters \u00b6 Type Name Required Description int fee Yes Transaction fee Return value \u00b6 <class 'NoneType'> set_amount() \u00b6 def set_amount ( self , amount ): Set the amount of the transaction. Parameters \u00b6 Type Name Required Description int amount Yes Amount of the transaction Return value \u00b6 <class 'NoneType'> set_sender_public_key() \u00b6 def set_sender_public_key ( self , public_key ): Set the Public Key of the transaction. Parameters \u00b6 Type Name Required Description str public_key Yes Public key of the transaction Return value \u00b6 <class 'NoneType'> set_expiration() \u00b6 def set_expiration ( self , expiration ): Set the block-height or time when the transaction should expire. Parameters \u00b6 Type Name Required Description int, HTLC_LOCK_EXPIRATION_TYPE expiration Yes Expiration of the transaction Return value \u00b6 <class 'NoneType'> set_type_group() \u00b6 def set_type_group ( self , type_group ): Set the type group of the transaction. Parameters \u00b6 Type Name Required Description int, TRANSACTION_TYPE_GROUP type_group Yes Type group of the transaction Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.burn.Burn \u00b6 __init__() \u00b6 def __init__ ( self , amount ): Create a new Burn transaction instance Parameters \u00b6 Type Name Required Description int amount Yes Burn amount Return value \u00b6 <class 'solar_crypto.transactions.builder.burn.Burn'> crypto.transactions.builder.delegate_registration.DelegateRegistration \u00b6 __init__() \u00b6 def __init__ ( self , username , fee = None ): Create a new DelegateRegistration transaction instance Parameters \u00b6 Type Name Required Description str username Yes Delegate username int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.delegate_registration.DelegateRegistration'> sign() \u00b6 def sign ( self , passphrase ): Sign the transaction using the given passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.delegate_resignation.DelegateResignation \u00b6 __init__() \u00b6 def __init__ ( self , fee = None ): Create a new DelegateResignation transaction instance Parameters \u00b6 Type Name Required Description int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.delegate_resignation.DelegateResignation'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> crypto.transactions.builder.htlc_claim.HtlcClaim \u00b6 __init__() \u00b6 def __init__ ( self , lock_transaction_id , unlock_secret , hash_type : HashingType = HashingType . SHA256 , fee = None ): Create a new HtlcClaim transaction instance Parameters \u00b6 Type Name Required Description str lock_transaction_id Yes HTLC Lock transaction id str unlock_secret Yes Transaction secret hash HashingType hash_type No Hashing algorithm int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.htlc_claim.HtlcClaim'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> crypto.transactions.builder.htlc_lock.HtlcLock \u00b6 __init__() \u00b6 def __init__ ( self , recipient_id , amount , secret_hash , expiration_type , expiration_value , memo = None , fee = None ): Create a new HtlcLock transaction instance Parameters \u00b6 Type Name Required Description str recipient_id Yes Transaction recipient int amount Yes Transaction amount str secret_hash Yes Transaction secret hash. The same hash must be used in the corresponding \"claim\" transaction int expiration_type Yes Transaction expiration type. Either block height or network epoch timestamp based int expiration_value Yes Transaction expiration value. The block-height or time when the transaction should expire str memo Yes Transaction memo int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.htlc_lock.HtlcLock'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> crypto.transactions.builder.htlc_refund.HtlcRefund \u00b6 __init__() \u00b6 def __init__ ( self , lock_transaction_id , fee = None ): Create a new HtlcRefund transaction instance Parameters \u00b6 Type Name Required Description str lock_transaction_id Yes HTLC Lock transaction id int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.htlc_refund.HtlcRefund'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> crypto.transactions.builder.ipfs.IPFS \u00b6 __init__() \u00b6 def __init__ ( self , ipfs_cid = None , fee = None ): Create a new IPFS transaction instance Parameters \u00b6 Type Name Required Description str ipfs_cid No Content identifier int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.ipfs.IPFS'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> set_ipfs_cid() \u00b6 set_ipfs_cid ( self , cid : str ): Set the content identifier of the Transaction. Parameters \u00b6 Type Name Required Description str cid Yes Content identifier Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.transfer.Transfer \u00b6 __init__() \u00b6 def __init__ ( self , memo = None , fee = None ): Create a new Transfer transaction instance Parameters \u00b6 Type Name Required Description str memo No Transaction memo int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.transfer.Transfer'> get_type_group() \u00b6 def get_type_group ( self ): Get the type group of the Transaction. Return value \u00b6 <class 'int'> add_transfer() \u00b6 def add_transfer ( self , amount , recipient_id ): Add a transfer to the Transfers array of a Transaction. Parameters \u00b6 Type Name Required Description int amount Yes Transaction amount string recipient_id Yes Transaction recipient Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.multi_signature_registration.MultiSignatureRegistration \u00b6 __init__() \u00b6 def __init__ ( self , fee = None ): Create a new MultiSignatureRegistration transaction instance Parameters \u00b6 Type Name Required Description int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.multi_signature_registration.MultiSignatureRegistration'> set_min() \u00b6 def set_min ( self , minimum_participants ): Set the minimum amount of participants of a Transaction. Parameters \u00b6 Type Name Required Description int minimum_participants Yes Transaction minimum participants Return value \u00b6 <class 'NoneType'> set_public_keys() \u00b6 def set_public_keys ( self , public_keys ): Set the public keys of a Transaction. Parameters \u00b6 Type Name Required Description list public_keys Yes Transaction public keys participants Return value \u00b6 <class 'NoneType'> add_participant() \u00b6 def add_participant ( self , public_key ): Add a participant with his public key to the Transaction. Parameters \u00b6 Type Name Required Description str public_key Yes Participant public key Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.second_signature_registration.SecondSignatureRegistration \u00b6 __init__() \u00b6 def __init__ ( self , second_passphrase , fee = None ): Create a new SecondSignatureRegistration transaction instance Parameters \u00b6 Type Name Required Description str second_passphrase No Second passphrase int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.second_signature_registration.SecondSignatureRegistration'> crypto.transactions.builder.legacy_transfer.LegacyTransfer \u00b6 __init__() \u00b6 def __init__ ( self , recipientId , amount , memo = None , fee = None ): Create a new Legacy Transfer transaction instance Parameters \u00b6 Type Name Required Description str recipientId Yes Recipient identifier int amount Yes Transaction amount str memo No Transaction memo int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.legacy_transfer.LegacyTransfer'> crypto.transactions.builder.legacy_vote.LegacyVote \u00b6 __init__() \u00b6 def __init__ ( self , vote = None , fee = None ): Create a new Legacy Vote transaction instance Parameters \u00b6 Type Name Required Description str vote No Delegate address to vote for int fee No Transaction fee Return value \u00b6 <class 'solar_crypto.transactions.builder.legacy_vote.LegacyVote'> set_votes() \u00b6 def set_votes ( self , votes : typing . List [ str ]): Set legacy votes/cancel vote Parameters \u00b6 Type Name Required Description List[str] votes Yes list of votes Return value \u00b6 <class 'NoneType'> sign() \u00b6 def sign ( self , passphrase ): Sign the transaction using the given passphrase Parameters \u00b6 Type Name Required Description str passphrase Yes Passphrase Return value \u00b6 <class 'NoneType'> crypto.transactions.builder.vote.Vote \u00b6 __init__() \u00b6 def __init__ ( self ): Create a new Vote transaction instance Return value \u00b6 <class 'solar_crypto.transactions.builder.vote.Vote'> set_votes() \u00b6 def set_votes ( self , votes : typing . Union [ typing . List [ str ], typing . Dict [ str , typing . Union [ int , float , Decimal ]]] = dict ): Set votes Parameters \u00b6 Type Name Required Description votes votes Yes list of votes Return value \u00b6 <class 'NoneType'> crypto.transactions.deserialisers.base.BaseDeserialiser \u00b6 __init__() \u00b6 def __init__ ( self , serialised , asset_offset , transaction ): Create a new deserialiser instance Parameters \u00b6 Type Name Required Description ??? serialised Yes Serialised ??? asset_offset Yes Offset ??? transaction Yes Transaction Return value \u00b6 <class 'solar_crypto.transactions.deserialisers.base.BaseDeserialiser'> deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of transaction data Return value \u00b6 NotImplementedError crypto.transactions.deserialisers.burn.BurnDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"burn\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.delegate_registration.DelegateRegistrationDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"delegate registration\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.delegate_resignation.DelegateResignationDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"delegate resignation\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.htlc_claim.HtlcClaimDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"HTLC Claim\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.htlc_lock.HtlcLockDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"HTLC Lock\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.htlc_refund.HtlcRefundDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"HTLC refund\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.ipfs.IPFSDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"IPFS\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.transfer.TransferDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"transfer\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.multi_signature_registration.MultiSignatureRegistrationDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"multi signature registration\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.second_signature_registration.SecondSignatureRegistrationDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"second signature\" data. Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.legacy_transfer.LegacyTransferDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"legacy transfer\" data Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.legacy_vote.LegacyVoteDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"legacy vote\" data. Return value \u00b6 <class 'dict'> crypto.transactions.deserialisers.vote.VoteDeserialiser \u00b6 deserialise() \u00b6 def deserialise ( self ): Handle the deserialisation of \"vote\" data. Return value \u00b6 <class 'dict'> crypto.transactions.serialisers.base.BaseSerialiser \u00b6 __init__() \u00b6 def __init__ ( self , transaction , byte_data = bytes ()): Create a new serialiser instance Parameters \u00b6 Type Name Required Description Transaction transaction Yes Transaction bytes byte_data No ... Return value \u00b6 <class 'solar_crypto.transactions.serialisers.base.BaseSerialiser'> serialise \u00b6 def serialise ( self ): Handle the serialisation of transaction data Return value \u00b6 NotImplementedError crypto.transactions.serialisers.burn.BurnSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"burn\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.delegate_registration.DelegateRegistrationSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"delegate registration\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.delegate_resignationDelegateResignationSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"delegate resignation\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.htlc_claim.HtlcClaimSerialiser \u00b6 serialise() \u00b6 def serialise ( self ): Handle the serialisation of \"HTLC Claim\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.htlc_lock.HtlcLockSerialiser \u00b6 serialise() \u00b6 def serialise ( self ): Handle the serialisation of \"HTLC Lock\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.htlc_refund.HtlcRefundSerialiser \u00b6 serialise() \u00b6 def serialise ( self ): Handle the serialisation of \"HTLC Refund\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.ipfs.IPFSSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"ipfs\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.transfer.TransferSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"transfer\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.multi_signature_registration.MultiSignatureSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"multi signature\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.second_signature_registration.SecondSignatureRegistrationSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"second signature\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.legacy_transfer.LegacyTransferSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"legacy transfer\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.legacy_vote.LegacyVoteSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"legacy vote\" data Return value \u00b6 <class 'bytes'> crypto.transactions.serialisers.vote.VoteSerialiser \u00b6 serialise \u00b6 def serialise ( self ): Handle the serialisation of \"vote\" data Return value \u00b6 <class 'bytes'> crypto.transactions.deserialiser.Deserialiser \u00b6 __init__ \u00b6 def __init__ ( self , serialised ): Create a new deserialiser instance Parameters \u00b6 Type Name Required Description str serialised Yes Serialised Return value \u00b6 <class 'solar_crypto.transactions.deserialiser.Deserialiser'> deserialise \u00b6 def deserialise ( self ): Perform deserialisation Return value \u00b6 <class 'solar_crypto.transactions.transaction.Transaction'> _handle_transaction_type \u00b6 def _handle_transaction_type ( self , asset_offset , transaction ): Handle the deserialisation of transaction data Parameters \u00b6 Type Name Required Description int asset_offset Yes Offset transaction.Transaction transaction Yes Transaction Return value \u00b6 <class 'solar_crypto.transactions.transaction.Transaction'> crypto.transactions.serialiser.Serialiser \u00b6 __init__ \u00b6 def __init__ ( self , transaction ): Create a new serialiser instance Parameters \u00b6 Type Name Required Description transaction.Transaction transaction Yes Transaction Return value \u00b6 <class 'solar_crypto.transactions.serialiser.Serialiser'> serialise \u00b6 def serialise ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True , raw = False ): Perform serialisation Parameters \u00b6 Type Name Required Description bool skip_signature No Should we skip the serialisation of the signature bool skip_second_signature No Should we skip the serialisation of the second signature bool skip_multi_signature No Should we skip the serialisation of multiple signatures bool raw No Raw output Return value \u00b6 <class 'str'> _handle_transaction_type \u00b6 def _handle_transaction_type ( self , bytes_data ): Handle the serialisation of transaction data Parameters \u00b6 Type Name Required Description bytes bytes_data Yes ... Return value \u00b6 <class 'bytes'> _handle_signature \u00b6 def _handle_signature ( self , bytes_data , skip_signature , skip_second_signature , skip_multi_signature ): Handle the serialisation of \"signatures\" data Parameters \u00b6 Type Name Required Description bytes bytes_data Yes ... bool skip_signature Yes Should we skip the serialisation of the signature bool skip_second_signature Yes Should we skip the serialisation of the second signature bool skip_multi_signature Yes Should we skip the serialisation of multiple signatures Return value \u00b6 <class 'bytes'> crypto.transactions.transaction.Transaction \u00b6 __init__ \u00b6 def __init__ ( self , * args , ** kwargs ): Create a new transaction instance Parameters \u00b6 Type Name Required Description any *args No ... any **kwargs No ... Return value \u00b6 <class 'solar_crypto.transactions.transaction.Transaction'> get_id \u00b6 def get_id ( self ): Convert the byte representation to a unique identifier Return value \u00b6 <class 'str'> to_dict \u00b6 def to_dict ( self ): Convert the transaction to its dictionary representation. Return value \u00b6 <class 'dict'> to_json \u00b6 def to_json ( self ): Convert the transaction to its JSON representation Return value \u00b6 <class 'dict'> to_bytes \u00b6 def to_bytes ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True ): Convert the transaction to its byte representation Parameters \u00b6 Type Name Required Description bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures Return value \u00b6 <class 'bytes'> parse_signatures \u00b6 def parse_signatures ( self , serialised , start_offset ): Parse the signature, second signature and multi signatures Parameters \u00b6 Type Name Required Description str serialised Yes Serialised int start_offset Yes Offset Return value \u00b6 <class 'NoneType'> serialise \u00b6 def serialise ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True ): Perform serialisation Parameters \u00b6 Type Name Required Description bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures Return value \u00b6 <class 'str'> deserialise \u00b6 def deserialise ( self , serialised ): Perform deserialisation Parameters \u00b6 Type Name Required Description str serialised Yes Serialised Return value \u00b6 <class 'str'> verify \u00b6 def verify ( self ): Verify the transaction. Method will raise an exception if invalid, if it's valid it will returns True Return value \u00b6 <class 'bool'> verify_secondsig \u00b6 def verify_secondsig ( self , secondPublicKey ): Verify the second signature. Method will raise an exception if invalid, if it's valid it will returns True Parameters \u00b6 Type Name Required Description str secondPublicKey Yes Second public key Return value \u00b6 <class 'bool'> verify_signatures \u00b6 def verify_signatures ( self , multi_signature_asset ): Verify the multisignatures transaction. Method will raise an exception if invalid, it will returns True Parameters \u00b6 Type Name Required Description dict multi_signature_asset Yes Multisignature asset Return value \u00b6 <class 'bool'> _handle_transaction_type \u00b6 def _handle_transaction_type ( self , bytes_data ): Handle each transaction type differently Parameters \u00b6 Type Name Required Description bytes bytes_data Yes Input the bytes data to which you want to append new bytes Return value \u00b6 <class 'bytes'> _handle_signature \u00b6 def _handle_signature ( self , bytes_data , skip_signature , skip_second_signature , skip_multi_signature ): Handle the serialisation of \"signatures\" data Parameters \u00b6 Type Name Required Description bytes bytes_data Yes Input the bytes data to which you want to append new bytes from signature bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures Return value \u00b6 <class 'bytes'> crypto.utils.crypto \u00b6 sign_schnorr \u00b6 def sign_schnorr ( msg : bytes , private_key : PrivateKey , nonce : int = None ) -> str : Signs a message using Schnorr BIP340 and returns a hex string of the signature Parameters \u00b6 Type Name Required Description bytes msg Yes Message to be signed PrivateKey private_key Yes Private key object int nonce No Deterministic nonce Return value \u00b6 <class 'str'> sign_schnorr_legacy \u00b6 def sign_schnorr_legacy ( msg : bytes , private_key : PrivateKey ) -> str : Signs a message using Legacy Schnorr and returns a hex string of the signature Parameters \u00b6 Type Name Required Description bytes msg Yes Message to be signed PrivateKey private_key Yes Private key object int nonce No Deterministic nonce Return value \u00b6 <class 'str'> verify_schnorr \u00b6 def verify_schnorr ( msg : bytes , public_key : str , signature : str ) -> bool : Verifies a message using Schnorr BIP340 Parameters \u00b6 Type Name Required Description bytes msg Yes Message to be verified str public_key Yes Public key str signature Yes Signature Return value \u00b6 <class 'bool'> verify_schnorr_legacy \u00b6 def verify_schnorr_legacy ( msg : bytes , public_key : str , signature : str ) -> bool : Verifies a message using Legacy Schnorr Parameters \u00b6 Type Name Required Description bytes msg Yes Message to be verified str public_key Yes Public key str signature Yes Signature Return value \u00b6 <class 'bool'> crypto.utils.message.Message \u00b6 __init__ \u00b6 def __init__ ( self , ** kwargs ): Create a new message instance Parameters \u00b6 Type Name Required Description any **kwargs No ... Return value \u00b6 <class 'solar_crypto.utils.message.Message'> sign \u00b6 def sign ( cls , message , passphrase ): Sign a message using the given passphrase Parameters \u00b6 Type Name Required Description str message Yes Message str passphrase Yes Passphrase Return value \u00b6 <class 'solar_crypto.utils.message.Message'> verify \u00b6 def verify ( self ): Verify the message contents Return value \u00b6 <class 'bool'> to_dict \u00b6 def to_dict ( self ): Convert the message to its dictionary representation Return value \u00b6 <class 'dict'> to_json \u00b6 def to_json ( self ): Convert the message to its JSON representation Return value \u00b6 <class 'dict'> crypto.utils.slot \u00b6 get_time \u00b6 def get_time (): Get the time diff between now and network start Return value \u00b6 <class 'int'> get_epoch \u00b6 def get_epoch (): Get the network start epoch Return value \u00b6 <class 'datetime'>","title":"API Documentation"},{"location":"sdk/python/crypto/api-documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"sdk/python/crypto/api-documentation/#cryptoconfigurationfee","text":"","title":"crypto.configuration.fee"},{"location":"sdk/python/crypto/api-documentation/#get_fee","text":"def get_fee ( transaction_type , type_group ): Get a fee for a given transaction type","title":"get_fee()"},{"location":"sdk/python/crypto/api-documentation/#parameters","text":"Type Name Required Description int transaction_type Yes Transaction type for which we wish to get a fee int type_group Yes transaction type group (TRANSACTION_TYPE_GROUP(Enum))","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_fee","text":"def set_fee ( transaction_type , type_group , value ): Set a fee","title":"set_fee()"},{"location":"sdk/python/crypto/api-documentation/#parameters_1","text":"Type Name Required Description int transaction_type Yes Transaction type for which we wish to set a fee int type_group Yes transaction type group (TRANSACTION_TYPE_GROUP(Enum)) int value Yes Fee for a given transaction type","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_1","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoconfigurationnetwork","text":"","title":"crypto.configuration.network"},{"location":"sdk/python/crypto/api-documentation/#set_network","text":"def set_network ( network_object ): Set what network you want to use in the crypto library","title":"set_network()"},{"location":"sdk/python/crypto/api-documentation/#parameters_2","text":"Type Name Required Description Network network_object Yes Testnet, Mainnet","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_2","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_network","text":"def get_network (): Get settings for a selected network, default network is Testnet","title":"get_network()"},{"location":"sdk/python/crypto/api-documentation/#return-value_3","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_custom_network","text":"def set_custom_network ( epoch , version , wif ): Set custom network","title":"set_custom_network()"},{"location":"sdk/python/crypto/api-documentation/#parameters_3","text":"Type Name Required Description datetime epoch Yes Network epoch time int version Yes Network version int wif Yes Network WIF","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_4","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_network_version","text":"def get_network_version (): Get currently set network version","title":"get_network_version()"},{"location":"sdk/python/crypto/api-documentation/#return-value_5","text":"<class 'Network'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoidentityaddress","text":"","title":"crypto.identity.address"},{"location":"sdk/python/crypto/api-documentation/#address_from_public_key","text":"def address_from_public_key ( public_key , network_version = None ): Get an address from a public key","title":"address_from_public_key()"},{"location":"sdk/python/crypto/api-documentation/#parameters_4","text":"Type Name Required Description str public_key Yes Public key int network_version No Version of the network","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_6","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#address_from_private_key","text":"def address_from_private_key ( private_key , network_version = None ): Get an address from private key","title":"address_from_private_key()"},{"location":"sdk/python/crypto/api-documentation/#parameters_5","text":"Type Name Required Description str private_key Yes Private key int network_version No Version of the network","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_7","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#address_from_passphrase","text":"def address_from_passphrase ( passphrase , network_version = None ): Get an address from passphrase","title":"address_from_passphrase()"},{"location":"sdk/python/crypto/api-documentation/#parameters_6","text":"Type Name Required Description str passphrase Yes Passphrase int network_version No Version of the network","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_8","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#validate_address","text":"def validate_address ( address , network_version = None ): Validate a given address","title":"validate_address()"},{"location":"sdk/python/crypto/api-documentation/#parameters_7","text":"Type Name Required Description str address Yes Address to validate int network_version No Version of the network","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_9","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoidentityprivate_keyprivatekey","text":"","title":"crypto.identity.private_key.PrivateKey"},{"location":"sdk/python/crypto/api-documentation/#__init__","text":"def __init__ ( self , private_key ): Create a new PrivateKey instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_8","text":"Type Name Required Description str private_key Yes Hex private key","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_10","text":"<class 'solar_crypto.identity.private_key.PrivateKey'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign","text":"def sign ( self , message , nonce = None ): Sign a message with this private key object","title":"sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_9","text":"Type Name Required Description str message Yes Bytes data you want to sign int nonce No Deterministic nonce","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_11","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_hex","text":"def to_hex ( self ): Returns a private key in hex format","title":"to_hex()"},{"location":"sdk/python/crypto/api-documentation/#return-value_12","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#from_passphrase","text":"def from_passphrase ( cls , passphrase ): Create PrivateKey object from a given passphrase","title":"from_passphrase()"},{"location":"sdk/python/crypto/api-documentation/#parameters_10","text":"Type Name Required Description str passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_13","text":"<class 'PrivateKey'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#from_hex","text":"def from_hex ( cls , private_key ): Create PrivateKey object from a given hex private key","title":"from_hex()"},{"location":"sdk/python/crypto/api-documentation/#parameters_11","text":"Type Name Required Description str private_key Yes Private key","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_14","text":"<class 'PrivateKey'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoidentitypublic_keypublickey","text":"","title":"crypto.identity.public_key.PublicKey"},{"location":"sdk/python/crypto/api-documentation/#to_hex_1","text":"def to_hex ( self ): Returns a public key in hex format","title":"to_hex()"},{"location":"sdk/python/crypto/api-documentation/#return-value_15","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#from_passphrase_1","text":"def from_passphrase ( cls , passphrase ): Create PublicKey object from a given passphrase","title":"from_passphrase()"},{"location":"sdk/python/crypto/api-documentation/#parameters_12","text":"Type Name Required Description str passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_16","text":"<class 'PublicKey'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#from_hex_1","text":"def from_hex ( cls , public_key ): Create PublicKey object from a given hex private key","title":"from_hex()"},{"location":"sdk/python/crypto/api-documentation/#parameters_13","text":"Type Name Required Description str public_key Yes Public key","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_17","text":"<class 'PublicKey'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoidentitywif","text":"","title":"crypto.identity.wif"},{"location":"sdk/python/crypto/api-documentation/#wif_from_passphrase","text":"def wif_from_passphrase ( passphrase , network_wif = None ): Get wif from passphrase","title":"wif_from_passphrase()"},{"location":"sdk/python/crypto/api-documentation/#parameters_14","text":"Type Name Required Description str passphrase Yes Passphrase int network_wif No Network WIF","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_18","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderbasebasetransactionbuilder","text":"","title":"crypto.transactions.builder.base.BaseTransactionBuilder"},{"location":"sdk/python/crypto/api-documentation/#to_dict","text":"def to_dict ( self ): Convert the transaction to its dictionary representation.","title":"to_dict()"},{"location":"sdk/python/crypto/api-documentation/#return-value_19","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_json","text":"def to_json ( self ): Convert the transaction to its JSON representation","title":"to_json()"},{"location":"sdk/python/crypto/api-documentation/#return-value_20","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign_1","text":"def sign ( self , passphrase ): Sign the transaction using the given passphrase","title":"sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_15","text":"Type Name Required Description str passphrase Yes Passphrase associated with the account sending this transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_21","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#second_sign","text":"def second_sign ( self , passphrase ): Sign the transaction using the given second passphrase","title":"second_sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_16","text":"Type Name Required Description str passphrase Yes Second passphrase associated with the account sending this transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_22","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#multi_sign","text":"def multi_sign ( self , passphrase , index ): Sign the transaction using the given passphrase. A signature will be generated inside the signatures array of the transaction at the specified index.","title":"multi_sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_17","text":"Type Name Required Description str passphrase Yes Passphrase associated with the account sending this transaction int index Yes Index of the signature for the signatures array. Starts at 0.","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_23","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify","text":"def verify ( self ): Verify the transaction validity","title":"verify()"},{"location":"sdk/python/crypto/api-documentation/#return-value_24","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_multisig","text":"def verify_multisig ( self ): Verify the multisignature transaction validity","title":"verify_multisig()"},{"location":"sdk/python/crypto/api-documentation/#return-value_25","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_nonce","text":"def set_nonce ( self , nonce ): Set the nonce of the transaction.","title":"set_nonce()"},{"location":"sdk/python/crypto/api-documentation/#parameters_18","text":"Type Name Required Description int nonce Yes Sequential Nonce of the transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_26","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_fee_1","text":"def set_fee ( self , fee : int ): Set a fee","title":"set_fee()"},{"location":"sdk/python/crypto/api-documentation/#parameters_19","text":"Type Name Required Description int fee Yes Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_27","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_amount","text":"def set_amount ( self , amount ): Set the amount of the transaction.","title":"set_amount()"},{"location":"sdk/python/crypto/api-documentation/#parameters_20","text":"Type Name Required Description int amount Yes Amount of the transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_28","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_sender_public_key","text":"def set_sender_public_key ( self , public_key ): Set the Public Key of the transaction.","title":"set_sender_public_key()"},{"location":"sdk/python/crypto/api-documentation/#parameters_21","text":"Type Name Required Description str public_key Yes Public key of the transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_29","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_expiration","text":"def set_expiration ( self , expiration ): Set the block-height or time when the transaction should expire.","title":"set_expiration()"},{"location":"sdk/python/crypto/api-documentation/#parameters_22","text":"Type Name Required Description int, HTLC_LOCK_EXPIRATION_TYPE expiration Yes Expiration of the transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_30","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_type_group","text":"def set_type_group ( self , type_group ): Set the type group of the transaction.","title":"set_type_group()"},{"location":"sdk/python/crypto/api-documentation/#parameters_23","text":"Type Name Required Description int, TRANSACTION_TYPE_GROUP type_group Yes Type group of the transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_31","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderburnburn","text":"","title":"crypto.transactions.builder.burn.Burn"},{"location":"sdk/python/crypto/api-documentation/#__init___1","text":"def __init__ ( self , amount ): Create a new Burn transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_24","text":"Type Name Required Description int amount Yes Burn amount","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_32","text":"<class 'solar_crypto.transactions.builder.burn.Burn'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderdelegate_registrationdelegateregistration","text":"","title":"crypto.transactions.builder.delegate_registration.DelegateRegistration"},{"location":"sdk/python/crypto/api-documentation/#__init___2","text":"def __init__ ( self , username , fee = None ): Create a new DelegateRegistration transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_25","text":"Type Name Required Description str username Yes Delegate username int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_33","text":"<class 'solar_crypto.transactions.builder.delegate_registration.DelegateRegistration'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign_2","text":"def sign ( self , passphrase ): Sign the transaction using the given passphrase","title":"sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_26","text":"Type Name Required Description str passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_34","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderdelegate_resignationdelegateresignation","text":"","title":"crypto.transactions.builder.delegate_resignation.DelegateResignation"},{"location":"sdk/python/crypto/api-documentation/#__init___3","text":"def __init__ ( self , fee = None ): Create a new DelegateResignation transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_27","text":"Type Name Required Description int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_35","text":"<class 'solar_crypto.transactions.builder.delegate_resignation.DelegateResignation'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_36","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderhtlc_claimhtlcclaim","text":"","title":"crypto.transactions.builder.htlc_claim.HtlcClaim"},{"location":"sdk/python/crypto/api-documentation/#__init___4","text":"def __init__ ( self , lock_transaction_id , unlock_secret , hash_type : HashingType = HashingType . SHA256 , fee = None ): Create a new HtlcClaim transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_28","text":"Type Name Required Description str lock_transaction_id Yes HTLC Lock transaction id str unlock_secret Yes Transaction secret hash HashingType hash_type No Hashing algorithm int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_37","text":"<class 'solar_crypto.transactions.builder.htlc_claim.HtlcClaim'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group_1","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_38","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderhtlc_lockhtlclock","text":"","title":"crypto.transactions.builder.htlc_lock.HtlcLock"},{"location":"sdk/python/crypto/api-documentation/#__init___5","text":"def __init__ ( self , recipient_id , amount , secret_hash , expiration_type , expiration_value , memo = None , fee = None ): Create a new HtlcLock transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_29","text":"Type Name Required Description str recipient_id Yes Transaction recipient int amount Yes Transaction amount str secret_hash Yes Transaction secret hash. The same hash must be used in the corresponding \"claim\" transaction int expiration_type Yes Transaction expiration type. Either block height or network epoch timestamp based int expiration_value Yes Transaction expiration value. The block-height or time when the transaction should expire str memo Yes Transaction memo int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_39","text":"<class 'solar_crypto.transactions.builder.htlc_lock.HtlcLock'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group_2","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_40","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderhtlc_refundhtlcrefund","text":"","title":"crypto.transactions.builder.htlc_refund.HtlcRefund"},{"location":"sdk/python/crypto/api-documentation/#__init___6","text":"def __init__ ( self , lock_transaction_id , fee = None ): Create a new HtlcRefund transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_30","text":"Type Name Required Description str lock_transaction_id Yes HTLC Lock transaction id int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_41","text":"<class 'solar_crypto.transactions.builder.htlc_refund.HtlcRefund'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group_3","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_42","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderipfsipfs","text":"","title":"crypto.transactions.builder.ipfs.IPFS"},{"location":"sdk/python/crypto/api-documentation/#__init___7","text":"def __init__ ( self , ipfs_cid = None , fee = None ): Create a new IPFS transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_31","text":"Type Name Required Description str ipfs_cid No Content identifier int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_43","text":"<class 'solar_crypto.transactions.builder.ipfs.IPFS'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group_4","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_44","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_ipfs_cid","text":"set_ipfs_cid ( self , cid : str ): Set the content identifier of the Transaction.","title":"set_ipfs_cid()"},{"location":"sdk/python/crypto/api-documentation/#parameters_32","text":"Type Name Required Description str cid Yes Content identifier","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_45","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuildertransfertransfer","text":"","title":"crypto.transactions.builder.transfer.Transfer"},{"location":"sdk/python/crypto/api-documentation/#__init___8","text":"def __init__ ( self , memo = None , fee = None ): Create a new Transfer transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_33","text":"Type Name Required Description str memo No Transaction memo int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_46","text":"<class 'solar_crypto.transactions.builder.transfer.Transfer'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_type_group_5","text":"def get_type_group ( self ): Get the type group of the Transaction.","title":"get_type_group()"},{"location":"sdk/python/crypto/api-documentation/#return-value_47","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#add_transfer","text":"def add_transfer ( self , amount , recipient_id ): Add a transfer to the Transfers array of a Transaction.","title":"add_transfer()"},{"location":"sdk/python/crypto/api-documentation/#parameters_34","text":"Type Name Required Description int amount Yes Transaction amount string recipient_id Yes Transaction recipient","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_48","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuildermulti_signature_registrationmultisignatureregistration","text":"","title":"crypto.transactions.builder.multi_signature_registration.MultiSignatureRegistration"},{"location":"sdk/python/crypto/api-documentation/#__init___9","text":"def __init__ ( self , fee = None ): Create a new MultiSignatureRegistration transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_35","text":"Type Name Required Description int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_49","text":"<class 'solar_crypto.transactions.builder.multi_signature_registration.MultiSignatureRegistration'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_min","text":"def set_min ( self , minimum_participants ): Set the minimum amount of participants of a Transaction.","title":"set_min()"},{"location":"sdk/python/crypto/api-documentation/#parameters_36","text":"Type Name Required Description int minimum_participants Yes Transaction minimum participants","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_50","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_public_keys","text":"def set_public_keys ( self , public_keys ): Set the public keys of a Transaction.","title":"set_public_keys()"},{"location":"sdk/python/crypto/api-documentation/#parameters_37","text":"Type Name Required Description list public_keys Yes Transaction public keys participants","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_51","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#add_participant","text":"def add_participant ( self , public_key ): Add a participant with his public key to the Transaction.","title":"add_participant()"},{"location":"sdk/python/crypto/api-documentation/#parameters_38","text":"Type Name Required Description str public_key Yes Participant public key","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_52","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuildersecond_signature_registrationsecondsignatureregistration","text":"","title":"crypto.transactions.builder.second_signature_registration.SecondSignatureRegistration"},{"location":"sdk/python/crypto/api-documentation/#__init___10","text":"def __init__ ( self , second_passphrase , fee = None ): Create a new SecondSignatureRegistration transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_39","text":"Type Name Required Description str second_passphrase No Second passphrase int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_53","text":"<class 'solar_crypto.transactions.builder.second_signature_registration.SecondSignatureRegistration'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderlegacy_transferlegacytransfer","text":"","title":"crypto.transactions.builder.legacy_transfer.LegacyTransfer"},{"location":"sdk/python/crypto/api-documentation/#__init___11","text":"def __init__ ( self , recipientId , amount , memo = None , fee = None ): Create a new Legacy Transfer transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_40","text":"Type Name Required Description str recipientId Yes Recipient identifier int amount Yes Transaction amount str memo No Transaction memo int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_54","text":"<class 'solar_crypto.transactions.builder.legacy_transfer.LegacyTransfer'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuilderlegacy_votelegacyvote","text":"","title":"crypto.transactions.builder.legacy_vote.LegacyVote"},{"location":"sdk/python/crypto/api-documentation/#__init___12","text":"def __init__ ( self , vote = None , fee = None ): Create a new Legacy Vote transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_41","text":"Type Name Required Description str vote No Delegate address to vote for int fee No Transaction fee","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_55","text":"<class 'solar_crypto.transactions.builder.legacy_vote.LegacyVote'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_votes","text":"def set_votes ( self , votes : typing . List [ str ]): Set legacy votes/cancel vote","title":"set_votes()"},{"location":"sdk/python/crypto/api-documentation/#parameters_42","text":"Type Name Required Description List[str] votes Yes list of votes","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_56","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign_3","text":"def sign ( self , passphrase ): Sign the transaction using the given passphrase","title":"sign()"},{"location":"sdk/python/crypto/api-documentation/#parameters_43","text":"Type Name Required Description str passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_57","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsbuildervotevote","text":"","title":"crypto.transactions.builder.vote.Vote"},{"location":"sdk/python/crypto/api-documentation/#__init___13","text":"def __init__ ( self ): Create a new Vote transaction instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#return-value_58","text":"<class 'solar_crypto.transactions.builder.vote.Vote'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#set_votes_1","text":"def set_votes ( self , votes : typing . Union [ typing . List [ str ], typing . Dict [ str , typing . Union [ int , float , Decimal ]]] = dict ): Set votes","title":"set_votes()"},{"location":"sdk/python/crypto/api-documentation/#parameters_44","text":"Type Name Required Description votes votes Yes list of votes","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_59","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersbasebasedeserialiser","text":"","title":"crypto.transactions.deserialisers.base.BaseDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#__init___14","text":"def __init__ ( self , serialised , asset_offset , transaction ): Create a new deserialiser instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_45","text":"Type Name Required Description ??? serialised Yes Serialised ??? asset_offset Yes Offset ??? transaction Yes Transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_60","text":"<class 'solar_crypto.transactions.deserialisers.base.BaseDeserialiser'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#deserialise","text":"def deserialise ( self ): Handle the deserialisation of transaction data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_61","text":"NotImplementedError","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersburnburndeserialiser","text":"","title":"crypto.transactions.deserialisers.burn.BurnDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_1","text":"def deserialise ( self ): Handle the deserialisation of \"burn\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_62","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersdelegate_registrationdelegateregistrationdeserialiser","text":"","title":"crypto.transactions.deserialisers.delegate_registration.DelegateRegistrationDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_2","text":"def deserialise ( self ): Handle the deserialisation of \"delegate registration\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_63","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersdelegate_resignationdelegateresignationdeserialiser","text":"","title":"crypto.transactions.deserialisers.delegate_resignation.DelegateResignationDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_3","text":"def deserialise ( self ): Handle the deserialisation of \"delegate resignation\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_64","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisershtlc_claimhtlcclaimdeserialiser","text":"","title":"crypto.transactions.deserialisers.htlc_claim.HtlcClaimDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_4","text":"def deserialise ( self ): Handle the deserialisation of \"HTLC Claim\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_65","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisershtlc_lockhtlclockdeserialiser","text":"","title":"crypto.transactions.deserialisers.htlc_lock.HtlcLockDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_5","text":"def deserialise ( self ): Handle the deserialisation of \"HTLC Lock\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_66","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisershtlc_refundhtlcrefunddeserialiser","text":"","title":"crypto.transactions.deserialisers.htlc_refund.HtlcRefundDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_6","text":"def deserialise ( self ): Handle the deserialisation of \"HTLC refund\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_67","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersipfsipfsdeserialiser","text":"","title":"crypto.transactions.deserialisers.ipfs.IPFSDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_7","text":"def deserialise ( self ): Handle the deserialisation of \"IPFS\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_68","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialiserstransfertransferdeserialiser","text":"","title":"crypto.transactions.deserialisers.transfer.TransferDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_8","text":"def deserialise ( self ): Handle the deserialisation of \"transfer\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_69","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersmulti_signature_registrationmultisignatureregistrationdeserialiser","text":"","title":"crypto.transactions.deserialisers.multi_signature_registration.MultiSignatureRegistrationDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_9","text":"def deserialise ( self ): Handle the deserialisation of \"multi signature registration\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_70","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialiserssecond_signature_registrationsecondsignatureregistrationdeserialiser","text":"","title":"crypto.transactions.deserialisers.second_signature_registration.SecondSignatureRegistrationDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_10","text":"def deserialise ( self ): Handle the deserialisation of \"second signature\" data.","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_71","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialiserslegacy_transferlegacytransferdeserialiser","text":"","title":"crypto.transactions.deserialisers.legacy_transfer.LegacyTransferDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_11","text":"def deserialise ( self ): Handle the deserialisation of \"legacy transfer\" data","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_72","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialiserslegacy_votelegacyvotedeserialiser","text":"","title":"crypto.transactions.deserialisers.legacy_vote.LegacyVoteDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_12","text":"def deserialise ( self ): Handle the deserialisation of \"legacy vote\" data.","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_73","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialisersvotevotedeserialiser","text":"","title":"crypto.transactions.deserialisers.vote.VoteDeserialiser"},{"location":"sdk/python/crypto/api-documentation/#deserialise_13","text":"def deserialise ( self ): Handle the deserialisation of \"vote\" data.","title":"deserialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_74","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersbasebaseserialiser","text":"","title":"crypto.transactions.serialisers.base.BaseSerialiser"},{"location":"sdk/python/crypto/api-documentation/#__init___15","text":"def __init__ ( self , transaction , byte_data = bytes ()): Create a new serialiser instance","title":"__init__()"},{"location":"sdk/python/crypto/api-documentation/#parameters_46","text":"Type Name Required Description Transaction transaction Yes Transaction bytes byte_data No ...","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_75","text":"<class 'solar_crypto.transactions.serialisers.base.BaseSerialiser'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#serialise","text":"def serialise ( self ): Handle the serialisation of transaction data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_76","text":"NotImplementedError","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersburnburnserialiser","text":"","title":"crypto.transactions.serialisers.burn.BurnSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_1","text":"def serialise ( self ): Handle the serialisation of \"burn\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_77","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersdelegate_registrationdelegateregistrationserialiser","text":"","title":"crypto.transactions.serialisers.delegate_registration.DelegateRegistrationSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_2","text":"def serialise ( self ): Handle the serialisation of \"delegate registration\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_78","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersdelegate_resignationdelegateresignationserialiser","text":"","title":"crypto.transactions.serialisers.delegate_resignationDelegateResignationSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_3","text":"def serialise ( self ): Handle the serialisation of \"delegate resignation\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_79","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisershtlc_claimhtlcclaimserialiser","text":"","title":"crypto.transactions.serialisers.htlc_claim.HtlcClaimSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_4","text":"def serialise ( self ): Handle the serialisation of \"HTLC Claim\" data","title":"serialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_80","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisershtlc_lockhtlclockserialiser","text":"","title":"crypto.transactions.serialisers.htlc_lock.HtlcLockSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_5","text":"def serialise ( self ): Handle the serialisation of \"HTLC Lock\" data","title":"serialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_81","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisershtlc_refundhtlcrefundserialiser","text":"","title":"crypto.transactions.serialisers.htlc_refund.HtlcRefundSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_6","text":"def serialise ( self ): Handle the serialisation of \"HTLC Refund\" data","title":"serialise()"},{"location":"sdk/python/crypto/api-documentation/#return-value_82","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersipfsipfsserialiser","text":"","title":"crypto.transactions.serialisers.ipfs.IPFSSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_7","text":"def serialise ( self ): Handle the serialisation of \"ipfs\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_83","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialiserstransfertransferserialiser","text":"","title":"crypto.transactions.serialisers.transfer.TransferSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_8","text":"def serialise ( self ): Handle the serialisation of \"transfer\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_84","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersmulti_signature_registrationmultisignatureserialiser","text":"","title":"crypto.transactions.serialisers.multi_signature_registration.MultiSignatureSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_9","text":"def serialise ( self ): Handle the serialisation of \"multi signature\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_85","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialiserssecond_signature_registrationsecondsignatureregistrationserialiser","text":"","title":"crypto.transactions.serialisers.second_signature_registration.SecondSignatureRegistrationSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_10","text":"def serialise ( self ): Handle the serialisation of \"second signature\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_86","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialiserslegacy_transferlegacytransferserialiser","text":"","title":"crypto.transactions.serialisers.legacy_transfer.LegacyTransferSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_11","text":"def serialise ( self ): Handle the serialisation of \"legacy transfer\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_87","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialiserslegacy_votelegacyvoteserialiser","text":"","title":"crypto.transactions.serialisers.legacy_vote.LegacyVoteSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_12","text":"def serialise ( self ): Handle the serialisation of \"legacy vote\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_88","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialisersvotevoteserialiser","text":"","title":"crypto.transactions.serialisers.vote.VoteSerialiser"},{"location":"sdk/python/crypto/api-documentation/#serialise_13","text":"def serialise ( self ): Handle the serialisation of \"vote\" data","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_89","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsdeserialiserdeserialiser","text":"","title":"crypto.transactions.deserialiser.Deserialiser"},{"location":"sdk/python/crypto/api-documentation/#__init___16","text":"def __init__ ( self , serialised ): Create a new deserialiser instance","title":"__init__"},{"location":"sdk/python/crypto/api-documentation/#parameters_47","text":"Type Name Required Description str serialised Yes Serialised","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_90","text":"<class 'solar_crypto.transactions.deserialiser.Deserialiser'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#deserialise_14","text":"def deserialise ( self ): Perform deserialisation","title":"deserialise"},{"location":"sdk/python/crypto/api-documentation/#return-value_91","text":"<class 'solar_crypto.transactions.transaction.Transaction'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#_handle_transaction_type","text":"def _handle_transaction_type ( self , asset_offset , transaction ): Handle the deserialisation of transaction data","title":"_handle_transaction_type"},{"location":"sdk/python/crypto/api-documentation/#parameters_48","text":"Type Name Required Description int asset_offset Yes Offset transaction.Transaction transaction Yes Transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_92","text":"<class 'solar_crypto.transactions.transaction.Transaction'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionsserialiserserialiser","text":"","title":"crypto.transactions.serialiser.Serialiser"},{"location":"sdk/python/crypto/api-documentation/#__init___17","text":"def __init__ ( self , transaction ): Create a new serialiser instance","title":"__init__"},{"location":"sdk/python/crypto/api-documentation/#parameters_49","text":"Type Name Required Description transaction.Transaction transaction Yes Transaction","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_93","text":"<class 'solar_crypto.transactions.serialiser.Serialiser'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#serialise_14","text":"def serialise ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True , raw = False ): Perform serialisation","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#parameters_50","text":"Type Name Required Description bool skip_signature No Should we skip the serialisation of the signature bool skip_second_signature No Should we skip the serialisation of the second signature bool skip_multi_signature No Should we skip the serialisation of multiple signatures bool raw No Raw output","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_94","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#_handle_transaction_type_1","text":"def _handle_transaction_type ( self , bytes_data ): Handle the serialisation of transaction data","title":"_handle_transaction_type"},{"location":"sdk/python/crypto/api-documentation/#parameters_51","text":"Type Name Required Description bytes bytes_data Yes ...","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_95","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#_handle_signature","text":"def _handle_signature ( self , bytes_data , skip_signature , skip_second_signature , skip_multi_signature ): Handle the serialisation of \"signatures\" data","title":"_handle_signature"},{"location":"sdk/python/crypto/api-documentation/#parameters_52","text":"Type Name Required Description bytes bytes_data Yes ... bool skip_signature Yes Should we skip the serialisation of the signature bool skip_second_signature Yes Should we skip the serialisation of the second signature bool skip_multi_signature Yes Should we skip the serialisation of multiple signatures","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_96","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptotransactionstransactiontransaction","text":"","title":"crypto.transactions.transaction.Transaction"},{"location":"sdk/python/crypto/api-documentation/#__init___18","text":"def __init__ ( self , * args , ** kwargs ): Create a new transaction instance","title":"__init__"},{"location":"sdk/python/crypto/api-documentation/#parameters_53","text":"Type Name Required Description any *args No ... any **kwargs No ...","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_97","text":"<class 'solar_crypto.transactions.transaction.Transaction'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_id","text":"def get_id ( self ): Convert the byte representation to a unique identifier","title":"get_id"},{"location":"sdk/python/crypto/api-documentation/#return-value_98","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_dict_1","text":"def to_dict ( self ): Convert the transaction to its dictionary representation.","title":"to_dict"},{"location":"sdk/python/crypto/api-documentation/#return-value_99","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_json_1","text":"def to_json ( self ): Convert the transaction to its JSON representation","title":"to_json"},{"location":"sdk/python/crypto/api-documentation/#return-value_100","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_bytes","text":"def to_bytes ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True ): Convert the transaction to its byte representation","title":"to_bytes"},{"location":"sdk/python/crypto/api-documentation/#parameters_54","text":"Type Name Required Description bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_101","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#parse_signatures","text":"def parse_signatures ( self , serialised , start_offset ): Parse the signature, second signature and multi signatures","title":"parse_signatures"},{"location":"sdk/python/crypto/api-documentation/#parameters_55","text":"Type Name Required Description str serialised Yes Serialised int start_offset Yes Offset","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_102","text":"<class 'NoneType'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#serialise_15","text":"def serialise ( self , skip_signature = True , skip_second_signature = True , skip_multi_signature = True ): Perform serialisation","title":"serialise"},{"location":"sdk/python/crypto/api-documentation/#parameters_56","text":"Type Name Required Description bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_103","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#deserialise_15","text":"def deserialise ( self , serialised ): Perform deserialisation","title":"deserialise"},{"location":"sdk/python/crypto/api-documentation/#parameters_57","text":"Type Name Required Description str serialised Yes Serialised","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_104","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_1","text":"def verify ( self ): Verify the transaction. Method will raise an exception if invalid, if it's valid it will returns True","title":"verify"},{"location":"sdk/python/crypto/api-documentation/#return-value_105","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_secondsig","text":"def verify_secondsig ( self , secondPublicKey ): Verify the second signature. Method will raise an exception if invalid, if it's valid it will returns True","title":"verify_secondsig"},{"location":"sdk/python/crypto/api-documentation/#parameters_58","text":"Type Name Required Description str secondPublicKey Yes Second public key","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_106","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_signatures","text":"def verify_signatures ( self , multi_signature_asset ): Verify the multisignatures transaction. Method will raise an exception if invalid, it will returns True","title":"verify_signatures"},{"location":"sdk/python/crypto/api-documentation/#parameters_59","text":"Type Name Required Description dict multi_signature_asset Yes Multisignature asset","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_107","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#_handle_transaction_type_2","text":"def _handle_transaction_type ( self , bytes_data ): Handle each transaction type differently","title":"_handle_transaction_type"},{"location":"sdk/python/crypto/api-documentation/#parameters_60","text":"Type Name Required Description bytes bytes_data Yes Input the bytes data to which you want to append new bytes","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_108","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#_handle_signature_1","text":"def _handle_signature ( self , bytes_data , skip_signature , skip_second_signature , skip_multi_signature ): Handle the serialisation of \"signatures\" data","title":"_handle_signature"},{"location":"sdk/python/crypto/api-documentation/#parameters_61","text":"Type Name Required Description bytes bytes_data Yes Input the bytes data to which you want to append new bytes from signature bool skip_signature Yes Skip first signature bool skip_second_signature Yes Skip second signature bool skip_multi_signature Yes Skip multi signatures","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_109","text":"<class 'bytes'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoutilscrypto","text":"","title":"crypto.utils.crypto"},{"location":"sdk/python/crypto/api-documentation/#sign_schnorr","text":"def sign_schnorr ( msg : bytes , private_key : PrivateKey , nonce : int = None ) -> str : Signs a message using Schnorr BIP340 and returns a hex string of the signature","title":"sign_schnorr"},{"location":"sdk/python/crypto/api-documentation/#parameters_62","text":"Type Name Required Description bytes msg Yes Message to be signed PrivateKey private_key Yes Private key object int nonce No Deterministic nonce","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_110","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign_schnorr_legacy","text":"def sign_schnorr_legacy ( msg : bytes , private_key : PrivateKey ) -> str : Signs a message using Legacy Schnorr and returns a hex string of the signature","title":"sign_schnorr_legacy"},{"location":"sdk/python/crypto/api-documentation/#parameters_63","text":"Type Name Required Description bytes msg Yes Message to be signed PrivateKey private_key Yes Private key object int nonce No Deterministic nonce","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_111","text":"<class 'str'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_schnorr","text":"def verify_schnorr ( msg : bytes , public_key : str , signature : str ) -> bool : Verifies a message using Schnorr BIP340","title":"verify_schnorr"},{"location":"sdk/python/crypto/api-documentation/#parameters_64","text":"Type Name Required Description bytes msg Yes Message to be verified str public_key Yes Public key str signature Yes Signature","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_112","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_schnorr_legacy","text":"def verify_schnorr_legacy ( msg : bytes , public_key : str , signature : str ) -> bool : Verifies a message using Legacy Schnorr","title":"verify_schnorr_legacy"},{"location":"sdk/python/crypto/api-documentation/#parameters_65","text":"Type Name Required Description bytes msg Yes Message to be verified str public_key Yes Public key str signature Yes Signature","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_113","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoutilsmessagemessage","text":"","title":"crypto.utils.message.Message"},{"location":"sdk/python/crypto/api-documentation/#__init___19","text":"def __init__ ( self , ** kwargs ): Create a new message instance","title":"__init__"},{"location":"sdk/python/crypto/api-documentation/#parameters_66","text":"Type Name Required Description any **kwargs No ...","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_114","text":"<class 'solar_crypto.utils.message.Message'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#sign_4","text":"def sign ( cls , message , passphrase ): Sign a message using the given passphrase","title":"sign"},{"location":"sdk/python/crypto/api-documentation/#parameters_67","text":"Type Name Required Description str message Yes Message str passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/python/crypto/api-documentation/#return-value_115","text":"<class 'solar_crypto.utils.message.Message'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#verify_2","text":"def verify ( self ): Verify the message contents","title":"verify"},{"location":"sdk/python/crypto/api-documentation/#return-value_116","text":"<class 'bool'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_dict_2","text":"def to_dict ( self ): Convert the message to its dictionary representation","title":"to_dict"},{"location":"sdk/python/crypto/api-documentation/#return-value_117","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#to_json_2","text":"def to_json ( self ): Convert the message to its JSON representation","title":"to_json"},{"location":"sdk/python/crypto/api-documentation/#return-value_118","text":"<class 'dict'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#cryptoutilsslot","text":"","title":"crypto.utils.slot"},{"location":"sdk/python/crypto/api-documentation/#get_time","text":"def get_time (): Get the time diff between now and network start","title":"get_time"},{"location":"sdk/python/crypto/api-documentation/#return-value_119","text":"<class 'int'>","title":"Return value"},{"location":"sdk/python/crypto/api-documentation/#get_epoch","text":"def get_epoch (): Get the network start epoch","title":"get_epoch"},{"location":"sdk/python/crypto/api-documentation/#return-value_120","text":"<class 'datetime'>","title":"Return value"},{"location":"sdk/python/crypto/examples/","text":"Examples \u00b6 Initialisation \u00b6 from solar_crypto.transactions.builder.transfer import Transfer The transaction object used for this section: tx = { 'amount' : int , 'asset' : dict , 'fee' : int , 'id' : str , 'network' : int , 'recipientId' : str , 'secondSignature' : str , 'senderPublicKey' : str , 'signature' : str , 'signatures' : list , 'signSignature' : str , 'nonce' : int , 'type' : int , 'typeGroup' : int , 'memo' : str , 'version' : int , 'lockTransactionId' : str , 'lockSecret' : str , 'expiration' : int , } Transactions \u00b6 A transaction is an object specifying the transfer of funds from the sender's wallet to the recipient's. Each transaction must be signed by the sender's private key to prove authenticity and origin. After broadcasting through the client SDK , a transaction is permanently incorporated in the blockchain by a Delegate Node. Sign \u00b6 The crypto SDK can sign a transaction using your private key or passphrase (from which the private key is generated). Ensure you are familiar with digital signatures before using the crypto SDKs. For serialising and deserialising, we must require the Transaction model: from solar_crypto.transactions.transaction import Transaction # Serialising transaction = Transaction ( ** tx ) transaction . serialise () # Deserialising transaction = Transaction () transaction . deserialise ( ** tx [ 'serialised' ]) Using the Transaction builder class. transaction = Transfer ( recipientId = str , amount = int ) transaction . sign ( 'seedPass' ) Serialise \u00b6 Serialisation of a transaction object ensures it is compact and properly formatted to be incorporated in the SXP blockchain. If you are using the crypto SDK in combination with the public API SDK, you should not need to serialise manually. from solar_crypto.transactions.serialiser import Serialiser serialised_transaction = Serialiser ( tx ) . serialise () >>> < class ' str '> Deserialise \u00b6 A serialised transaction may be deserialised for inspection purposes. The public API does not return serialised transactions, so you should only need to deserialise in exceptional circumstances. from solar_crypto.transactions.deserialiser import Deserialiser transaction_data = Deserialiser ( serialised_data ) . deserialise () >>> < class ' solar_crypto . transactions . transaction . Transaction '> Message \u00b6 The crypto SDK not only supports transactions but can also work with other arbitrary data (expressed as strings). Sign \u00b6 Signing a string works much like signing a transaction: in most implementations, the message is hashed, and the resulting hash is signed using the private key or passphrase . from solar_crypto.utils.message import Message message = Message . sign ( string , 'validSeedPass' ) >>> < class ' solar_crypto . utils . message . Message '> Verify \u00b6 A message's signature can easily be verified by hash, without the private key that signed the message, by using the verify method. from solar_crypto.utils.message import Message message = Message ( message = str , signature = str , publicKey = str ) message . verify () >>> < class ' bool '> Identities \u00b6 The identities class allows for the creation and inspection of keyPairs from passphrases . Here you find vital functions when creating transactions and managing wallets. Derive the address from a passphrase \u00b6 from solar_crypto.identity.address import address_from_passphrase address_from_passphrase ( 'validSeedPass' ) >>> < class ' str '> Derive the address from a public key \u00b6 from solar_crypto.identity.address import address_from_public_key address_from_public_key ( 'validPublicKey' ) >>> < class ' str '> Derive the address from a private key \u00b6 from solar_crypto.identity.address import address_from_private_key address_from_private_key ( 'validPrivateKey' ) >>> < class ' str '> Validate an address \u00b6 from solar_crypto.identity.address import validate_address validate_address ( 'validAddress' ) >>> < class ' bool '> Private Key \u00b6 As the name implies, private keys and passphrases are to remain private. Never store these unencrypted and minimise access to these secrets Derive the private key from a passphrase \u00b6 from solar_crypto.identity.private_key import PrivateKey private_key = PrivateKey . from_passphrase ( 'validSeedPass' ) . to_hex () >>> < class ' str '> Derive the private key instance object from a hexadecimal encoded string \u00b6 from solar_crypto.identity.private_key import PrivateKey private_key = PrivateKey . from_hex ( str ) >>> < class ' solar_crypto . identity . private_key . PrivateKey '> Derive the private key from a wif \u00b6 This function has not been implemented in this client library . Public Key \u00b6 Public Keys may be freely shared, and are included in transaction objects to validate the authenticity. Derive the public key from a passphrase \u00b6 from solar_crypto.identity.public_key import PublicKey public_key = PublicKey . from_passphrase ( 'this is a top secret passphrase' ) >>> < class ' str '> Derive the public key instance object from a hexadecimal encoded string \u00b6 from solar_crypto.identity.public_key import PublicKey public_key = PublicKey . from_hex ( str ) >>> < class ' solar_crypto . identity . public_key . PublicKey '> Validate a public key \u00b6 This function has not been implemented in this client library . WIF \u00b6 The WIF should remain secret, just like your passphrase and private key . Derive the wif from a passphrase \u00b6 from solar_crypto.identity.wif import wif_from_passphrase wif = wif_from_passphrase ( 'validSeedPass' ) >>> < class ' str '>","title":"Examples"},{"location":"sdk/python/crypto/examples/#examples","text":"","title":"Examples"},{"location":"sdk/python/crypto/examples/#initialisation","text":"from solar_crypto.transactions.builder.transfer import Transfer The transaction object used for this section: tx = { 'amount' : int , 'asset' : dict , 'fee' : int , 'id' : str , 'network' : int , 'recipientId' : str , 'secondSignature' : str , 'senderPublicKey' : str , 'signature' : str , 'signatures' : list , 'signSignature' : str , 'nonce' : int , 'type' : int , 'typeGroup' : int , 'memo' : str , 'version' : int , 'lockTransactionId' : str , 'lockSecret' : str , 'expiration' : int , }","title":"Initialisation"},{"location":"sdk/python/crypto/examples/#transactions","text":"A transaction is an object specifying the transfer of funds from the sender's wallet to the recipient's. Each transaction must be signed by the sender's private key to prove authenticity and origin. After broadcasting through the client SDK , a transaction is permanently incorporated in the blockchain by a Delegate Node.","title":"Transactions"},{"location":"sdk/python/crypto/examples/#sign","text":"The crypto SDK can sign a transaction using your private key or passphrase (from which the private key is generated). Ensure you are familiar with digital signatures before using the crypto SDKs. For serialising and deserialising, we must require the Transaction model: from solar_crypto.transactions.transaction import Transaction # Serialising transaction = Transaction ( ** tx ) transaction . serialise () # Deserialising transaction = Transaction () transaction . deserialise ( ** tx [ 'serialised' ]) Using the Transaction builder class. transaction = Transfer ( recipientId = str , amount = int ) transaction . sign ( 'seedPass' )","title":"Sign"},{"location":"sdk/python/crypto/examples/#serialise","text":"Serialisation of a transaction object ensures it is compact and properly formatted to be incorporated in the SXP blockchain. If you are using the crypto SDK in combination with the public API SDK, you should not need to serialise manually. from solar_crypto.transactions.serialiser import Serialiser serialised_transaction = Serialiser ( tx ) . serialise () >>> < class ' str '>","title":"Serialise"},{"location":"sdk/python/crypto/examples/#deserialise","text":"A serialised transaction may be deserialised for inspection purposes. The public API does not return serialised transactions, so you should only need to deserialise in exceptional circumstances. from solar_crypto.transactions.deserialiser import Deserialiser transaction_data = Deserialiser ( serialised_data ) . deserialise () >>> < class ' solar_crypto . transactions . transaction . Transaction '>","title":"Deserialise"},{"location":"sdk/python/crypto/examples/#message","text":"The crypto SDK not only supports transactions but can also work with other arbitrary data (expressed as strings).","title":"Message"},{"location":"sdk/python/crypto/examples/#sign_1","text":"Signing a string works much like signing a transaction: in most implementations, the message is hashed, and the resulting hash is signed using the private key or passphrase . from solar_crypto.utils.message import Message message = Message . sign ( string , 'validSeedPass' ) >>> < class ' solar_crypto . utils . message . Message '>","title":"Sign"},{"location":"sdk/python/crypto/examples/#verify","text":"A message's signature can easily be verified by hash, without the private key that signed the message, by using the verify method. from solar_crypto.utils.message import Message message = Message ( message = str , signature = str , publicKey = str ) message . verify () >>> < class ' bool '>","title":"Verify"},{"location":"sdk/python/crypto/examples/#identities","text":"The identities class allows for the creation and inspection of keyPairs from passphrases . Here you find vital functions when creating transactions and managing wallets.","title":"Identities"},{"location":"sdk/python/crypto/examples/#derive-the-address-from-a-passphrase","text":"from solar_crypto.identity.address import address_from_passphrase address_from_passphrase ( 'validSeedPass' ) >>> < class ' str '>","title":"Derive the address from a passphrase"},{"location":"sdk/python/crypto/examples/#derive-the-address-from-a-public-key","text":"from solar_crypto.identity.address import address_from_public_key address_from_public_key ( 'validPublicKey' ) >>> < class ' str '>","title":"Derive the address from a public key"},{"location":"sdk/python/crypto/examples/#derive-the-address-from-a-private-key","text":"from solar_crypto.identity.address import address_from_private_key address_from_private_key ( 'validPrivateKey' ) >>> < class ' str '>","title":"Derive the address from a private key"},{"location":"sdk/python/crypto/examples/#validate-an-address","text":"from solar_crypto.identity.address import validate_address validate_address ( 'validAddress' ) >>> < class ' bool '>","title":"Validate an address"},{"location":"sdk/python/crypto/examples/#private-key","text":"As the name implies, private keys and passphrases are to remain private. Never store these unencrypted and minimise access to these secrets","title":"Private Key"},{"location":"sdk/python/crypto/examples/#derive-the-private-key-from-a-passphrase","text":"from solar_crypto.identity.private_key import PrivateKey private_key = PrivateKey . from_passphrase ( 'validSeedPass' ) . to_hex () >>> < class ' str '>","title":"Derive the private key from a passphrase"},{"location":"sdk/python/crypto/examples/#derive-the-private-key-instance-object-from-a-hexadecimal-encoded-string","text":"from solar_crypto.identity.private_key import PrivateKey private_key = PrivateKey . from_hex ( str ) >>> < class ' solar_crypto . identity . private_key . PrivateKey '>","title":"Derive the private key instance object from a hexadecimal encoded string"},{"location":"sdk/python/crypto/examples/#derive-the-private-key-from-a-wif","text":"This function has not been implemented in this client library .","title":"Derive the private key from a wif"},{"location":"sdk/python/crypto/examples/#public-key","text":"Public Keys may be freely shared, and are included in transaction objects to validate the authenticity.","title":"Public Key"},{"location":"sdk/python/crypto/examples/#derive-the-public-key-from-a-passphrase","text":"from solar_crypto.identity.public_key import PublicKey public_key = PublicKey . from_passphrase ( 'this is a top secret passphrase' ) >>> < class ' str '>","title":"Derive the public key from a passphrase"},{"location":"sdk/python/crypto/examples/#derive-the-public-key-instance-object-from-a-hexadecimal-encoded-string","text":"from solar_crypto.identity.public_key import PublicKey public_key = PublicKey . from_hex ( str ) >>> < class ' solar_crypto . identity . public_key . PublicKey '>","title":"Derive the public key instance object from a hexadecimal encoded string"},{"location":"sdk/python/crypto/examples/#validate-a-public-key","text":"This function has not been implemented in this client library .","title":"Validate a public key"},{"location":"sdk/python/crypto/examples/#wif","text":"The WIF should remain secret, just like your passphrase and private key .","title":"WIF"},{"location":"sdk/python/crypto/examples/#derive-the-wif-from-a-passphrase","text":"from solar_crypto.identity.wif import wif_from_passphrase wif = wif_from_passphrase ( 'validSeedPass' ) >>> < class ' str '>","title":"Derive the wif from a passphrase"},{"location":"sdk/python/crypto/intro/","text":"Crypto \u00b6 Development \u00b6 Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-crypto Next, move into the cloned directory. cd python-crypto The next step would be to create something like a virtual environment and install the dependencies of this package inside it. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install dependencies. python -m pip install -e . \"[dev]\" Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Getting Started"},{"location":"sdk/python/crypto/intro/#crypto","text":"","title":"Crypto"},{"location":"sdk/python/crypto/intro/#development","text":"Fork the package . Clone your forked repository. git clone https://github.com/<githubusername>/python-crypto Next, move into the cloned directory. cd python-crypto The next step would be to create something like a virtual environment and install the dependencies of this package inside it. Create and enter the virtual environment # With virtualenv (on Unix and OSx) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName source venv/bin/activate # With virtualenv (on Windows) mkdir my-amazing-solar-project cd my-amazing-solar-project virtualenv virtualEnvName . \\v env \\S cripts \\a ctivate.bat Once inside the virtualenv, you can proceed to install dependencies. python -m pip install -e . \"[dev]\" Dependencies are now installed, you can now run the tests to see if everything is running as it should. pytest","title":"Development"},{"location":"sdk/typescript/complementary-examples/","text":"Complementary Examples \u00b6 Prerequisites \u00b6 Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Crypto SDK and Client SDK . You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue. pnpm \u00b6 pnpm add @solar-network/crypto pnpm add @solar-network/client npm \u00b6 npm install @solar-network/crypto npm install @solar-network/client yarn \u00b6 yarn add @solar-network/crypto yarn add @solar-network/client Now that we're setup and ready to go we'll look into some examples for the most common tasks you'll encounter when wanting to interact with the SXP Blockchain. Persisting your transaction on the blockchain \u00b6 The process of getting your transaction verified and persisted on the SXP Blockchain involves a few steps with which our SDKs will help you but lets break them down to get a better idea of what is happening. Install the Client SDK and configure it to use a node of your choosing to broadcast your transactions to. Always make sure that you have a fallback node that you can use for broadcasting in case your primary node goes offline or acts strange otherwise. Install the Crypto SDK and configure it to match the configuration of the network. This is the most important part as misconfiguration can lead to a myriad of issues as Core will reject your transactions. Retrieve the nonce of the sender wallet and increase it by 1. You can read about what a sequential nonce is and why it is important here . Create an instance of the builder for the type of transaction you want to create. This is the step where we actually create a transaction and sign it so that the SXP Blockchain can later on verify it and decide if it will be accepted and finally forged. Turn the newly created transaction into JSON and broadcast it to the network through the Client SDK. Process the API response and verify that your transaction was accepted. If the network rejects your transaction you'll receive the reason as to why that is the case in the response which might mean that you need to create a new transaction and broadcast it. Troubleshooting \u00b6 A common issue when trying to get your transaction onto the blockchain is that you'll receive an error to the effect of Transaction Version 2 is not supported which indicates that your Crypto SDK configuration might be wrong. The solution to this is to make sure that your Crypto SDK instance is properly configured. This includes both the network preset and the height it's configured to assume the network has passed, if any of those don't match up you'll encounter the aforementioned issue with the version of your transactions. Mainnet \u00b6 Managers . configManager . setFromPreset ( \"mainnet\" ); Managers . configManager . setHeight ( \" 11800000 ); Testnet \u00b6 Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 8500000 ); Info You may also configure the block height using Solar's REST API as shown in the following sections. Creating and broadcasting a transfer transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . memo ( \"This is an example memo\" ) // memo is optional . addPayment ( \"Address of Recipient Wallet 1\" , \"100000000\" ) // 1 tSXP . addPayment ( \"Address of Recipient Wallet 2\" , \"200000000\" ) // 2 tSXP . addPayment ( \"Address of Recipient Wallet 3\" , \"300000000\" ) // 3 tSXP . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info The memo is optional and limited to a length of 255 characters. It can be a good idea to add a memo to your transactions if you want to be able to easily track or identify them in the future or include a personal message to the transaction's recipient(s). Creating and broadcasting a second signature transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . secondSignature () . nonce ( senderNonce . toFixed ()) . signatureAsset ( \"this is a top secret second passphrase\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Creating and broadcasting a delegate registration transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . delegateRegistration () . nonce ( senderNonce . toFixed ()) . usernameAsset ( \"johndoe\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Creating and broadcasting a vote transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . vote () . nonce ( senderNonce . toFixed ()) . votesAsset ({ delegate1 : 40 , delegate2 : 60 }) // The sum has to be 100 . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info Note the numbers in the object that is passed on the votesAsset function represent the percentage of the wallet balance you want to vote towards the related delegate. This implies that the sum of all of them must be 100 or the object has to be empty to cancel an existing vote. Creating and broadcasting an IPFS transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . ipfs () . nonce ( senderNonce . toFixed ()) . ipfsAsset ( \"QmR45FmbVVrixReBwJkhEKde2qwHYaQzGxu4ZoDeswuF9w\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Creating and broadcasting a delegate resignation transaction \u00b6 import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . delegateResignation () . resignationTypeAsset ( 0 ) . nonce ( senderNonce . toFixed ()) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); A delegate resignation must be sent from the corresponding delegate's wallet in order to verify their identity. Resignation can be of 2 types: 0 - meaning the resignation is only temporary and can be undone 1 - meaning the resignation is permanent","title":"Complementary Examples"},{"location":"sdk/typescript/complementary-examples/#complementary-examples","text":"","title":"Complementary Examples"},{"location":"sdk/typescript/complementary-examples/#prerequisites","text":"Before we get started we need to make sure that all of the required dependencies are installed. These dependencies are the Crypto SDK and Client SDK . You can head on over to their documentations to read more about them but for now we are only concerned with installing them to get up and running. Open your project and execute the following commands to install both SDKs. Make sure that those complete without any errors. If you encounter any errors, please open an issue with as much information as you can provide so that our developers can have a look and get to the bottom of the issue.","title":"Prerequisites"},{"location":"sdk/typescript/complementary-examples/#pnpm","text":"pnpm add @solar-network/crypto pnpm add @solar-network/client","title":"pnpm"},{"location":"sdk/typescript/complementary-examples/#npm","text":"npm install @solar-network/crypto npm install @solar-network/client","title":"npm"},{"location":"sdk/typescript/complementary-examples/#yarn","text":"yarn add @solar-network/crypto yarn add @solar-network/client Now that we're setup and ready to go we'll look into some examples for the most common tasks you'll encounter when wanting to interact with the SXP Blockchain.","title":"yarn"},{"location":"sdk/typescript/complementary-examples/#persisting-your-transaction-on-the-blockchain","text":"The process of getting your transaction verified and persisted on the SXP Blockchain involves a few steps with which our SDKs will help you but lets break them down to get a better idea of what is happening. Install the Client SDK and configure it to use a node of your choosing to broadcast your transactions to. Always make sure that you have a fallback node that you can use for broadcasting in case your primary node goes offline or acts strange otherwise. Install the Crypto SDK and configure it to match the configuration of the network. This is the most important part as misconfiguration can lead to a myriad of issues as Core will reject your transactions. Retrieve the nonce of the sender wallet and increase it by 1. You can read about what a sequential nonce is and why it is important here . Create an instance of the builder for the type of transaction you want to create. This is the step where we actually create a transaction and sign it so that the SXP Blockchain can later on verify it and decide if it will be accepted and finally forged. Turn the newly created transaction into JSON and broadcast it to the network through the Client SDK. Process the API response and verify that your transaction was accepted. If the network rejects your transaction you'll receive the reason as to why that is the case in the response which might mean that you need to create a new transaction and broadcast it.","title":"Persisting your transaction on the blockchain"},{"location":"sdk/typescript/complementary-examples/#troubleshooting","text":"A common issue when trying to get your transaction onto the blockchain is that you'll receive an error to the effect of Transaction Version 2 is not supported which indicates that your Crypto SDK configuration might be wrong. The solution to this is to make sure that your Crypto SDK instance is properly configured. This includes both the network preset and the height it's configured to assume the network has passed, if any of those don't match up you'll encounter the aforementioned issue with the version of your transactions.","title":"Troubleshooting"},{"location":"sdk/typescript/complementary-examples/#mainnet","text":"Managers . configManager . setFromPreset ( \"mainnet\" ); Managers . configManager . setHeight ( \" 11800000 );","title":"Mainnet"},{"location":"sdk/typescript/complementary-examples/#testnet","text":"Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( 8500000 ); Info You may also configure the block height using Solar's REST API as shown in the following sections.","title":"Testnet"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-a-transfer-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . memo ( \"This is an example memo\" ) // memo is optional . addPayment ( \"Address of Recipient Wallet 1\" , \"100000000\" ) // 1 tSXP . addPayment ( \"Address of Recipient Wallet 2\" , \"200000000\" ) // 2 tSXP . addPayment ( \"Address of Recipient Wallet 3\" , \"300000000\" ) // 3 tSXP . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info The memo is optional and limited to a length of 255 characters. It can be a good idea to add a memo to your transactions if you want to be able to easily track or identify them in the future or include a personal message to the transaction's recipient(s).","title":"Creating and broadcasting a transfer transaction"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-a-second-signature-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . secondSignature () . nonce ( senderNonce . toFixed ()) . signatureAsset ( \"this is a top secret second passphrase\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })();","title":"Creating and broadcasting a second signature transaction"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-a-delegate-registration-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . delegateRegistration () . nonce ( senderNonce . toFixed ()) . usernameAsset ( \"johndoe\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })();","title":"Creating and broadcasting a delegate registration transaction"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-a-vote-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . vote () . nonce ( senderNonce . toFixed ()) . votesAsset ({ delegate1 : 40 , delegate2 : 60 }) // The sum has to be 100 . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); Info Note the numbers in the object that is passed on the votesAsset function represent the percentage of the wallet balance you want to vote towards the related delegate. This implies that the sum of all of them must be 100 or the object has to be empty to cancel an existing vote.","title":"Creating and broadcasting a vote transaction"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-an-ipfs-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . ipfs () . nonce ( senderNonce . toFixed ()) . ipfsAsset ( \"QmR45FmbVVrixReBwJkhEKde2qwHYaQzGxu4ZoDeswuF9w\" ) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })();","title":"Creating and broadcasting an IPFS transaction"},{"location":"sdk/typescript/complementary-examples/#creating-and-broadcasting-a-delegate-resignation-transaction","text":"import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; import { Connection } from \"@solar-network/client\" ; // Configure our API client const client = new Connection ( \"https://tapi.solar.org/api\" ); ( async () => { // Get current height const height = ( await client . api ( \"blockchain\" ). blockchain ()). body . data . block . height ; // Set the chain's presets and height Managers . configManager . setFromPreset ( \"testnet\" ); Managers . configManager . setHeight ( height ); // Step 1: Retrieve the incremental nonce of the sender wallet const senderWallet = await client . api ( \"wallets\" ). get ( \"YOUR_SENDER_WALLET_ADDRESS\" ); const senderNonce = Utils . BigNumber . make ( senderWallet . body . data . nonce ). plus ( 1 ); // Step 2: Create the transaction const transaction = Transactions . BuilderFactory . delegateResignation () . resignationTypeAsset ( 0 ) . nonce ( senderNonce . toFixed ()) . sign ( \"this is a top secret passphrase\" ); // Step 4: Broadcast the transaction const broadcastResponse = await client . api ( \"transactions\" ). create ({ transactions : [ transaction . build (). toJson ()] }); // Step 5: Log the response console . log ( JSON . stringify ( broadcastResponse . body . data , null , 4 )) })(); A delegate resignation must be sent from the corresponding delegate's wallet in order to verify their identity. Resignation can be of 2 types: 0 - meaning the resignation is only temporary and can be undone 1 - meaning the resignation is permanent","title":"Creating and broadcasting a delegate resignation transaction"},{"location":"sdk/typescript/installation/","text":"Installation \u00b6 NodeJS installation \u00b6 NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM . Install a package manager \u00b6 Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation","title":"Installation"},{"location":"sdk/typescript/installation/#installation","text":"","title":"Installation"},{"location":"sdk/typescript/installation/#nodejs-installation","text":"NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM .","title":"NodeJS installation"},{"location":"sdk/typescript/installation/#install-a-package-manager","text":"Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation","title":"Install a package manager"},{"location":"sdk/typescript/client/api-documentation/","text":"API Documentation \u00b6 ConnectionManager \u00b6 connect() \u00b6 public connect ( host : string , name = \"main\" ) Connect to the given connection. Parameters \u00b6 Type Name Required Description string host Yes Node URL string name No Network name Return value \u00b6 Connection disconnect() \u00b6 public disconnect ( name? : string ) Disconnect from the given connection. Parameters \u00b6 Type Name Required Description string name No Network Name Return value \u00b6 void connection() \u00b6 public connection ( name? : string ) Get a connection instance. Parameters \u00b6 Type Name Required Description string name No Network Name Return value \u00b6 Connection getDefaultConnection() \u00b6 public getDefaultConnection () Get the default connection name. Return value \u00b6 string setDefaultConnection() \u00b6 public setDefaultConnection ( name : string ) Set the default connection name. Parameters \u00b6 Type Name Required Description string name No Network Name Return value \u00b6 void getConnections() \u00b6 public getConnections () Return all of the created connections. Return value \u00b6 Record<string, Connection> Connection \u00b6 constructor() \u00b6 public constructor ( private readonly host : string ) Create a new Connection class instance. Parameters \u00b6 Type Name Required Description string host Yes Node URL api() \u00b6 public api < T = any > ( name : string ) Instantiate new Api. Parameters \u00b6 Type Name Required Description string name Yes Network name Return value \u00b6 T Type Name Required Description string host Yes Node URL withOptions() \u00b6 public withOptions ( opts : Record < string , any > ) Apply options to future connection requests. Parameters \u00b6 Type Name Required Description string opts Yes Connection options Return value \u00b6 this get() \u00b6 public async get < T = any > ( url : string , opts? : Record < string , any > ) Send a GET request with query parameters. Parameters \u00b6 Type Name Required Description string url Yes Endpoint Record opts? No Query parameters Return value \u00b6 Promise<IResponse<T>> post() \u00b6 public async post < T = any > ( url : string , opts? : Record < string , any > ) : Promise < IResponse < T >> Send a POST request with JSON-encoded parameters. Parameters \u00b6 Type Name Required Description string url Yes Endpoint Record opts? No Query parameters Return value \u00b6 Promise<IResponse<T>> RequestError \u00b6 constructor() \u00b6 public constructor ( error ) Create a new RequestError class instance. Parameters \u00b6 Type Name Required Description string error Yes Error Resources\\Blockchain \u00b6 blockchain() \u00b6 public async blockchain < T = any > ( query? : Record < string , any > ) Get all blockchains. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> search() \u00b6 public async search < T = any > ( payload? : Record < string , any > ) Filter all blockchains by the given parameters. Parameters \u00b6 Type Name Required Description Record payload No Search parameters Return value \u00b6 Promise<IResponse<T>> Resources\\Blocks \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all blocks. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> first() \u00b6 public async first < T = any > ( query? : Record < string , any > ) Get the first block. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> last() \u00b6 public async last < T = any > ( query? : Record < string , any > ) Get the last (most recent) block. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a block by the given id. Parameters \u00b6 Type Name Required Description string id Yes Block ID Return value \u00b6 Promise<IResponse<T>> transactions() \u00b6 public async transactions < T = any > ( id : string , query? : Record < string , any > ) Get all transactions by the given block. Parameters \u00b6 Type Name Required Description string id Yes Block ID Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> missed() \u00b6 public async missed < T = any > ( payload? : Record < string , any > ) Shows all the missed blocks by all delegates in the last 30 days Parameters \u00b6 Type Name Required Description Record payload No Search parameters Return value \u00b6 Promise<IResponse<T>> Resources\\Locks \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all locks. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a lock by the given id. Parameters \u00b6 Type Name Required Description string id Yes Bridgechain identifier Return value \u00b6 Promise<IResponse<T>> unlocked() \u00b6 public async unlocked < T = any > ( payload? : Record < string , any > ) Search for unlocked locks. Parameters \u00b6 Type Name Required Description Record payload No Search parameters Return value \u00b6 Promise<IResponse<T>> Resources\\Delegates \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all accounts. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a delegate by the given id. Parameters \u00b6 Type Name Required Description string id Yes Delegate identifier Return value \u00b6 Promise<IResponse<T>> blocks() \u00b6 public async blocks < T = any > ( id : string , query? : Record < string , any > ) Get all blocks for the given delegate. Parameters \u00b6 Type Name Required Description string id Yes Delegate identifier Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> missed() \u00b6 public async missed < T = any > ( id : string , query? : Record < string , any > ) List Recent Missed Blocks of a Delegate Parameters \u00b6 Type Name Required Description string id Yes Delegate identifier Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> voters() \u00b6 public async voters < T = any > ( id : string , query? : Record < string , any > ) Get all voters for the given delegate. Parameters \u00b6 Type Name Required Description string id Yes Delegate identifier Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> Resources\\Node \u00b6 configuration() \u00b6 public async configuration < T = any > () Get the node configuration. Return value \u00b6 Promise<IResponse<T>> status() \u00b6 public async status < T = any > () Get the node status. Return value \u00b6 Promise<IResponse<T>> syncing() \u00b6 public async syncing < T = any > () Get the node syncing status. Return value \u00b6 Promise<IResponse<T>> crypto() \u00b6 public async crypto < T = any > () Get the node crypto configuration. Return value \u00b6 Promise<IResponse<T>> fees() \u00b6 public async fees < T = any > ( days : number ) Get the node fee statistics. Parameters \u00b6 Type Name Required Description number days Yes Days Return value \u00b6 Promise<IResponse<T>> Resources\\Peers \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all peers. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( ip : string ) Get a peer by the given IP address. Parameters \u00b6 Type Name Required Description string ip Yes IP address Return value \u00b6 Promise<IResponse<T>> Resources\\Rounds \u00b6 delegates() \u00b6 public async delegates < T = any > ( id : number ) Get delegates for a round. Parameters \u00b6 Type Name Required Description number id yes Round number Return value \u00b6 Promise<IResponse<T>> Resources\\Transactions \u00b6 create() \u00b6 public async create < T = any > ( payload : object []) Create a new transaction. Parameters \u00b6 Type Name Required Description object[] payload Yes Transaction(s) to broadcast Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a transaction by the given id. Parameters \u00b6 Type Name Required Description string id Yes Transaction ID Return value \u00b6 Promise<IResponse<T>> all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all transactions. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> allUnconfirmed() \u00b6 public async allUnconfirmed < T = any > ( query? : Record < string , any > ) Get all unconfirmed transactions. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> getUnconfirmed() \u00b6 public async getUnconfirmed < T = any > ( id : string ) Get an unconfirmed transaction by the given id. Parameters \u00b6 Type Name Required Description string id Yes Transaction ID Return value \u00b6 Promise<IResponse<T>> schemas() \u00b6 public async search < T = any > ( payload : Record < string , any > ) Get a list of transaction schemas. Parameters \u00b6 Type Name Required Description Record payload Yes Search parameters Return value \u00b6 Promise<IResponse<T>> types() \u00b6 public async types < T = any > () Get a list of valid transaction types. Return value \u00b6 Promise<IResponse<T>> fees() \u00b6 public async fees < T = any > () : Promise < IResponse < T >> Get the node fee statistics. Return value \u00b6 Promise<IResponse<T>> Resources\\Votes \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all votes. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a vote by the given id. Parameters \u00b6 Type Name Required Description string id Yes Vote ID Return value \u00b6 Promise<IResponse<T>> Resources\\Wallets \u00b6 all() \u00b6 public async all < T = any > ( query? : Record < string , any > ) Get all wallets. Parameters \u00b6 Type Name Required Description Record query No Query parameters Return value \u00b6 Promise<IResponse<T>> get() \u00b6 public async get < T = any > ( id : string ) Get a wallet by the given id. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Return value \u00b6 Promise<IResponse<T>> locks() \u00b6 public async locks < T = any > ( id : string , query? : Record < string , any > ) Get a wallet by the given id. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Record query No Search parameters Return value \u00b6 Promise<IResponse<T>> transactions() \u00b6 public async transactions < T = any > ( id : string , query? : Record < string , any > ) Get all transactions for the given wallet. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters Return value \u00b6 Promise<IResponse<T>> transactionsReceived() \u00b6 public async transactionsReceived < T = any > ( id : string , query? : Record < string , any > ) Get all transactions received by the given wallet. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters Return value \u00b6 Promise<IResponse<T>> transactionsSent() \u00b6 public async transactionsSent < T = any > ( id : string , query? : Record < string , any > ) Get all transactions sent by the given wallet. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters Return value \u00b6 Promise<IResponse<T>> votes() \u00b6 public async votes < T = any > ( id : string ) Get all votes by the given wallet. Parameters \u00b6 Type Name Required Description string id Yes Wallet identifier Return value \u00b6 Promise<IResponse<T>> top() \u00b6 public async top < T = any > ( query? : Record < string , any > ) Get all wallets sorted by balance in descending order. Parameters \u00b6 Type Name Required Description Record query Yes Query parameters Return value \u00b6 Promise<IResponse<T>>","title":"API Documentation"},{"location":"sdk/typescript/client/api-documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"sdk/typescript/client/api-documentation/#connectionmanager","text":"","title":"ConnectionManager"},{"location":"sdk/typescript/client/api-documentation/#connect","text":"public connect ( host : string , name = \"main\" ) Connect to the given connection.","title":"connect()"},{"location":"sdk/typescript/client/api-documentation/#parameters","text":"Type Name Required Description string host Yes Node URL string name No Network name","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value","text":"Connection","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#disconnect","text":"public disconnect ( name? : string ) Disconnect from the given connection.","title":"disconnect()"},{"location":"sdk/typescript/client/api-documentation/#parameters_1","text":"Type Name Required Description string name No Network Name","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_1","text":"void","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#connection","text":"public connection ( name? : string ) Get a connection instance.","title":"connection()"},{"location":"sdk/typescript/client/api-documentation/#parameters_2","text":"Type Name Required Description string name No Network Name","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_2","text":"Connection","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#getdefaultconnection","text":"public getDefaultConnection () Get the default connection name.","title":"getDefaultConnection()"},{"location":"sdk/typescript/client/api-documentation/#return-value_3","text":"string","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#setdefaultconnection","text":"public setDefaultConnection ( name : string ) Set the default connection name.","title":"setDefaultConnection()"},{"location":"sdk/typescript/client/api-documentation/#parameters_3","text":"Type Name Required Description string name No Network Name","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_4","text":"void","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#getconnections","text":"public getConnections () Return all of the created connections.","title":"getConnections()"},{"location":"sdk/typescript/client/api-documentation/#return-value_5","text":"Record<string, Connection>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#connection_1","text":"","title":"Connection"},{"location":"sdk/typescript/client/api-documentation/#constructor","text":"public constructor ( private readonly host : string ) Create a new Connection class instance.","title":"constructor()"},{"location":"sdk/typescript/client/api-documentation/#parameters_4","text":"Type Name Required Description string host Yes Node URL","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#api","text":"public api < T = any > ( name : string ) Instantiate new Api.","title":"api()"},{"location":"sdk/typescript/client/api-documentation/#parameters_5","text":"Type Name Required Description string name Yes Network name","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_6","text":"T Type Name Required Description string host Yes Node URL","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#withoptions","text":"public withOptions ( opts : Record < string , any > ) Apply options to future connection requests.","title":"withOptions()"},{"location":"sdk/typescript/client/api-documentation/#parameters_6","text":"Type Name Required Description string opts Yes Connection options","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_7","text":"this","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get","text":"public async get < T = any > ( url : string , opts? : Record < string , any > ) Send a GET request with query parameters.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_7","text":"Type Name Required Description string url Yes Endpoint Record opts? No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_8","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#post","text":"public async post < T = any > ( url : string , opts? : Record < string , any > ) : Promise < IResponse < T >> Send a POST request with JSON-encoded parameters.","title":"post()"},{"location":"sdk/typescript/client/api-documentation/#parameters_8","text":"Type Name Required Description string url Yes Endpoint Record opts? No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_9","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#requesterror","text":"","title":"RequestError"},{"location":"sdk/typescript/client/api-documentation/#constructor_1","text":"public constructor ( error ) Create a new RequestError class instance.","title":"constructor()"},{"location":"sdk/typescript/client/api-documentation/#parameters_9","text":"Type Name Required Description string error Yes Error","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#resourcesblockchain","text":"","title":"Resources\\Blockchain"},{"location":"sdk/typescript/client/api-documentation/#blockchain","text":"public async blockchain < T = any > ( query? : Record < string , any > ) Get all blockchains.","title":"blockchain()"},{"location":"sdk/typescript/client/api-documentation/#parameters_10","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_10","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#search","text":"public async search < T = any > ( payload? : Record < string , any > ) Filter all blockchains by the given parameters.","title":"search()"},{"location":"sdk/typescript/client/api-documentation/#parameters_11","text":"Type Name Required Description Record payload No Search parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_11","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcesblocks","text":"","title":"Resources\\Blocks"},{"location":"sdk/typescript/client/api-documentation/#all","text":"public async all < T = any > ( query? : Record < string , any > ) Get all blocks.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_12","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_12","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#first","text":"public async first < T = any > ( query? : Record < string , any > ) Get the first block.","title":"first()"},{"location":"sdk/typescript/client/api-documentation/#parameters_13","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_13","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#last","text":"public async last < T = any > ( query? : Record < string , any > ) Get the last (most recent) block.","title":"last()"},{"location":"sdk/typescript/client/api-documentation/#parameters_14","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_14","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_1","text":"public async get < T = any > ( id : string ) Get a block by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_15","text":"Type Name Required Description string id Yes Block ID","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_15","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#transactions","text":"public async transactions < T = any > ( id : string , query? : Record < string , any > ) Get all transactions by the given block.","title":"transactions()"},{"location":"sdk/typescript/client/api-documentation/#parameters_16","text":"Type Name Required Description string id Yes Block ID Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_16","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#missed","text":"public async missed < T = any > ( payload? : Record < string , any > ) Shows all the missed blocks by all delegates in the last 30 days","title":"missed()"},{"location":"sdk/typescript/client/api-documentation/#parameters_17","text":"Type Name Required Description Record payload No Search parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_17","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourceslocks","text":"","title":"Resources\\Locks"},{"location":"sdk/typescript/client/api-documentation/#all_1","text":"public async all < T = any > ( query? : Record < string , any > ) Get all locks.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_18","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_18","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_2","text":"public async get < T = any > ( id : string ) Get a lock by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_19","text":"Type Name Required Description string id Yes Bridgechain identifier","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_19","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#unlocked","text":"public async unlocked < T = any > ( payload? : Record < string , any > ) Search for unlocked locks.","title":"unlocked()"},{"location":"sdk/typescript/client/api-documentation/#parameters_20","text":"Type Name Required Description Record payload No Search parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_20","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcesdelegates","text":"","title":"Resources\\Delegates"},{"location":"sdk/typescript/client/api-documentation/#all_2","text":"public async all < T = any > ( query? : Record < string , any > ) Get all accounts.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_21","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_21","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_3","text":"public async get < T = any > ( id : string ) Get a delegate by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_22","text":"Type Name Required Description string id Yes Delegate identifier","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_22","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#blocks","text":"public async blocks < T = any > ( id : string , query? : Record < string , any > ) Get all blocks for the given delegate.","title":"blocks()"},{"location":"sdk/typescript/client/api-documentation/#parameters_23","text":"Type Name Required Description string id Yes Delegate identifier Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_23","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#missed_1","text":"public async missed < T = any > ( id : string , query? : Record < string , any > ) List Recent Missed Blocks of a Delegate","title":"missed()"},{"location":"sdk/typescript/client/api-documentation/#parameters_24","text":"Type Name Required Description string id Yes Delegate identifier Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_24","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#voters","text":"public async voters < T = any > ( id : string , query? : Record < string , any > ) Get all voters for the given delegate.","title":"voters()"},{"location":"sdk/typescript/client/api-documentation/#parameters_25","text":"Type Name Required Description string id Yes Delegate identifier Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_25","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcesnode","text":"","title":"Resources\\Node"},{"location":"sdk/typescript/client/api-documentation/#configuration","text":"public async configuration < T = any > () Get the node configuration.","title":"configuration()"},{"location":"sdk/typescript/client/api-documentation/#return-value_26","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#status","text":"public async status < T = any > () Get the node status.","title":"status()"},{"location":"sdk/typescript/client/api-documentation/#return-value_27","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#syncing","text":"public async syncing < T = any > () Get the node syncing status.","title":"syncing()"},{"location":"sdk/typescript/client/api-documentation/#return-value_28","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#crypto","text":"public async crypto < T = any > () Get the node crypto configuration.","title":"crypto()"},{"location":"sdk/typescript/client/api-documentation/#return-value_29","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#fees","text":"public async fees < T = any > ( days : number ) Get the node fee statistics.","title":"fees()"},{"location":"sdk/typescript/client/api-documentation/#parameters_26","text":"Type Name Required Description number days Yes Days","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_30","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcespeers","text":"","title":"Resources\\Peers"},{"location":"sdk/typescript/client/api-documentation/#all_3","text":"public async all < T = any > ( query? : Record < string , any > ) Get all peers.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_27","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_31","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_4","text":"public async get < T = any > ( ip : string ) Get a peer by the given IP address.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_28","text":"Type Name Required Description string ip Yes IP address","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_32","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcesrounds","text":"","title":"Resources\\Rounds"},{"location":"sdk/typescript/client/api-documentation/#delegates","text":"public async delegates < T = any > ( id : number ) Get delegates for a round.","title":"delegates()"},{"location":"sdk/typescript/client/api-documentation/#parameters_29","text":"Type Name Required Description number id yes Round number","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_33","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcestransactions","text":"","title":"Resources\\Transactions"},{"location":"sdk/typescript/client/api-documentation/#create","text":"public async create < T = any > ( payload : object []) Create a new transaction.","title":"create()"},{"location":"sdk/typescript/client/api-documentation/#parameters_30","text":"Type Name Required Description object[] payload Yes Transaction(s) to broadcast","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_34","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_5","text":"public async get < T = any > ( id : string ) Get a transaction by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_31","text":"Type Name Required Description string id Yes Transaction ID","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_35","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#all_4","text":"public async all < T = any > ( query? : Record < string , any > ) Get all transactions.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_32","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_36","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#allunconfirmed","text":"public async allUnconfirmed < T = any > ( query? : Record < string , any > ) Get all unconfirmed transactions.","title":"allUnconfirmed()"},{"location":"sdk/typescript/client/api-documentation/#parameters_33","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_37","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#getunconfirmed","text":"public async getUnconfirmed < T = any > ( id : string ) Get an unconfirmed transaction by the given id.","title":"getUnconfirmed()"},{"location":"sdk/typescript/client/api-documentation/#parameters_34","text":"Type Name Required Description string id Yes Transaction ID","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_38","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#schemas","text":"public async search < T = any > ( payload : Record < string , any > ) Get a list of transaction schemas.","title":"schemas()"},{"location":"sdk/typescript/client/api-documentation/#parameters_35","text":"Type Name Required Description Record payload Yes Search parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_39","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#types","text":"public async types < T = any > () Get a list of valid transaction types.","title":"types()"},{"location":"sdk/typescript/client/api-documentation/#return-value_40","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#fees_1","text":"public async fees < T = any > () : Promise < IResponse < T >> Get the node fee statistics.","title":"fees()"},{"location":"sdk/typescript/client/api-documentation/#return-value_41","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourcesvotes","text":"","title":"Resources\\Votes"},{"location":"sdk/typescript/client/api-documentation/#all_5","text":"public async all < T = any > ( query? : Record < string , any > ) Get all votes.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_36","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_42","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_6","text":"public async get < T = any > ( id : string ) Get a vote by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_37","text":"Type Name Required Description string id Yes Vote ID","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_43","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#resourceswallets","text":"","title":"Resources\\Wallets"},{"location":"sdk/typescript/client/api-documentation/#all_6","text":"public async all < T = any > ( query? : Record < string , any > ) Get all wallets.","title":"all()"},{"location":"sdk/typescript/client/api-documentation/#parameters_38","text":"Type Name Required Description Record query No Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_44","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#get_7","text":"public async get < T = any > ( id : string ) Get a wallet by the given id.","title":"get()"},{"location":"sdk/typescript/client/api-documentation/#parameters_39","text":"Type Name Required Description string id Yes Wallet identifier","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_45","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#locks","text":"public async locks < T = any > ( id : string , query? : Record < string , any > ) Get a wallet by the given id.","title":"locks()"},{"location":"sdk/typescript/client/api-documentation/#parameters_40","text":"Type Name Required Description string id Yes Wallet identifier Record query No Search parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_46","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#transactions_1","text":"public async transactions < T = any > ( id : string , query? : Record < string , any > ) Get all transactions for the given wallet.","title":"transactions()"},{"location":"sdk/typescript/client/api-documentation/#parameters_41","text":"Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_47","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#transactionsreceived","text":"public async transactionsReceived < T = any > ( id : string , query? : Record < string , any > ) Get all transactions received by the given wallet.","title":"transactionsReceived()"},{"location":"sdk/typescript/client/api-documentation/#parameters_42","text":"Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_48","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#transactionssent","text":"public async transactionsSent < T = any > ( id : string , query? : Record < string , any > ) Get all transactions sent by the given wallet.","title":"transactionsSent()"},{"location":"sdk/typescript/client/api-documentation/#parameters_43","text":"Type Name Required Description string id Yes Wallet identifier Record query Yes Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_49","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#votes","text":"public async votes < T = any > ( id : string ) Get all votes by the given wallet.","title":"votes()"},{"location":"sdk/typescript/client/api-documentation/#parameters_44","text":"Type Name Required Description string id Yes Wallet identifier","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_50","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/api-documentation/#top","text":"public async top < T = any > ( query? : Record < string , any > ) Get all wallets sorted by balance in descending order.","title":"top()"},{"location":"sdk/typescript/client/api-documentation/#parameters_45","text":"Type Name Required Description Record query Yes Query parameters","title":"Parameters"},{"location":"sdk/typescript/client/api-documentation/#return-value_51","text":"Promise<IResponse<T>>","title":"Return value"},{"location":"sdk/typescript/client/examples/","text":"Examples \u00b6 Initialization \u00b6 import { Connection } from \"@solar-network/client\" ; const client = new Connection ( ` ${ server } /api` ); Blocks \u00b6 This service API grants access to the blocks resource . A block is a signed set of transactions created by a delegate and permanently committed to the SXP blockchain. Info It is not possible to POST a block through the public API. Relay Nodes accept only blocks posted by a delegate at the correct time through the internal API. List all blocks \u00b6 const response = await client . api ( \"blocks\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 24801 , \"totalCount\" : 2480074 , \"next\" : \"/blocks?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/blocks?transform=true&page=1&limit=100\" , \"first\" : \"/blocks?transform=true&page=1&limit=100\" , \"last\" : \"/blocks?transform=true&page=24801&limit=100\" }, \"data\" : [ { \"id\" : \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" , \"version\" : 0 , \"height\" : 2480073 , \"previous\" : \"15898babf680b3fdb615564c05072ddaebf7c4b61353c6913101c82d0c59f002\" , \"forged\" : { \"reward\" : \"1012500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"50625000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"50625000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"911250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"acanthus\" , \"publicKey\" : \"0335c0fb2c7a020b8e0b503657867ac18b072fa14fc35790ea6bf8df66ec07631d\" }, \"signature\" : \"56d2729810bfb09d51d5aa388839c07ee630818ab76964ad180033f2beb3ec62f141f1239cff61306946881af17ac82191089e7b883411ade80dfb7bba6bfa3a\" , \"confirmations\" : 1 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851096 , \"unix\" : 1668341496 , \"human\" : \"2022-11-13T12:11:36.000Z\" } }, [ ... ] ] } Retrieve a block \u00b6 const response = await client . api ( \"blocks\" ). get ( \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" ); //blockid console . log ( response . body ); { \"data\" : { \"id\" : \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" , \"version\" : 0 , \"height\" : 2480073 , \"previous\" : \"15898babf680b3fdb615564c05072ddaebf7c4b61353c6913101c82d0c59f002\" , \"forged\" : { \"reward\" : \"1012500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"50625000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"50625000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"911250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"acanthus\" , \"publicKey\" : \"0335c0fb2c7a020b8e0b503657867ac18b072fa14fc35790ea6bf8df66ec07631d\" }, \"signature\" : \"56d2729810bfb09d51d5aa388839c07ee630818ab76964ad180033f2beb3ec62f141f1239cff61306946881af17ac82191089e7b883411ade80dfb7bba6bfa3a\" , \"confirmations\" : 17 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851096 , \"unix\" : 1668341496 , \"human\" : \"2022-11-13T12:11:36.000Z\" } } } List all transactions of a block \u00b6 const response = await client . api ( \"blocks\" ). transactions ( \"647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad\" ); // blockid console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 2 , \"pageCount\" : 1 , \"totalCount\" : 2 , \"next\" : null , \"previous\" : null , \"self\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"b46bda685a75aa3add59544981f71f9a412e7f226cf066d4234888f0ff112ffb\" , \"blockHeight\" : 2480086 , \"blockId\" : \"647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"28603678772\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SSzDcyrMJZAnSRjbGvQ2C1AFFHYfn519Ej\" , \"senderPublicKey\" : \"030af582f76cc890a616eb46c7553c9968ebd94d26f1411a479bab8d278d9e1999\" , \"signature\" : \"d92cad20823b0dbdc395019c563c85829059855696e204c6332c8f53a12d6841396cf0562ce192b1bb7de7bf985016752917dfefc0807b893c46a1a6ab738c39\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"28603678772\" , \"recipientId\" : \"SZzmvXs9jWEBRenPXqDSYMc7VyXSiX42Md\" } ] }, \"confirmations\" : 0 , \"nonce\" : \"2690\" }, [ ... ] ] } Search last block \u00b6 const response = await client . api ( \"blocks\" ). last (); console . log ( response . body ); { \"data\" : { \"id\" : \"9e4b5e234781cf933566b862289fd20e900eb6a602ae6e7064d634880dd4e675\" , \"version\" : 0 , \"height\" : 2480138 , \"previous\" : \"f8cf147a6132fb0081a8c255ba2b298cadca2805d6ee2f8393781757bcc9e786\" , \"forged\" : { \"reward\" : \"1025000000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"51250000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"51250000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"922500000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"fonk\" , \"publicKey\" : \"03f1cf7c43fcbdef9c27406da3449d867a3204d816fc898be1bd425db075e7b13d\" }, \"signature\" : \"2e82fa773e5cbe0e02eeccd3092e86770534ce2c38244e0b49e6dfe008aeae5dc25a0b6ffff90c5391b2e70ad6a25dc91050cf565f8c28d03c99ace888618c5d\" , \"confirmations\" : 0 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851616 , \"unix\" : 1668342016 , \"human\" : \"2022-11-13T12:20:16.000Z\" } } } Search all blocks \u00b6 const response = await client . api ( \"blocks\" ). all ({ \"height\" : 2000000 }); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" , \"first\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" , \"last\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"0ca3044010d8dc6eca4b957b6b0157824053ecddff1254c2de53f52d7a33f011\" , \"version\" : 0 , \"height\" : 2000000 , \"previous\" : \"15cb5489f99c1b58147f55751c752894b05b3a86f7621a21adfda110aa936774\" , \"forged\" : { \"reward\" : \"762500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"38125000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"38125000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"686250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"goat\" , \"publicKey\" : \"037add8608b50bacce33964ba82278258c7a882099e096ad72aef5524abf992071\" }, \"signature\" : \"d74bf3308b081dbedc75bd75e7e644d8a2e2b94759c0aad2536a105b2d55888203a3e2e863d10be5da68fd1d6c912818ca9793853f5647e5a96d33c99b7842b7\" , \"confirmations\" : 480129 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 16009824 , \"unix\" : 1664500224 , \"human\" : \"2022-09-30T01:10:24.000Z\" } } ] } Delegates \u00b6 The client SDK can be used to query the delegate resource . A delegate is a regular wallet that has broadcast a registration transaction, acquired a sufficient number of votes, and has a Relay Node configured to forge new blocks through a forger module. At any time only 53 delegates are active. They are cost-efficient miners running the SXP network. Info Voters are wallets which have broadcast a vote transaction on a delegate. A vote remains active until an un-vote transaction is sent (it does not have to be recast unless a wallet wishes to change from delegate). Voting for a delegate does not give the delegate access to the wallet nor does it lock the coins in it. List all delegates \u00b6 const response = await client . api ( \"delegates\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 124 , \"next\" : \"/delegates?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates?page=1&limit=100\" , \"first\" : \"/delegates?page=1&limit=100\" , \"last\" : \"/delegates?page=2&limit=100\" }, \"data\" : [ { \"username\" : \"lunar\" , \"address\" : \"SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq\" , \"publicKey\" : \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" , \"votesReceived\" : { \"percent\" : 0.14 , \"votes\" : \"74554726485563\" , \"voters\" : 102 }, \"rank\" : 1 , \"isResigned\" : false , \"blocks\" : { \"produced\" : 46626 , \"missed\" : 0 , \"productivity\" : 100 , \"last\" : \"495f9003f8f0c19d08624e26b6918fec254a5cdb4331af3055433ef30f875f93\" }, \"forged\" : { \"fees\" : \"45570541865\" , \"burnedFees\" : \"41013485365\" , \"rewards\" : \"34939737500000\" , \"donations\" : \"1731708750000\" , \"total\" : \"33212585806500\" }, \"version\" : \"4.1.3\" }, [ ... ] ] } Retrieve a delegate \u00b6 const response = await client . api ( \"delegates\" ). get ( \"nayiem\" ); // username, address and publickey can be used console . log ( response . body ); { \"data\" : { \"username\" : \"nayiem\" , \"address\" : \"SXp4U1YmahTJGk7aXhvDBJpZmvjCybXMMi\" , \"publicKey\" : \"02b20555163f70fcc879a0e25e24689ab72edd716dedbc6e1e5b6876624ed8e151\" , \"votesReceived\" : { \"percent\" : 0 , \"votes\" : \"0\" , \"voters\" : 0 }, \"isResigned\" : true , \"resignationType\" : \"permanent\" , \"blocks\" : { \"produced\" : 0 }, \"forged\" : { \"fees\" : \"0\" , \"burnedFees\" : \"0\" , \"rewards\" : \"0\" , \"donations\" : \"0\" , \"total\" : \"0\" } } } List all blocks of a delegate \u00b6 const response = await client . api ( \"delegates\" ). blocks ( \"SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 467 , \"totalCount\" : 46626 , \"next\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=1&limit=100\" , \"first\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=1&limit=100\" , \"last\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=467&limit=100\" }, \"data\" : [ { \"id\" : \"495f9003f8f0c19d08624e26b6918fec254a5cdb4331af3055433ef30f875f93\" , \"version\" : 0 , \"height\" : 2480144 , \"previous\" : \"4c0782dc2fde006ed3acc0fd1ec36567e7be05d4ffd82b289710b7b29b6f9b13\" , \"forged\" : { \"reward\" : \"675000000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"33750000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"33750000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"607500000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"lunar\" , \"publicKey\" : \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" }, \"signature\" : \"6f51089035099071d4f1b826c2bcfe3591953cfce5597a8e6057fff599e6bbbc5bd3209258e7cc6631f225c181ae1bfd30e7f59ba2f479ac0fc9bf46c111e4a1\" , \"confirmations\" : 71 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851664 , \"unix\" : 1668342064 , \"human\" : \"2022-11-13T12:21:04.000Z\" } }, [ ... ] ] } List all voters of a delegate \u00b6 const response = await client . api ( \"delegates\" ). voters ( \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 102 , \"next\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=1&limit=100\" , \"first\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=1&limit=100\" , \"last\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=2&limit=100\" }, \"data\" : [ { \"address\" : \"SQQZwtn5575rDVV5QiyUT7zWifxELtoQbu\" , \"publicKey\" : \"03a975fd63f5e73da0366c140a9b3080da54c25f179edce0881b36c7b74eaea80b\" , \"balance\" : \"31214109814495\" , \"nonce\" : \"16\" , \"attributes\" : {}, \"votingFor\" : { \"crypticmaniac\" : { \"percent\" : 40 , \"votes\" : \"12485643925798\" }, \"lunar\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" }, \"podushkin\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" }, \"sevi\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" } } }, [ ... ] ] } Node \u00b6 The SXP network consists of different anonymous nodes (servers), maintaining the public ledger, validating transactions and blocks and providing APIs. The node resource allows for querying the health and configurations of the node used by the instantiated client. Retrieve the configuration \u00b6 const response = await client . api ( \"node\" ). configuration (); console . log ( response . body ); { \"data\" : { \"core\" : { \"version\" : \"4.1.3\" }, \"nethash\" : \"16db20c30c52d53638ca537ad0ed113408da3ae686e2c4bfa7e315d4347196dc\" , \"slip44\" : 3333 , \"wif\" : 252 , \"token\" : \"SXP\" , \"symbol\" : \"SXP\" , \"explorer\" : \"https://explorer.solar.org\" , \"version\" : 63 , \"ports\" : {}, \"constants\" : { \"height\" : 1812866 , \"activeDelegates\" : 53 , \"block\" : { \"version\" : 0 , \"maxTransactions\" : 150 , \"maxPayload\" : 2097152 }, \"blocksToRevokeDelegateResignation\" : 106 , \"blockTime\" : 8 , \"burn\" : { \"feePercent\" : 90 , \"txAmount\" : 2000000 }, \"epoch\" : \"2022-03-28T18:00:00.000Z\" , \"fees\" : { \"staticFees\" : { \"burn\" : 0 , \"delegateRegistration\" : 7500000000 , \"delegateResignation\" : 0 , \"htlcClaim\" : 0 , \"htlcLock\" : 5000000 , \"htlcRefund\" : 0 , \"ipfs\" : 5000000 , \"legacyTransfer\" : 5000000 , \"legacyVote\" : 5000000 , \"multiSignature\" : 5000000 , \"secondSignature\" : 5000000 , \"transfer\" : 50000000 , \"vote\" : 9000000 } }, \"legacyTransfer\" : true , \"p2p\" : { \"minimumVersions\" : [ \">=4.1.0\" ] }, \"transfer\" : { \"maximum\" : 256 , \"minimum\" : 1 }, \"reward\" : 1000000000 , \"dynamicReward\" : { \"enabled\" : true , \"ranks\" : { \"1\" : 675000000 , \"2\" : 687500000 , \"3\" : 700000000 , \"4\" : 712500000 , \"5\" : 725000000 , \"6\" : 737500000 , \"7\" : 750000000 , \"8\" : 762500000 , \"9\" : 775000000 , \"10\" : 787500000 , \"11\" : 800000000 , \"12\" : 812500000 , \"13\" : 825000000 , \"14\" : 837500000 , \"15\" : 850000000 , \"16\" : 862500000 , \"17\" : 875000000 , \"18\" : 887500000 , \"19\" : 900000000 , \"20\" : 912500000 , \"21\" : 925000000 , \"22\" : 937500000 , \"23\" : 950000000 , \"24\" : 962500000 , \"25\" : 975000000 , \"26\" : 987500000 , \"27\" : 1000000000 , \"28\" : 1012500000 , \"29\" : 1025000000 , \"30\" : 1037500000 , \"31\" : 1050000000 , \"32\" : 1062500000 , \"33\" : 1075000000 , \"34\" : 1087500000 , \"35\" : 1100000000 , \"36\" : 1112500000 , \"37\" : 1125000000 , \"38\" : 1137500000 , \"39\" : 1150000000 , \"40\" : 1162500000 , \"41\" : 1175000000 , \"42\" : 1187500000 , \"43\" : 1200000000 , \"44\" : 1212500000 , \"45\" : 1225000000 , \"46\" : 1237500000 , \"47\" : 1250000000 , \"48\" : 1262500000 , \"49\" : 1275000000 , \"50\" : 1287500000 , \"51\" : 1300000000 , \"52\" : 1312500000 , \"53\" : 1325000000 }, \"secondaryReward\" : 675000000 }, \"bip340\" : true , \"donations\" : { \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : { \"percent\" : 5 , \"purpose\" : \"development\" }, \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : { \"percent\" : 5 , \"purpose\" : \"foundation\" } } }, \"pool\" : { \"dynamicFees\" : { \"enabled\" : true , \"addonBytes\" : { \"burn\" : 0 , \"delegateRegistration\" : 663703 , \"delegateResignation\" : 0 , \"htlcClaim\" : 0 , \"htlcLock\" : 82 , \"htlcRefund\" : 0 , \"ipfs\" : 98 , \"legacyTransfer\" : 99 , \"legacyVote\" : 98 , \"multiSignature\" : 16 , \"secondSignature\" : 99 , \"transfer\" : 85 , \"vote\" : 98 }, \"minFeeBroadcast\" : 11299 , \"minFeePool\" : 11299 }, \"maxTransactionsInPool\" : 15000 , \"maxTransactionsPerSender\" : 150 , \"maxTransactionsPerRequest\" : 40 , \"maxTransactionAge\" : 2700 , \"maxTransactionBytes\" : 2000000 } } } Retrieve the status \u00b6 const response = await client . api ( \"node\" ). status (); console . log ( response . body ); { \"data\" : { \"synced\" : true , \"now\" : 2480258 , \"blocksCount\" : 0 , \"timestamp\" : 19852580 } } Retrieve the syncing status \u00b6 const response = await client . api ( \"node\" ). syncing (); console . log ( response . body ); { \"data\" : { \"syncing\" : false , \"blocks\" : 0 , \"height\" : 2480261 , \"id\" : \"f03b10a97afb7b8e8ca6f29f7ffc578b00e1eb474a14d2fcc567bd344cba8201\" } } Retrieve the fees \u00b6 const response = await client . api ( \"node\" ). fees ( 30 ); console . log ( response . body ); { \"meta\" : { \"days\" : 30 }, \"data\" : { \"1\" : { \"legacyTransfer\" : { \"avg\" : \"15687540\" , \"burned\" : \"18933292245\" , \"max\" : \"30000000\" , \"min\" : \"3099322\" , \"sum\" : \"21036991385\" }, \"secondSignature\" : { \"avg\" : \"5000000\" , \"burned\" : \"27000000\" , \"max\" : \"5000000\" , \"min\" : \"5000000\" , \"sum\" : \"30000000\" }, \"delegateRegistration\" : { \"avg\" : \"7500000000\" , \"burned\" : \"54000000000\" , \"max\" : \"7500000000\" , \"min\" : \"7500000000\" , \"sum\" : \"60000000000\" }, \"transfer\" : { \"avg\" : \"3192918\" , \"burned\" : \"298946160247\" , \"max\" : \"300000000\" , \"min\" : \"1830438\" , \"sum\" : \"332162406166\" }, \"delegateResignation\" : { \"avg\" : \"0\" , \"burned\" : \"0\" , \"max\" : \"0\" , \"min\" : \"0\" , \"sum\" : \"0\" } }, \"2\" : { \"burn\" : { \"avg\" : \"0\" , \"burned\" : \"0\" , \"max\" : \"0\" , \"min\" : \"0\" , \"sum\" : \"0\" }, \"vote\" : { \"avg\" : \"2360822\" , \"burned\" : \"47294575833\" , \"max\" : \"90000000\" , \"min\" : \"1841737\" , \"sum\" : \"52549539121\" } } } } Peers \u00b6 Each node is connected to a set of peers, which are Relay or Delegate Nodes as well. The peers resource provides access to all peers connected to our node. Info Peers have made their Public API available for use; however for mission-critical queries and transaction posting you should use a node which is under your control. List all peers \u00b6 const response = await client . api ( \"peers\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 150 , \"next\" : \"/peers?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/peers?page=1&limit=100\" , \"first\" : \"/peers?page=1&limit=100\" , \"last\" : \"/peers?page=2&limit=100\" }, \"data\" : [ { \"ip\" : \"135.181.76.96\" , \"port\" : 6001 , \"ports\" : { \"@solar-network/api\" : 6003 , \"@solar-network/webhooks\" : -1 }, \"version\" : \"4.1.3\" , \"height\" : 2480274 , \"latency\" : 3 , \"plugins\" : { \"@solar-network/api\" : { \"port\" : 6003 , \"enabled\" : true , \"estimateTotalCount\" : false }, \"@solar-network/webhooks\" : { \"port\" : 6004 , \"enabled\" : false } } }, [ ... ] ] } Retrieve a peer \u00b6 const response = await client . api ( \"peers\" ). get ( \"135.181.76.96\" ); console . log ( response . body ); { \"data\" : { \"ip\" : \"135.181.76.96\" , \"port\" : 6001 , \"ports\" : { \"@solar-network/api\" : 6003 , \"@solar-network/webhooks\" : -1 }, \"version\" : \"4.1.3\" , \"height\" : 2480280 , \"latency\" : 7 , \"plugins\" : { \"@solar-network/api\" : { \"port\" : 6003 , \"enabled\" : true , \"estimateTotalCount\" : false }, \"@solar-network/webhooks\" : { \"port\" : 6004 , \"enabled\" : false } } } } Rounds \u00b6 This service API grants access to the round resource. This can be used to access all round information for the network. List delegates for a round \u00b6 const response = await client . api ( \"rounds\" ). delegates ( 1000 ); // round number console . log ( response . body ); { \"data\" : [ { \"publicKey\" : \"020019880bb7726f1cd306ead2783c2ce23598d1e7d12e1ca32cc661cee450de75\" , \"votes\" : \"30001385199\" }, { \"publicKey\" : \"02203c49a67519e8a7443e0f7dda64b0f0fe0828983c51a9277d0778051ed0d2c5\" , \"votes\" : \"30002418232\" }, [ ... ] ] } Transactions \u00b6 The heart of any blockchain is formed by its transactions; state-altering payloads signed by a wallet. Most likely you will be querying for transactions most often, using the transaction resource . Info A transaction is the only object which may be posted by a non-delegate. It requires a signature from a wallet containing a sufficient amount of SXP. Create a transaction \u00b6 const response = await client . api ( \"transactions\" ). create ([...]); console . log ( response . body ); { \"accept\" : [ \"69cfbf91c88b7f5ea75ee6d8f4d4e4b7889f2524999af5e828d7ac5ae360b0bf\" , \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" ], \"broadcast\" : [ \"69cfbf91c88b7f5ea75ee6d8f4d4e4b7889f2524999af5e828d7ac5ae360b0bf\" ], \"excess\" : [], \"invalid\" : [ \"2edf2be796863f5310a9a3c53c5080ac3f21868ebf4ed306a41133e6db92d1f1\" ] } Retrieve a transaction \u00b6 const response = await client . api ( \"transactions\" ). get ( \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" ); // transaction id console . log ( response . body ); { \"data\" : { \"id\" : \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" , \"blockHeight\" : 2480311 , \"blockId\" : \"f9f8f7f4f876731da410db5c4617646240380b39f4c2d020d93d89a3b592c6e0\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"2156188190\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"signature\" : \"9557bc67b153efbc6b4993ade677525402a665baf9650ce442ce218e250dafecc31ec91c91a40a70ff8a6bcbdb92b2a1d1f138cc42340999243516033107c604\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"2156188190\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"confirmations\" : 11 , \"timestamp\" : { \"epoch\" : 19853000 , \"unix\" : 1668343400 , \"human\" : \"2022-11-13T12:43:20.000Z\" }, \"nonce\" : \"4258\" } } List all transactions \u00b6 const response = await client . api ( \"transactions\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 5361 , \"totalCount\" : 536059 , \"next\" : \"/transactions?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/transactions?transform=true&page=5361&limit=100\" }, \"data\" : [ { \"id\" : \"6b0befaa0844ed2208236819dc987ef52ccb4d890135e3d0af5c701159108389\" , \"blockHeight\" : 2480319 , \"blockId\" : \"6526bfa96fef39ac6961ebf14aec22197d74c8e25d092db5d4b3edf7c4ceb9ab\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"991556570\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SZzmvXs9jWEBRenPXqDSYMc7VyXSiX42Md\" , \"senderPublicKey\" : \"029d4db19e14e07b0ef9c90e51e25ba78bf626aa54cc22a937469e4426ec0ad40c\" , \"signature\" : \"a2a6721000cc321c3b8308265461ac94c8a79a3a3b8ee90290c267bb3d839cd46a174c907b43038ded973674efdd2d8f0184026b4298fab57d1571e2ee74077e\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"991556570\" , \"recipientId\" : \"SSzDcyrMJZAnSRjbGvQ2C1AFFHYfn519Ej\" } ] }, \"confirmations\" : 7 , \"timestamp\" : { \"epoch\" : 19853064 , \"unix\" : 1668343464 , \"human\" : \"2022-11-13T12:44:24.000Z\" }, \"nonce\" : \"3192\" }, [ ... ] ] } List all unconfirmed transactions \u00b6 const response = await client . api ( \"transactions\" ). allUnconfirmed (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" , \"first\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" , \"last\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"29974365162\" , \"fee\" : \"2000000\" , \"sender\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"signature\" : \"dd278816cf7e96d1678cb294ae0d0c48c85c89b8bd90b497e32802455aed80a6e762c6d85a12ac93e15ffb75fc8667a99f516d877e7eb48130ce26b8bca607b5\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"29974365162\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"confirmations\" : 0 , \"nonce\" : \"4260\" } ] } Get unconfirmed transaction \u00b6 const response = await client . api ( \"transactions\" ). getUnconfirmed ( \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" ); // transaction id console . log ( response . body ); { \"data\" : { \"headerType\" : 0 , \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 6 , \"nonce\" : \"4260\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"senderId\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"fee\" : \"2000000\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"29974365162\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"signature\" : \"dd278816cf7e96d1678cb294ae0d0c48c85c89b8bd90b497e32802455aed80a6e762c6d85a12ac93e15ffb75fc8667a99f516d877e7eb48130ce26b8bca607b5\" , \"id\" : \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" } } Search transactions \u00b6 const response = await client . api ( \"transactions\" ). all ({ \"blockId\" : \"65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725\" }); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" , \"first\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" , \"last\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"6e20eeba7681a5c922820e4abe2fbd2d9bed9442b999ff923fd4ae5ba32ee3c0\" , \"blockHeight\" : 2480360 , \"blockId\" : \"65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"36774476202\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SdCJwNHakoE79NjqoBTVi7TZiY8PCZ7cqo\" , \"senderPublicKey\" : \"03601938294055b79bb2ba8f95e75646c13533985af95d0d387304508d235a278c\" , \"signature\" : \"b2ac3a388410cc0ffa2ffa5660d635d2d97d7b5bf855281dfe0f57a4f6425f3b992fcedb702c8e76a1c4d8894fc133d41e7aea6179599b9a18fff08353fedf6b\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"36774476202\" , \"recipientId\" : \"ShpGjppgiV83ZrwUZQgx6ZJEq2bEs7yncs\" } ] }, \"confirmations\" : 15 , \"timestamp\" : { \"epoch\" : 19853392 , \"unix\" : 1668343792 , \"human\" : \"2022-11-13T12:49:52.000Z\" }, \"nonce\" : \"444\" } ] } List transaction types \u00b6 const response = await client . api ( \"transactions\" ). types (); console . log ( response . body ); { \"data\" : { \"1\" : { \"LegacyTransfer\" : 0 , \"SecondSignature\" : 1 , \"DelegateRegistration\" : 2 , \"Ipfs\" : 5 , \"Transfer\" : 6 , \"DelegateResignation\" : 7 }, \"2\" : { \"Burn\" : 0 , \"Vote\" : 2 } } } Votes \u00b6 A vote is a transaction sub-type, where the asset field contains a votes object and the transaction.type is 2 and transaction.typeGroup is 2 . List all votes \u00b6 const response = await client . api ( \"votes\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 1893 , \"totalCount\" : 189204 , \"next\" : \"/votes?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/votes?transform=true&page=1&limit=100\" , \"first\" : \"/votes?transform=true&page=1&limit=100\" , \"last\" : \"/votes?transform=true&page=1893&limit=100\" }, \"data\" : [ { \"id\" : \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" , \"blockHeight\" : 2480355 , \"blockId\" : \"4f7fc0d602a7a443884390c8a77a3ef343b1d90cb748e26fb577b780e6d4312b\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2632667\" , \"burnedFee\" : \"2369400\" , \"sender\" : \"SZnh2RJBrUSHY1duonnssUyvz27mjesNBA\" , \"senderPublicKey\" : \"032621096302e183c58e79e7b300c2b8c5ee0918c350eb1ed72bc4645120facb4e\" , \"signature\" : \"7adae78aa71313019eaafd0623928da91c413c2e48429c85cd918f5af2e885b72e1a6c1de329c258f9705f358eb168190c267d77754bef61272d6596cd210288\" , \"asset\" : { \"votes\" : { \"arbaro\" : 8 , \"bfx\" : 8 , \"dev51\" : 8 , \"goat\" : 8 , \"goose\" : 8 , \"nybl\" : 8 , \"thamar\" : 8 , \"wevalidate\" : 8 , \"aurelion_sol\" : 4.5 , \"finca\" : 4.5 , \"fnoufnou\" : 4.5 , \"geops\" : 4.5 , \"kaos\" : 4.5 , \"kippers\" : 4.5 , \"sigma\" : 4.5 , \"st3v3n\" : 4.5 } }, \"confirmations\" : 0 , \"nonce\" : \"3411\" }, [ ... ] ] } Retrieve a vote \u00b6 const response = await client . api ( \"votes\" ). get ( \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" ); // transaction id console . log ( response . body ); { \"data\" : { \"id\" : \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" , \"blockHeight\" : 2480355 , \"blockId\" : \"4f7fc0d602a7a443884390c8a77a3ef343b1d90cb748e26fb577b780e6d4312b\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2632667\" , \"burnedFee\" : \"2369400\" , \"sender\" : \"SZnh2RJBrUSHY1duonnssUyvz27mjesNBA\" , \"senderPublicKey\" : \"032621096302e183c58e79e7b300c2b8c5ee0918c350eb1ed72bc4645120facb4e\" , \"signature\" : \"7adae78aa71313019eaafd0623928da91c413c2e48429c85cd918f5af2e885b72e1a6c1de329c258f9705f358eb168190c267d77754bef61272d6596cd210288\" , \"asset\" : { \"votes\" : { \"arbaro\" : 8 , \"bfx\" : 8 , \"dev51\" : 8 , \"goat\" : 8 , \"goose\" : 8 , \"nybl\" : 8 , \"thamar\" : 8 , \"wevalidate\" : 8 , \"aurelion_sol\" : 4.5 , \"finca\" : 4.5 , \"fnoufnou\" : 4.5 , \"geops\" : 4.5 , \"kaos\" : 4.5 , \"kippers\" : 4.5 , \"sigma\" : 4.5 , \"st3v3n\" : 4.5 } }, \"confirmations\" : 0 , \"nonce\" : \"3411\" } } Wallets \u00b6 The wallet resource provides access to: Wallets. Incoming and outgoing transactions per wallet. Each wallet's votes. Retrieve all wallets \u00b6 const response = await client . api ( \"wallets\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 138 , \"totalCount\" : 13723 , \"next\" : \"/wallets?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets?page=1&limit=100\" , \"first\" : \"/wallets?page=1&limit=100\" , \"last\" : \"/wallets?page=138&limit=100\" }, \"data\" : [ { \"address\" : \"SP77TpbBYC2nCpaCg3u1BBsYU7zqwqzGo7\" , \"publicKey\" : \"02699ab620eb6088f9e88d2c1fa1fb0ea8a179c210a46de2314817dd11d3aa16a1\" , \"balance\" : \"34109523703593098\" , \"nonce\" : \"4843\" , \"attributes\" : {}, \"votingFor\" : {} }, [ ... ] ] } Retrieve a wallet \u00b6 const response = await client . api ( \"wallets\" ). get ( \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" ); // username, address and publickey can be used console . log ( response . body ); { \"data\" : { \"address\" : \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" , \"publicKey\" : \"02d57cbaa907441974285e229d2cc191734e03e917921d880da683fe6051b9a58b\" , \"balance\" : \"10605726562967\" , \"nonce\" : \"41\" , \"attributes\" : { \"secondPublicKey\" : \"02a19da5df3d54a26aac9c27a8320c6444ce0ea767c4f7813bdae8d5b85d7e96ee\" }, \"votingFor\" : { \"cactus1549\" : { \"percent\" : 22 , \"votes\" : \"2333259843853\" }, \"nybl\" : { \"percent\" : 19 , \"votes\" : \"2015088046964\" }, \"fun\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"kimchi\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"leitesv\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"sl33p\" : { \"percent\" : 5 , \"votes\" : \"530286328148\" } } } } List all transactions of a wallet \u00b6 const response = await client . api ( \"wallets\" ). transactions ( \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 11 , \"totalCount\" : 1010 , \"next\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=11&limit=100\" }, \"data\" : [ { \"id\" : \"5b994b62847a54db9878701fae6a63f48c3ac2e7ce0145584a109a6d6ba9a645\" , \"blockHeight\" : 2478311 , \"blockId\" : \"3af9808d7fa2599b86a77134c307afb337e9c781573ed014550a3590576d99ae\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"300000000000\" , \"fee\" : \"2500000\" , \"burnedFee\" : \"2250000\" , \"sender\" : \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" , \"senderPublicKey\" : \"02d57cbaa907441974285e229d2cc191734e03e917921d880da683fe6051b9a58b\" , \"signature\" : \"ea4928f565bdb832e11fdc0617f67ed6d607b7ea9f58e7cf67ff12335628c8195bf036ddb269a590cd65e1b77554cc8e58830920f8c0e05d5e66769a614e1a80\" , \"signSignature\" : \"a501bad74541f3d9f4de7847ed46fdf90b8924266ea58d4c1b662fd0d097da3edb30e17a997c4ceacad3206e0bcc9688fd7bf4501bb8dd010b544591a6289ddd\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"300000000000\" , \"recipientId\" : \"SXRBrruo4WebaGMRvHQri7mHbeRB6ixaSX\" } ] }, \"confirmations\" : 2783 , \"timestamp\" : { \"epoch\" : 19836992 , \"unix\" : 1668327392 , \"human\" : \"2022-11-13T08:16:32.000Z\" }, \"nonce\" : \"41\" }, [ ... ] ] } List all received transactions of a wallet \u00b6 const response = await client . api ( \"wallets\" ). transactionsReceived ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 4 , \"totalCount\" : 383 , \"next\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=4&limit=100\" }, \"data\" : [ { \"id\" : \"aa73a070e542a41432b64d4d52195b2ffcfb4fee804e83cefec4806f25919512\" , \"blockHeight\" : 2481089 , \"blockId\" : \"a79c17835923c0c43f0b92a2bffcf3c0264a336cd5e2c75b8135475d3d746b82\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"3215472537\" , \"fee\" : \"3000000\" , \"burnedFee\" : \"2700000\" , \"sender\" : \"SYW2LmsGiBbx7bMMjTovCMyzCHsjoPh4D1\" , \"senderPublicKey\" : \"03772f27de174ca9cde5133f52dfdbc3dc1b1322f1318841c78ea581b1c11d1791\" , \"signature\" : \"80f0686317c88c9ca2642cdcf89ee62eb2ef6e1e34e9f9bb67172688a00110d4b55168e7b889e270a8e69ad5d90d3ba3120ff36d0beedd3944841cc84fe9bdfe\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"3215472537\" , \"recipientId\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" } ] }, \"confirmations\" : 21 , \"timestamp\" : { \"epoch\" : 19859224 , \"unix\" : 1668349624 , \"human\" : \"2022-11-13T14:27:04.000Z\" }, \"nonce\" : \"383\" }, [ ... ] ] } List all sent transactions of a wallet \u00b6 const response = await client . api ( \"wallets\" ). transactionsSent ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 48 , \"pageCount\" : 1 , \"totalCount\" : 48 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"866d7dbbf8b90d2fb19d2dd2096c99676cb87a8b39ef305fa50e19fbcdcfaaa6\" , \"blockHeight\" : 2480771 , \"blockId\" : \"5fecddcb42f664afaf3e998d1194811bc0282866fe6c570f59e05f4840c1b0d6\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"17383129\" , \"fee\" : \"3000000\" , \"burnedFee\" : \"2700000\" , \"sender\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" , \"senderPublicKey\" : \"028cb707a488c08d47ecc8a4f6d459abca405d293f922fb05b5504dd050738c0de\" , \"signature\" : \"734bd9cac93ae736ab5b82d7e53ae4e895e91b4a327456fd525a7987fd7765ffb449ef523cbc11901b58de65bcf13d21f6f01b16cba2b00f5832ed2e44f26cf5\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"17383129\" , \"recipientId\" : \"SYW2LmsGiBbx7bMMjTovCMyzCHsjoPh4D1\" } ] }, \"confirmations\" : 344 , \"timestamp\" : { \"epoch\" : 19856680 , \"unix\" : 1668347080 , \"human\" : \"2022-11-13T13:44:40.000Z\" }, \"nonce\" : \"48\" }, [ ... ] ] } List all votes of a wallet \u00b6 const response = await client . api ( \"wallets\" ). votes ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"a6e76f4236973d401e627761ebab09104ee02d2af43abe045ac59a16543a8087\" , \"blockHeight\" : 2445947 , \"blockId\" : \"543bfe21d1441a20ab7ec238441e1f2eb5fbee1c0b2018baaa61647be3883513\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2673218\" , \"burnedFee\" : \"2405896\" , \"sender\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" , \"senderPublicKey\" : \"028cb707a488c08d47ecc8a4f6d459abca405d293f922fb05b5504dd050738c0de\" , \"signature\" : \"fc363c3657aaf0cfebe3827b1f07d7bd0980bac21f7d3d3774579daef19efc57e1b7f0abc3937c403edb8bd2d6765277926b9880acff1009dd48ef053909e85c\" , \"asset\" : { \"votes\" : { \"runner\" : 100 } }, \"confirmations\" : 35172 , \"timestamp\" : { \"epoch\" : 19578048 , \"unix\" : 1668068448 , \"human\" : \"2022-11-10T08:20:48.000Z\" }, \"nonce\" : \"2\" }, [ ... ] ] } List all top wallets \u00b6 const response = await client . api ( \"wallets\" ). top ({ page : 6 , limit : 20 }); // the query parameter is optional. console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 20 , \"pageCount\" : 687 , \"totalCount\" : 13723 , \"next\" : \"/wallets/top?page=7&limit=20\" , \"previous\" : \"/wallets/top?page=5&limit=20\" , \"self\" : \"/wallets/top?page=6&limit=20\" , \"first\" : \"/wallets/top?page=1&limit=20\" , \"last\" : \"/wallets/top?page=687&limit=20\" }, \"data\" : [ { \"address\" : \"SXWGpnrW2hTsQYEUzVzdgNuBvxuM7LkpCj\" , \"publicKey\" : \"02ee9dc022f25c2ee4cf2964e70d7eb9a0972ba811e9ba7679fe36be5aaed206ad\" , \"balance\" : \"6990964193384\" , \"nonce\" : \"2\" , \"attributes\" : {}, \"votingFor\" : { \"goose\" : { \"percent\" : 70 , \"votes\" : \"4893674935369\" }, \"kippers\" : { \"percent\" : 15 , \"votes\" : \"1048644629008\" }, \"thamar\" : { \"percent\" : 15 , \"votes\" : \"1048644629007\" } } }, [ ... ] ] } Search all wallets \u00b6 const response = await client . api ( \"wallets\" ). all ({ \"balance\" : { from : 30000000000000 , to : 40000000000000 }}); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 5 , \"pageCount\" : 1 , \"totalCount\" : 5 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" , \"first\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" , \"last\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" }, \"data\" : [ { \"address\" : \"SYcyjU1mqCW9Vwag186BGoAUnLxTY3oVKr\" , \"publicKey\" : \"03cea2dcf8d43557240bb0ead6629262e3bf58f72615dbadac607e85ad4e45c38b\" , \"balance\" : \"35900835000000\" , \"nonce\" : \"2785\" , \"attributes\" : {}, \"votingFor\" : {} } ] }","title":"Examples"},{"location":"sdk/typescript/client/examples/#examples","text":"","title":"Examples"},{"location":"sdk/typescript/client/examples/#initialization","text":"import { Connection } from \"@solar-network/client\" ; const client = new Connection ( ` ${ server } /api` );","title":"Initialization"},{"location":"sdk/typescript/client/examples/#blocks","text":"This service API grants access to the blocks resource . A block is a signed set of transactions created by a delegate and permanently committed to the SXP blockchain. Info It is not possible to POST a block through the public API. Relay Nodes accept only blocks posted by a delegate at the correct time through the internal API.","title":"Blocks"},{"location":"sdk/typescript/client/examples/#list-all-blocks","text":"const response = await client . api ( \"blocks\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 24801 , \"totalCount\" : 2480074 , \"next\" : \"/blocks?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/blocks?transform=true&page=1&limit=100\" , \"first\" : \"/blocks?transform=true&page=1&limit=100\" , \"last\" : \"/blocks?transform=true&page=24801&limit=100\" }, \"data\" : [ { \"id\" : \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" , \"version\" : 0 , \"height\" : 2480073 , \"previous\" : \"15898babf680b3fdb615564c05072ddaebf7c4b61353c6913101c82d0c59f002\" , \"forged\" : { \"reward\" : \"1012500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"50625000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"50625000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"911250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"acanthus\" , \"publicKey\" : \"0335c0fb2c7a020b8e0b503657867ac18b072fa14fc35790ea6bf8df66ec07631d\" }, \"signature\" : \"56d2729810bfb09d51d5aa388839c07ee630818ab76964ad180033f2beb3ec62f141f1239cff61306946881af17ac82191089e7b883411ade80dfb7bba6bfa3a\" , \"confirmations\" : 1 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851096 , \"unix\" : 1668341496 , \"human\" : \"2022-11-13T12:11:36.000Z\" } }, [ ... ] ] }","title":"List all blocks"},{"location":"sdk/typescript/client/examples/#retrieve-a-block","text":"const response = await client . api ( \"blocks\" ). get ( \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" ); //blockid console . log ( response . body ); { \"data\" : { \"id\" : \"4dcbf9a09e8718683e2d1cf6e1cd6cd5e2e3c6e8195026736cf78db383c9e1b2\" , \"version\" : 0 , \"height\" : 2480073 , \"previous\" : \"15898babf680b3fdb615564c05072ddaebf7c4b61353c6913101c82d0c59f002\" , \"forged\" : { \"reward\" : \"1012500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"50625000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"50625000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"911250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"acanthus\" , \"publicKey\" : \"0335c0fb2c7a020b8e0b503657867ac18b072fa14fc35790ea6bf8df66ec07631d\" }, \"signature\" : \"56d2729810bfb09d51d5aa388839c07ee630818ab76964ad180033f2beb3ec62f141f1239cff61306946881af17ac82191089e7b883411ade80dfb7bba6bfa3a\" , \"confirmations\" : 17 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851096 , \"unix\" : 1668341496 , \"human\" : \"2022-11-13T12:11:36.000Z\" } } }","title":"Retrieve a block"},{"location":"sdk/typescript/client/examples/#list-all-transactions-of-a-block","text":"const response = await client . api ( \"blocks\" ). transactions ( \"647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad\" ); // blockid console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 2 , \"pageCount\" : 1 , \"totalCount\" : 2 , \"next\" : null , \"previous\" : null , \"self\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/blocks/647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad/transactions?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"b46bda685a75aa3add59544981f71f9a412e7f226cf066d4234888f0ff112ffb\" , \"blockHeight\" : 2480086 , \"blockId\" : \"647d851e2abc5fc556a6ed6400da4dc46334ace10b6983f73f24100cdd9e44ad\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"28603678772\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SSzDcyrMJZAnSRjbGvQ2C1AFFHYfn519Ej\" , \"senderPublicKey\" : \"030af582f76cc890a616eb46c7553c9968ebd94d26f1411a479bab8d278d9e1999\" , \"signature\" : \"d92cad20823b0dbdc395019c563c85829059855696e204c6332c8f53a12d6841396cf0562ce192b1bb7de7bf985016752917dfefc0807b893c46a1a6ab738c39\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"28603678772\" , \"recipientId\" : \"SZzmvXs9jWEBRenPXqDSYMc7VyXSiX42Md\" } ] }, \"confirmations\" : 0 , \"nonce\" : \"2690\" }, [ ... ] ] }","title":"List all transactions of a block"},{"location":"sdk/typescript/client/examples/#search-last-block","text":"const response = await client . api ( \"blocks\" ). last (); console . log ( response . body ); { \"data\" : { \"id\" : \"9e4b5e234781cf933566b862289fd20e900eb6a602ae6e7064d634880dd4e675\" , \"version\" : 0 , \"height\" : 2480138 , \"previous\" : \"f8cf147a6132fb0081a8c255ba2b298cadca2805d6ee2f8393781757bcc9e786\" , \"forged\" : { \"reward\" : \"1025000000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"51250000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"51250000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"922500000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"fonk\" , \"publicKey\" : \"03f1cf7c43fcbdef9c27406da3449d867a3204d816fc898be1bd425db075e7b13d\" }, \"signature\" : \"2e82fa773e5cbe0e02eeccd3092e86770534ce2c38244e0b49e6dfe008aeae5dc25a0b6ffff90c5391b2e70ad6a25dc91050cf565f8c28d03c99ace888618c5d\" , \"confirmations\" : 0 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851616 , \"unix\" : 1668342016 , \"human\" : \"2022-11-13T12:20:16.000Z\" } } }","title":"Search last block"},{"location":"sdk/typescript/client/examples/#search-all-blocks","text":"const response = await client . api ( \"blocks\" ). all ({ \"height\" : 2000000 }); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" , \"first\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" , \"last\" : \"/blocks?height=2000000&transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"0ca3044010d8dc6eca4b957b6b0157824053ecddff1254c2de53f52d7a33f011\" , \"version\" : 0 , \"height\" : 2000000 , \"previous\" : \"15cb5489f99c1b58147f55751c752894b05b3a86f7621a21adfda110aa936774\" , \"forged\" : { \"reward\" : \"762500000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"38125000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"38125000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"686250000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"goat\" , \"publicKey\" : \"037add8608b50bacce33964ba82278258c7a882099e096ad72aef5524abf992071\" }, \"signature\" : \"d74bf3308b081dbedc75bd75e7e644d8a2e2b94759c0aad2536a105b2d55888203a3e2e863d10be5da68fd1d6c912818ca9793853f5647e5a96d33c99b7842b7\" , \"confirmations\" : 480129 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 16009824 , \"unix\" : 1664500224 , \"human\" : \"2022-09-30T01:10:24.000Z\" } } ] }","title":"Search all blocks"},{"location":"sdk/typescript/client/examples/#delegates","text":"The client SDK can be used to query the delegate resource . A delegate is a regular wallet that has broadcast a registration transaction, acquired a sufficient number of votes, and has a Relay Node configured to forge new blocks through a forger module. At any time only 53 delegates are active. They are cost-efficient miners running the SXP network. Info Voters are wallets which have broadcast a vote transaction on a delegate. A vote remains active until an un-vote transaction is sent (it does not have to be recast unless a wallet wishes to change from delegate). Voting for a delegate does not give the delegate access to the wallet nor does it lock the coins in it.","title":"Delegates"},{"location":"sdk/typescript/client/examples/#list-all-delegates","text":"const response = await client . api ( \"delegates\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 124 , \"next\" : \"/delegates?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates?page=1&limit=100\" , \"first\" : \"/delegates?page=1&limit=100\" , \"last\" : \"/delegates?page=2&limit=100\" }, \"data\" : [ { \"username\" : \"lunar\" , \"address\" : \"SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq\" , \"publicKey\" : \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" , \"votesReceived\" : { \"percent\" : 0.14 , \"votes\" : \"74554726485563\" , \"voters\" : 102 }, \"rank\" : 1 , \"isResigned\" : false , \"blocks\" : { \"produced\" : 46626 , \"missed\" : 0 , \"productivity\" : 100 , \"last\" : \"495f9003f8f0c19d08624e26b6918fec254a5cdb4331af3055433ef30f875f93\" }, \"forged\" : { \"fees\" : \"45570541865\" , \"burnedFees\" : \"41013485365\" , \"rewards\" : \"34939737500000\" , \"donations\" : \"1731708750000\" , \"total\" : \"33212585806500\" }, \"version\" : \"4.1.3\" }, [ ... ] ] }","title":"List all delegates"},{"location":"sdk/typescript/client/examples/#retrieve-a-delegate","text":"const response = await client . api ( \"delegates\" ). get ( \"nayiem\" ); // username, address and publickey can be used console . log ( response . body ); { \"data\" : { \"username\" : \"nayiem\" , \"address\" : \"SXp4U1YmahTJGk7aXhvDBJpZmvjCybXMMi\" , \"publicKey\" : \"02b20555163f70fcc879a0e25e24689ab72edd716dedbc6e1e5b6876624ed8e151\" , \"votesReceived\" : { \"percent\" : 0 , \"votes\" : \"0\" , \"voters\" : 0 }, \"isResigned\" : true , \"resignationType\" : \"permanent\" , \"blocks\" : { \"produced\" : 0 }, \"forged\" : { \"fees\" : \"0\" , \"burnedFees\" : \"0\" , \"rewards\" : \"0\" , \"donations\" : \"0\" , \"total\" : \"0\" } } }","title":"Retrieve a delegate"},{"location":"sdk/typescript/client/examples/#list-all-blocks-of-a-delegate","text":"const response = await client . api ( \"delegates\" ). blocks ( \"SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 467 , \"totalCount\" : 46626 , \"next\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=1&limit=100\" , \"first\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=1&limit=100\" , \"last\" : \"/delegates/SNxmEDRVi1JGY26BFVCCQtf5GmaNm6zBcq/blocks?transform=true&page=467&limit=100\" }, \"data\" : [ { \"id\" : \"495f9003f8f0c19d08624e26b6918fec254a5cdb4331af3055433ef30f875f93\" , \"version\" : 0 , \"height\" : 2480144 , \"previous\" : \"4c0782dc2fde006ed3acc0fd1ec36567e7be05d4ffd82b289710b7b29b6f9b13\" , \"forged\" : { \"reward\" : \"675000000\" , \"donations\" : { \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : \"33750000\" , \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : \"33750000\" }, \"fee\" : \"0\" , \"burnedFee\" : \"0\" , \"amount\" : \"0\" , \"total\" : \"607500000\" }, \"payload\" : { \"hash\" : \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" , \"length\" : 0 }, \"generator\" : { \"username\" : \"lunar\" , \"publicKey\" : \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" }, \"signature\" : \"6f51089035099071d4f1b826c2bcfe3591953cfce5597a8e6057fff599e6bbbc5bd3209258e7cc6631f225c181ae1bfd30e7f59ba2f479ac0fc9bf46c111e4a1\" , \"confirmations\" : 71 , \"transactions\" : 0 , \"timestamp\" : { \"epoch\" : 19851664 , \"unix\" : 1668342064 , \"human\" : \"2022-11-13T12:21:04.000Z\" } }, [ ... ] ] }","title":"List all blocks of a delegate"},{"location":"sdk/typescript/client/examples/#list-all-voters-of-a-delegate","text":"const response = await client . api ( \"delegates\" ). voters ( \"026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 102 , \"next\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=1&limit=100\" , \"first\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=1&limit=100\" , \"last\" : \"/delegates/026c46df329504f258372b80dc38f86f7a71590a7d20fb6fe1bbc0ad00a463ce6f/voters?page=2&limit=100\" }, \"data\" : [ { \"address\" : \"SQQZwtn5575rDVV5QiyUT7zWifxELtoQbu\" , \"publicKey\" : \"03a975fd63f5e73da0366c140a9b3080da54c25f179edce0881b36c7b74eaea80b\" , \"balance\" : \"31214109814495\" , \"nonce\" : \"16\" , \"attributes\" : {}, \"votingFor\" : { \"crypticmaniac\" : { \"percent\" : 40 , \"votes\" : \"12485643925798\" }, \"lunar\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" }, \"podushkin\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" }, \"sevi\" : { \"percent\" : 20 , \"votes\" : \"6242821962899\" } } }, [ ... ] ] }","title":"List all voters of a delegate"},{"location":"sdk/typescript/client/examples/#node","text":"The SXP network consists of different anonymous nodes (servers), maintaining the public ledger, validating transactions and blocks and providing APIs. The node resource allows for querying the health and configurations of the node used by the instantiated client.","title":"Node"},{"location":"sdk/typescript/client/examples/#retrieve-the-configuration","text":"const response = await client . api ( \"node\" ). configuration (); console . log ( response . body ); { \"data\" : { \"core\" : { \"version\" : \"4.1.3\" }, \"nethash\" : \"16db20c30c52d53638ca537ad0ed113408da3ae686e2c4bfa7e315d4347196dc\" , \"slip44\" : 3333 , \"wif\" : 252 , \"token\" : \"SXP\" , \"symbol\" : \"SXP\" , \"explorer\" : \"https://explorer.solar.org\" , \"version\" : 63 , \"ports\" : {}, \"constants\" : { \"height\" : 1812866 , \"activeDelegates\" : 53 , \"block\" : { \"version\" : 0 , \"maxTransactions\" : 150 , \"maxPayload\" : 2097152 }, \"blocksToRevokeDelegateResignation\" : 106 , \"blockTime\" : 8 , \"burn\" : { \"feePercent\" : 90 , \"txAmount\" : 2000000 }, \"epoch\" : \"2022-03-28T18:00:00.000Z\" , \"fees\" : { \"staticFees\" : { \"burn\" : 0 , \"delegateRegistration\" : 7500000000 , \"delegateResignation\" : 0 , \"htlcClaim\" : 0 , \"htlcLock\" : 5000000 , \"htlcRefund\" : 0 , \"ipfs\" : 5000000 , \"legacyTransfer\" : 5000000 , \"legacyVote\" : 5000000 , \"multiSignature\" : 5000000 , \"secondSignature\" : 5000000 , \"transfer\" : 50000000 , \"vote\" : 9000000 } }, \"legacyTransfer\" : true , \"p2p\" : { \"minimumVersions\" : [ \">=4.1.0\" ] }, \"transfer\" : { \"maximum\" : 256 , \"minimum\" : 1 }, \"reward\" : 1000000000 , \"dynamicReward\" : { \"enabled\" : true , \"ranks\" : { \"1\" : 675000000 , \"2\" : 687500000 , \"3\" : 700000000 , \"4\" : 712500000 , \"5\" : 725000000 , \"6\" : 737500000 , \"7\" : 750000000 , \"8\" : 762500000 , \"9\" : 775000000 , \"10\" : 787500000 , \"11\" : 800000000 , \"12\" : 812500000 , \"13\" : 825000000 , \"14\" : 837500000 , \"15\" : 850000000 , \"16\" : 862500000 , \"17\" : 875000000 , \"18\" : 887500000 , \"19\" : 900000000 , \"20\" : 912500000 , \"21\" : 925000000 , \"22\" : 937500000 , \"23\" : 950000000 , \"24\" : 962500000 , \"25\" : 975000000 , \"26\" : 987500000 , \"27\" : 1000000000 , \"28\" : 1012500000 , \"29\" : 1025000000 , \"30\" : 1037500000 , \"31\" : 1050000000 , \"32\" : 1062500000 , \"33\" : 1075000000 , \"34\" : 1087500000 , \"35\" : 1100000000 , \"36\" : 1112500000 , \"37\" : 1125000000 , \"38\" : 1137500000 , \"39\" : 1150000000 , \"40\" : 1162500000 , \"41\" : 1175000000 , \"42\" : 1187500000 , \"43\" : 1200000000 , \"44\" : 1212500000 , \"45\" : 1225000000 , \"46\" : 1237500000 , \"47\" : 1250000000 , \"48\" : 1262500000 , \"49\" : 1275000000 , \"50\" : 1287500000 , \"51\" : 1300000000 , \"52\" : 1312500000 , \"53\" : 1325000000 }, \"secondaryReward\" : 675000000 }, \"bip340\" : true , \"donations\" : { \"Sgymbo4rg9aBeJJ2YmV12xdRY2xo6b94U9\" : { \"percent\" : 5 , \"purpose\" : \"development\" }, \"Sdao2USyAz9B6RBgZeFyNDePuQAxfzZZHE\" : { \"percent\" : 5 , \"purpose\" : \"foundation\" } } }, \"pool\" : { \"dynamicFees\" : { \"enabled\" : true , \"addonBytes\" : { \"burn\" : 0 , \"delegateRegistration\" : 663703 , \"delegateResignation\" : 0 , \"htlcClaim\" : 0 , \"htlcLock\" : 82 , \"htlcRefund\" : 0 , \"ipfs\" : 98 , \"legacyTransfer\" : 99 , \"legacyVote\" : 98 , \"multiSignature\" : 16 , \"secondSignature\" : 99 , \"transfer\" : 85 , \"vote\" : 98 }, \"minFeeBroadcast\" : 11299 , \"minFeePool\" : 11299 }, \"maxTransactionsInPool\" : 15000 , \"maxTransactionsPerSender\" : 150 , \"maxTransactionsPerRequest\" : 40 , \"maxTransactionAge\" : 2700 , \"maxTransactionBytes\" : 2000000 } } }","title":"Retrieve the configuration"},{"location":"sdk/typescript/client/examples/#retrieve-the-status","text":"const response = await client . api ( \"node\" ). status (); console . log ( response . body ); { \"data\" : { \"synced\" : true , \"now\" : 2480258 , \"blocksCount\" : 0 , \"timestamp\" : 19852580 } }","title":"Retrieve the status"},{"location":"sdk/typescript/client/examples/#retrieve-the-syncing-status","text":"const response = await client . api ( \"node\" ). syncing (); console . log ( response . body ); { \"data\" : { \"syncing\" : false , \"blocks\" : 0 , \"height\" : 2480261 , \"id\" : \"f03b10a97afb7b8e8ca6f29f7ffc578b00e1eb474a14d2fcc567bd344cba8201\" } }","title":"Retrieve the syncing status"},{"location":"sdk/typescript/client/examples/#retrieve-the-fees","text":"const response = await client . api ( \"node\" ). fees ( 30 ); console . log ( response . body ); { \"meta\" : { \"days\" : 30 }, \"data\" : { \"1\" : { \"legacyTransfer\" : { \"avg\" : \"15687540\" , \"burned\" : \"18933292245\" , \"max\" : \"30000000\" , \"min\" : \"3099322\" , \"sum\" : \"21036991385\" }, \"secondSignature\" : { \"avg\" : \"5000000\" , \"burned\" : \"27000000\" , \"max\" : \"5000000\" , \"min\" : \"5000000\" , \"sum\" : \"30000000\" }, \"delegateRegistration\" : { \"avg\" : \"7500000000\" , \"burned\" : \"54000000000\" , \"max\" : \"7500000000\" , \"min\" : \"7500000000\" , \"sum\" : \"60000000000\" }, \"transfer\" : { \"avg\" : \"3192918\" , \"burned\" : \"298946160247\" , \"max\" : \"300000000\" , \"min\" : \"1830438\" , \"sum\" : \"332162406166\" }, \"delegateResignation\" : { \"avg\" : \"0\" , \"burned\" : \"0\" , \"max\" : \"0\" , \"min\" : \"0\" , \"sum\" : \"0\" } }, \"2\" : { \"burn\" : { \"avg\" : \"0\" , \"burned\" : \"0\" , \"max\" : \"0\" , \"min\" : \"0\" , \"sum\" : \"0\" }, \"vote\" : { \"avg\" : \"2360822\" , \"burned\" : \"47294575833\" , \"max\" : \"90000000\" , \"min\" : \"1841737\" , \"sum\" : \"52549539121\" } } } }","title":"Retrieve the fees"},{"location":"sdk/typescript/client/examples/#peers","text":"Each node is connected to a set of peers, which are Relay or Delegate Nodes as well. The peers resource provides access to all peers connected to our node. Info Peers have made their Public API available for use; however for mission-critical queries and transaction posting you should use a node which is under your control.","title":"Peers"},{"location":"sdk/typescript/client/examples/#list-all-peers","text":"const response = await client . api ( \"peers\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 2 , \"totalCount\" : 150 , \"next\" : \"/peers?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/peers?page=1&limit=100\" , \"first\" : \"/peers?page=1&limit=100\" , \"last\" : \"/peers?page=2&limit=100\" }, \"data\" : [ { \"ip\" : \"135.181.76.96\" , \"port\" : 6001 , \"ports\" : { \"@solar-network/api\" : 6003 , \"@solar-network/webhooks\" : -1 }, \"version\" : \"4.1.3\" , \"height\" : 2480274 , \"latency\" : 3 , \"plugins\" : { \"@solar-network/api\" : { \"port\" : 6003 , \"enabled\" : true , \"estimateTotalCount\" : false }, \"@solar-network/webhooks\" : { \"port\" : 6004 , \"enabled\" : false } } }, [ ... ] ] }","title":"List all peers"},{"location":"sdk/typescript/client/examples/#retrieve-a-peer","text":"const response = await client . api ( \"peers\" ). get ( \"135.181.76.96\" ); console . log ( response . body ); { \"data\" : { \"ip\" : \"135.181.76.96\" , \"port\" : 6001 , \"ports\" : { \"@solar-network/api\" : 6003 , \"@solar-network/webhooks\" : -1 }, \"version\" : \"4.1.3\" , \"height\" : 2480280 , \"latency\" : 7 , \"plugins\" : { \"@solar-network/api\" : { \"port\" : 6003 , \"enabled\" : true , \"estimateTotalCount\" : false }, \"@solar-network/webhooks\" : { \"port\" : 6004 , \"enabled\" : false } } } }","title":"Retrieve a peer"},{"location":"sdk/typescript/client/examples/#rounds","text":"This service API grants access to the round resource. This can be used to access all round information for the network.","title":"Rounds"},{"location":"sdk/typescript/client/examples/#list-delegates-for-a-round","text":"const response = await client . api ( \"rounds\" ). delegates ( 1000 ); // round number console . log ( response . body ); { \"data\" : [ { \"publicKey\" : \"020019880bb7726f1cd306ead2783c2ce23598d1e7d12e1ca32cc661cee450de75\" , \"votes\" : \"30001385199\" }, { \"publicKey\" : \"02203c49a67519e8a7443e0f7dda64b0f0fe0828983c51a9277d0778051ed0d2c5\" , \"votes\" : \"30002418232\" }, [ ... ] ] }","title":"List delegates for a round"},{"location":"sdk/typescript/client/examples/#transactions","text":"The heart of any blockchain is formed by its transactions; state-altering payloads signed by a wallet. Most likely you will be querying for transactions most often, using the transaction resource . Info A transaction is the only object which may be posted by a non-delegate. It requires a signature from a wallet containing a sufficient amount of SXP.","title":"Transactions"},{"location":"sdk/typescript/client/examples/#create-a-transaction","text":"const response = await client . api ( \"transactions\" ). create ([...]); console . log ( response . body ); { \"accept\" : [ \"69cfbf91c88b7f5ea75ee6d8f4d4e4b7889f2524999af5e828d7ac5ae360b0bf\" , \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" ], \"broadcast\" : [ \"69cfbf91c88b7f5ea75ee6d8f4d4e4b7889f2524999af5e828d7ac5ae360b0bf\" ], \"excess\" : [], \"invalid\" : [ \"2edf2be796863f5310a9a3c53c5080ac3f21868ebf4ed306a41133e6db92d1f1\" ] }","title":"Create a transaction"},{"location":"sdk/typescript/client/examples/#retrieve-a-transaction","text":"const response = await client . api ( \"transactions\" ). get ( \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" ); // transaction id console . log ( response . body ); { \"data\" : { \"id\" : \"f79b7f640bf1b2142cbe62d5a54a47f0eba6aebe75d2f263d998926ed3be9697\" , \"blockHeight\" : 2480311 , \"blockId\" : \"f9f8f7f4f876731da410db5c4617646240380b39f4c2d020d93d89a3b592c6e0\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"2156188190\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"signature\" : \"9557bc67b153efbc6b4993ade677525402a665baf9650ce442ce218e250dafecc31ec91c91a40a70ff8a6bcbdb92b2a1d1f138cc42340999243516033107c604\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"2156188190\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"confirmations\" : 11 , \"timestamp\" : { \"epoch\" : 19853000 , \"unix\" : 1668343400 , \"human\" : \"2022-11-13T12:43:20.000Z\" }, \"nonce\" : \"4258\" } }","title":"Retrieve a transaction"},{"location":"sdk/typescript/client/examples/#list-all-transactions","text":"const response = await client . api ( \"transactions\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 5361 , \"totalCount\" : 536059 , \"next\" : \"/transactions?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/transactions?transform=true&page=5361&limit=100\" }, \"data\" : [ { \"id\" : \"6b0befaa0844ed2208236819dc987ef52ccb4d890135e3d0af5c701159108389\" , \"blockHeight\" : 2480319 , \"blockId\" : \"6526bfa96fef39ac6961ebf14aec22197d74c8e25d092db5d4b3edf7c4ceb9ab\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"991556570\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SZzmvXs9jWEBRenPXqDSYMc7VyXSiX42Md\" , \"senderPublicKey\" : \"029d4db19e14e07b0ef9c90e51e25ba78bf626aa54cc22a937469e4426ec0ad40c\" , \"signature\" : \"a2a6721000cc321c3b8308265461ac94c8a79a3a3b8ee90290c267bb3d839cd46a174c907b43038ded973674efdd2d8f0184026b4298fab57d1571e2ee74077e\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"991556570\" , \"recipientId\" : \"SSzDcyrMJZAnSRjbGvQ2C1AFFHYfn519Ej\" } ] }, \"confirmations\" : 7 , \"timestamp\" : { \"epoch\" : 19853064 , \"unix\" : 1668343464 , \"human\" : \"2022-11-13T12:44:24.000Z\" }, \"nonce\" : \"3192\" }, [ ... ] ] }","title":"List all transactions"},{"location":"sdk/typescript/client/examples/#list-all-unconfirmed-transactions","text":"const response = await client . api ( \"transactions\" ). allUnconfirmed (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" , \"first\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" , \"last\" : \"/transactions/unconfirmed?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"29974365162\" , \"fee\" : \"2000000\" , \"sender\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"signature\" : \"dd278816cf7e96d1678cb294ae0d0c48c85c89b8bd90b497e32802455aed80a6e762c6d85a12ac93e15ffb75fc8667a99f516d877e7eb48130ce26b8bca607b5\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"29974365162\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"confirmations\" : 0 , \"nonce\" : \"4260\" } ] }","title":"List all unconfirmed transactions"},{"location":"sdk/typescript/client/examples/#get-unconfirmed-transaction","text":"const response = await client . api ( \"transactions\" ). getUnconfirmed ( \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" ); // transaction id console . log ( response . body ); { \"data\" : { \"headerType\" : 0 , \"version\" : 3 , \"network\" : 63 , \"typeGroup\" : 1 , \"type\" : 6 , \"nonce\" : \"4260\" , \"senderPublicKey\" : \"02211d5f622df160e8462165d2b4992480d7bf6f7ecea40ba3c4c1d4e1b9a001b7\" , \"senderId\" : \"SVVBgFYCYDk2anBEqoarq4gqrpRpf1oYjn\" , \"fee\" : \"2000000\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"29974365162\" , \"recipientId\" : \"SPBsN8ujPjP2Gge8VfhG6X1uACYzki7ZWD\" } ] }, \"signature\" : \"dd278816cf7e96d1678cb294ae0d0c48c85c89b8bd90b497e32802455aed80a6e762c6d85a12ac93e15ffb75fc8667a99f516d877e7eb48130ce26b8bca607b5\" , \"id\" : \"0b81d54e71daf12394cce82a1b9bd80cb7935e381e10092df02e72687d3facb5\" } }","title":"Get unconfirmed transaction"},{"location":"sdk/typescript/client/examples/#search-transactions","text":"const response = await client . api ( \"transactions\" ). all ({ \"blockId\" : \"65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725\" }); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" , \"first\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" , \"last\" : \"/transactions?blockId=65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725&transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"6e20eeba7681a5c922820e4abe2fbd2d9bed9442b999ff923fd4ae5ba32ee3c0\" , \"blockHeight\" : 2480360 , \"blockId\" : \"65a8fdece83649c88d7e2232cd196ee2ca549c5f2892e4b227b6d7ded1ba9725\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"36774476202\" , \"fee\" : \"2000000\" , \"burnedFee\" : \"1800000\" , \"sender\" : \"SdCJwNHakoE79NjqoBTVi7TZiY8PCZ7cqo\" , \"senderPublicKey\" : \"03601938294055b79bb2ba8f95e75646c13533985af95d0d387304508d235a278c\" , \"signature\" : \"b2ac3a388410cc0ffa2ffa5660d635d2d97d7b5bf855281dfe0f57a4f6425f3b992fcedb702c8e76a1c4d8894fc133d41e7aea6179599b9a18fff08353fedf6b\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"36774476202\" , \"recipientId\" : \"ShpGjppgiV83ZrwUZQgx6ZJEq2bEs7yncs\" } ] }, \"confirmations\" : 15 , \"timestamp\" : { \"epoch\" : 19853392 , \"unix\" : 1668343792 , \"human\" : \"2022-11-13T12:49:52.000Z\" }, \"nonce\" : \"444\" } ] }","title":"Search transactions"},{"location":"sdk/typescript/client/examples/#list-transaction-types","text":"const response = await client . api ( \"transactions\" ). types (); console . log ( response . body ); { \"data\" : { \"1\" : { \"LegacyTransfer\" : 0 , \"SecondSignature\" : 1 , \"DelegateRegistration\" : 2 , \"Ipfs\" : 5 , \"Transfer\" : 6 , \"DelegateResignation\" : 7 }, \"2\" : { \"Burn\" : 0 , \"Vote\" : 2 } } }","title":"List transaction types"},{"location":"sdk/typescript/client/examples/#votes","text":"A vote is a transaction sub-type, where the asset field contains a votes object and the transaction.type is 2 and transaction.typeGroup is 2 .","title":"Votes"},{"location":"sdk/typescript/client/examples/#list-all-votes","text":"const response = await client . api ( \"votes\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 1893 , \"totalCount\" : 189204 , \"next\" : \"/votes?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/votes?transform=true&page=1&limit=100\" , \"first\" : \"/votes?transform=true&page=1&limit=100\" , \"last\" : \"/votes?transform=true&page=1893&limit=100\" }, \"data\" : [ { \"id\" : \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" , \"blockHeight\" : 2480355 , \"blockId\" : \"4f7fc0d602a7a443884390c8a77a3ef343b1d90cb748e26fb577b780e6d4312b\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2632667\" , \"burnedFee\" : \"2369400\" , \"sender\" : \"SZnh2RJBrUSHY1duonnssUyvz27mjesNBA\" , \"senderPublicKey\" : \"032621096302e183c58e79e7b300c2b8c5ee0918c350eb1ed72bc4645120facb4e\" , \"signature\" : \"7adae78aa71313019eaafd0623928da91c413c2e48429c85cd918f5af2e885b72e1a6c1de329c258f9705f358eb168190c267d77754bef61272d6596cd210288\" , \"asset\" : { \"votes\" : { \"arbaro\" : 8 , \"bfx\" : 8 , \"dev51\" : 8 , \"goat\" : 8 , \"goose\" : 8 , \"nybl\" : 8 , \"thamar\" : 8 , \"wevalidate\" : 8 , \"aurelion_sol\" : 4.5 , \"finca\" : 4.5 , \"fnoufnou\" : 4.5 , \"geops\" : 4.5 , \"kaos\" : 4.5 , \"kippers\" : 4.5 , \"sigma\" : 4.5 , \"st3v3n\" : 4.5 } }, \"confirmations\" : 0 , \"nonce\" : \"3411\" }, [ ... ] ] }","title":"List all votes"},{"location":"sdk/typescript/client/examples/#retrieve-a-vote","text":"const response = await client . api ( \"votes\" ). get ( \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" ); // transaction id console . log ( response . body ); { \"data\" : { \"id\" : \"a0709cffb1cc3ddce4bc0f07ecd24ef263af48b999ef6a91c0634ee8eaf82ff9\" , \"blockHeight\" : 2480355 , \"blockId\" : \"4f7fc0d602a7a443884390c8a77a3ef343b1d90cb748e26fb577b780e6d4312b\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2632667\" , \"burnedFee\" : \"2369400\" , \"sender\" : \"SZnh2RJBrUSHY1duonnssUyvz27mjesNBA\" , \"senderPublicKey\" : \"032621096302e183c58e79e7b300c2b8c5ee0918c350eb1ed72bc4645120facb4e\" , \"signature\" : \"7adae78aa71313019eaafd0623928da91c413c2e48429c85cd918f5af2e885b72e1a6c1de329c258f9705f358eb168190c267d77754bef61272d6596cd210288\" , \"asset\" : { \"votes\" : { \"arbaro\" : 8 , \"bfx\" : 8 , \"dev51\" : 8 , \"goat\" : 8 , \"goose\" : 8 , \"nybl\" : 8 , \"thamar\" : 8 , \"wevalidate\" : 8 , \"aurelion_sol\" : 4.5 , \"finca\" : 4.5 , \"fnoufnou\" : 4.5 , \"geops\" : 4.5 , \"kaos\" : 4.5 , \"kippers\" : 4.5 , \"sigma\" : 4.5 , \"st3v3n\" : 4.5 } }, \"confirmations\" : 0 , \"nonce\" : \"3411\" } }","title":"Retrieve a vote"},{"location":"sdk/typescript/client/examples/#wallets","text":"The wallet resource provides access to: Wallets. Incoming and outgoing transactions per wallet. Each wallet's votes.","title":"Wallets"},{"location":"sdk/typescript/client/examples/#retrieve-all-wallets","text":"const response = await client . api ( \"wallets\" ). all (); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 138 , \"totalCount\" : 13723 , \"next\" : \"/wallets?page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets?page=1&limit=100\" , \"first\" : \"/wallets?page=1&limit=100\" , \"last\" : \"/wallets?page=138&limit=100\" }, \"data\" : [ { \"address\" : \"SP77TpbBYC2nCpaCg3u1BBsYU7zqwqzGo7\" , \"publicKey\" : \"02699ab620eb6088f9e88d2c1fa1fb0ea8a179c210a46de2314817dd11d3aa16a1\" , \"balance\" : \"34109523703593098\" , \"nonce\" : \"4843\" , \"attributes\" : {}, \"votingFor\" : {} }, [ ... ] ] }","title":"Retrieve all wallets"},{"location":"sdk/typescript/client/examples/#retrieve-a-wallet","text":"const response = await client . api ( \"wallets\" ). get ( \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" ); // username, address and publickey can be used console . log ( response . body ); { \"data\" : { \"address\" : \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" , \"publicKey\" : \"02d57cbaa907441974285e229d2cc191734e03e917921d880da683fe6051b9a58b\" , \"balance\" : \"10605726562967\" , \"nonce\" : \"41\" , \"attributes\" : { \"secondPublicKey\" : \"02a19da5df3d54a26aac9c27a8320c6444ce0ea767c4f7813bdae8d5b85d7e96ee\" }, \"votingFor\" : { \"cactus1549\" : { \"percent\" : 22 , \"votes\" : \"2333259843853\" }, \"nybl\" : { \"percent\" : 19 , \"votes\" : \"2015088046964\" }, \"fun\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"kimchi\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"leitesv\" : { \"percent\" : 18 , \"votes\" : \"1909030781334\" }, \"sl33p\" : { \"percent\" : 5 , \"votes\" : \"530286328148\" } } } }","title":"Retrieve a wallet"},{"location":"sdk/typescript/client/examples/#list-all-transactions-of-a-wallet","text":"const response = await client . api ( \"wallets\" ). transactions ( \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 11 , \"totalCount\" : 1010 , \"next\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/SaaHfAgt76QLSMy67tornXq7jE5SsTHEok/transactions?transform=true&page=11&limit=100\" }, \"data\" : [ { \"id\" : \"5b994b62847a54db9878701fae6a63f48c3ac2e7ce0145584a109a6d6ba9a645\" , \"blockHeight\" : 2478311 , \"blockId\" : \"3af9808d7fa2599b86a77134c307afb337e9c781573ed014550a3590576d99ae\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"300000000000\" , \"fee\" : \"2500000\" , \"burnedFee\" : \"2250000\" , \"sender\" : \"SaaHfAgt76QLSMy67tornXq7jE5SsTHEok\" , \"senderPublicKey\" : \"02d57cbaa907441974285e229d2cc191734e03e917921d880da683fe6051b9a58b\" , \"signature\" : \"ea4928f565bdb832e11fdc0617f67ed6d607b7ea9f58e7cf67ff12335628c8195bf036ddb269a590cd65e1b77554cc8e58830920f8c0e05d5e66769a614e1a80\" , \"signSignature\" : \"a501bad74541f3d9f4de7847ed46fdf90b8924266ea58d4c1b662fd0d097da3edb30e17a997c4ceacad3206e0bcc9688fd7bf4501bb8dd010b544591a6289ddd\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"300000000000\" , \"recipientId\" : \"SXRBrruo4WebaGMRvHQri7mHbeRB6ixaSX\" } ] }, \"confirmations\" : 2783 , \"timestamp\" : { \"epoch\" : 19836992 , \"unix\" : 1668327392 , \"human\" : \"2022-11-13T08:16:32.000Z\" }, \"nonce\" : \"41\" }, [ ... ] ] }","title":"List all transactions of a wallet"},{"location":"sdk/typescript/client/examples/#list-all-received-transactions-of-a-wallet","text":"const response = await client . api ( \"wallets\" ). transactionsReceived ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 100 , \"pageCount\" : 4 , \"totalCount\" : 383 , \"next\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=2&limit=100\" , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/received?transform=true&page=4&limit=100\" }, \"data\" : [ { \"id\" : \"aa73a070e542a41432b64d4d52195b2ffcfb4fee804e83cefec4806f25919512\" , \"blockHeight\" : 2481089 , \"blockId\" : \"a79c17835923c0c43f0b92a2bffcf3c0264a336cd5e2c75b8135475d3d746b82\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"3215472537\" , \"fee\" : \"3000000\" , \"burnedFee\" : \"2700000\" , \"sender\" : \"SYW2LmsGiBbx7bMMjTovCMyzCHsjoPh4D1\" , \"senderPublicKey\" : \"03772f27de174ca9cde5133f52dfdbc3dc1b1322f1318841c78ea581b1c11d1791\" , \"signature\" : \"80f0686317c88c9ca2642cdcf89ee62eb2ef6e1e34e9f9bb67172688a00110d4b55168e7b889e270a8e69ad5d90d3ba3120ff36d0beedd3944841cc84fe9bdfe\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"3215472537\" , \"recipientId\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" } ] }, \"confirmations\" : 21 , \"timestamp\" : { \"epoch\" : 19859224 , \"unix\" : 1668349624 , \"human\" : \"2022-11-13T14:27:04.000Z\" }, \"nonce\" : \"383\" }, [ ... ] ] }","title":"List all received transactions of a wallet"},{"location":"sdk/typescript/client/examples/#list-all-sent-transactions-of-a-wallet","text":"const response = await client . api ( \"wallets\" ). transactionsSent ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 48 , \"pageCount\" : 1 , \"totalCount\" : 48 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/transactions/sent?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"866d7dbbf8b90d2fb19d2dd2096c99676cb87a8b39ef305fa50e19fbcdcfaaa6\" , \"blockHeight\" : 2480771 , \"blockId\" : \"5fecddcb42f664afaf3e998d1194811bc0282866fe6c570f59e05f4840c1b0d6\" , \"version\" : 3 , \"type\" : 6 , \"typeGroup\" : 1 , \"amount\" : \"17383129\" , \"fee\" : \"3000000\" , \"burnedFee\" : \"2700000\" , \"sender\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" , \"senderPublicKey\" : \"028cb707a488c08d47ecc8a4f6d459abca405d293f922fb05b5504dd050738c0de\" , \"signature\" : \"734bd9cac93ae736ab5b82d7e53ae4e895e91b4a327456fd525a7987fd7765ffb449ef523cbc11901b58de65bcf13d21f6f01b16cba2b00f5832ed2e44f26cf5\" , \"asset\" : { \"transfers\" : [ { \"amount\" : \"17383129\" , \"recipientId\" : \"SYW2LmsGiBbx7bMMjTovCMyzCHsjoPh4D1\" } ] }, \"confirmations\" : 344 , \"timestamp\" : { \"epoch\" : 19856680 , \"unix\" : 1668347080 , \"human\" : \"2022-11-13T13:44:40.000Z\" }, \"nonce\" : \"48\" }, [ ... ] ] }","title":"List all sent transactions of a wallet"},{"location":"sdk/typescript/client/examples/#list-all-votes-of-a-wallet","text":"const response = await client . api ( \"wallets\" ). votes ( \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" ); // username, address and publickey can be used console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 1 , \"pageCount\" : 1 , \"totalCount\" : 1 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" , \"first\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" , \"last\" : \"/wallets/Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe/votes?transform=true&page=1&limit=100\" }, \"data\" : [ { \"id\" : \"a6e76f4236973d401e627761ebab09104ee02d2af43abe045ac59a16543a8087\" , \"blockHeight\" : 2445947 , \"blockId\" : \"543bfe21d1441a20ab7ec238441e1f2eb5fbee1c0b2018baaa61647be3883513\" , \"version\" : 3 , \"type\" : 2 , \"typeGroup\" : 2 , \"fee\" : \"2673218\" , \"burnedFee\" : \"2405896\" , \"sender\" : \"Sc6wHgx3VP3GN5gZznJesR8YSBQouhaKMe\" , \"senderPublicKey\" : \"028cb707a488c08d47ecc8a4f6d459abca405d293f922fb05b5504dd050738c0de\" , \"signature\" : \"fc363c3657aaf0cfebe3827b1f07d7bd0980bac21f7d3d3774579daef19efc57e1b7f0abc3937c403edb8bd2d6765277926b9880acff1009dd48ef053909e85c\" , \"asset\" : { \"votes\" : { \"runner\" : 100 } }, \"confirmations\" : 35172 , \"timestamp\" : { \"epoch\" : 19578048 , \"unix\" : 1668068448 , \"human\" : \"2022-11-10T08:20:48.000Z\" }, \"nonce\" : \"2\" }, [ ... ] ] }","title":"List all votes of a wallet"},{"location":"sdk/typescript/client/examples/#list-all-top-wallets","text":"const response = await client . api ( \"wallets\" ). top ({ page : 6 , limit : 20 }); // the query parameter is optional. console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 20 , \"pageCount\" : 687 , \"totalCount\" : 13723 , \"next\" : \"/wallets/top?page=7&limit=20\" , \"previous\" : \"/wallets/top?page=5&limit=20\" , \"self\" : \"/wallets/top?page=6&limit=20\" , \"first\" : \"/wallets/top?page=1&limit=20\" , \"last\" : \"/wallets/top?page=687&limit=20\" }, \"data\" : [ { \"address\" : \"SXWGpnrW2hTsQYEUzVzdgNuBvxuM7LkpCj\" , \"publicKey\" : \"02ee9dc022f25c2ee4cf2964e70d7eb9a0972ba811e9ba7679fe36be5aaed206ad\" , \"balance\" : \"6990964193384\" , \"nonce\" : \"2\" , \"attributes\" : {}, \"votingFor\" : { \"goose\" : { \"percent\" : 70 , \"votes\" : \"4893674935369\" }, \"kippers\" : { \"percent\" : 15 , \"votes\" : \"1048644629008\" }, \"thamar\" : { \"percent\" : 15 , \"votes\" : \"1048644629007\" } } }, [ ... ] ] }","title":"List all top wallets"},{"location":"sdk/typescript/client/examples/#search-all-wallets","text":"const response = await client . api ( \"wallets\" ). all ({ \"balance\" : { from : 30000000000000 , to : 40000000000000 }}); console . log ( response . body ); { \"meta\" : { \"totalCountIsEstimate\" : false , \"count\" : 5 , \"pageCount\" : 1 , \"totalCount\" : 5 , \"next\" : null , \"previous\" : null , \"self\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" , \"first\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" , \"last\" : \"/wallets?balance.from=30000000000000&balance.to=40000000000000&page=1&limit=100\" }, \"data\" : [ { \"address\" : \"SYcyjU1mqCW9Vwag186BGoAUnLxTY3oVKr\" , \"publicKey\" : \"03cea2dcf8d43557240bb0ead6629262e3bf58f72615dbadac607e85ad4e45c38b\" , \"balance\" : \"35900835000000\" , \"nonce\" : \"2785\" , \"attributes\" : {}, \"votingFor\" : {} } ] }","title":"Search all wallets"},{"location":"sdk/typescript/client/intro/","text":"Installation \u00b6 NodeJS installation \u00b6 NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM . Install a package manager \u00b6 Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation Install package with pnpm \u00b6 pnpm install @solar-network/client","title":"Getting Started"},{"location":"sdk/typescript/client/intro/#installation","text":"","title":"Installation"},{"location":"sdk/typescript/client/intro/#nodejs-installation","text":"NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM .","title":"NodeJS installation"},{"location":"sdk/typescript/client/intro/#install-a-package-manager","text":"Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation","title":"Install a package manager"},{"location":"sdk/typescript/client/intro/#install-package-with-pnpm","text":"pnpm install @solar-network/client","title":"Install package with pnpm"},{"location":"sdk/typescript/crypto/api-documentation/","text":"API Documentation \u00b6 Crypto\\Blocks\\BlockFactory \u00b6 fromHex() \u00b6 public static fromHex ( hex : string ) Generate Block object from HEX. Parameters \u00b6 Type Name Required Description string hex Yes Block content Return value \u00b6 IBlock fromBytes() \u00b6 public static fromBytes ( buffer : Buffer ) Generate Block object from a Buffer. Parameters \u00b6 Type Name Required Description Buffer buffer Yes Block content Return value \u00b6 IBlock fromJson() \u00b6 public static fromJson ( json : IBlockJson ) Generate Block object from JSON. Parameters \u00b6 Type Name Required Description IBlockJson json Yes Block content Return value \u00b6 IBlock fromData() \u00b6 public static fromData ( data : IBlockData , options : { deserialiseTransactionsUnchecked? : boolean } = {}) Generate Block object from Block data. Parameters \u00b6 Type Name Required Description IBlockData data Yes Block content object options Yes Options used for parsing block data Return value \u00b6 IBlock Crypto\\Blocks\\Serialiser \u00b6 size() \u00b6 public static size ( block : IBlock ) Get size of Block. Parameters \u00b6 Type Name Required Description IBlock block Yes Block object Return value \u00b6 number serialiseWithTransactions() \u00b6 public static serialiseWithTransactions ( block : IBlockData ) Serialise Block with Transactions. Parameters \u00b6 Type Name Required Description IBlockData block Yes Block object Return value \u00b6 Buffer serialise() \u00b6 public static serialise ( block : IBlockData , includeSignature : boolean = true ) Serialise Block without Transactions. Parameters \u00b6 Type Name Required Description IBlockData block Yes Block object boolean includeSignature Yes Whether to include signature in serialisation Return value \u00b6 Buffer Crypto\\Crypto\\HashAlgorithms \u00b6 ripemd160() \u00b6 public static ripemd160 ( buffer : Buffer | string ) Hash with RIPEMD-160. Parameters \u00b6 Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for Return value \u00b6 Buffer sha1() \u00b6 public static sha1 ( buffer : Buffer | string ) Hash with SHA-1. Parameters \u00b6 Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for Return value \u00b6 Buffer sha256() \u00b6 public static sha256 ( buffer : Buffer | string | Buffer []) Hash with SHA-256. Parameters \u00b6 Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for Return value \u00b6 Buffer hash160() \u00b6 public static hash160 ( buffer : Buffer | string ) Hash with Hash160. Parameters \u00b6 Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for Return value \u00b6 Buffer hash256() \u00b6 public static hash256 ( buffer : Buffer | string ) Hash with Hash256. Parameters \u00b6 Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for Return value \u00b6 Buffer Crypto\\Crypto\\Hash \u00b6 signSchnorr() \u00b6 public static signSchnorr ( hash : Buffer , keys : IKeyPair ) Sign hash with Schnorr. Parameters \u00b6 Type Name Required Description Buffer hash Yes Hash to sign IKeyPair keys Yes Keys to sign hash with Return value \u00b6 string verifySchnorr() \u00b6 public static verifySchnorr ( hash : Buffer , signature : Buffer | string , publicKey : Buffer | string ) Verify Schnorr signature. Parameters \u00b6 Type Name Required Description Buffer hash Yes Hash to verify Buffer, string signature Yes Signature of hash Buffer, string publicKey Yes Public key of wallet which signed the hash Return value \u00b6 boolean Crypto\\Crypto\\HDWallet \u00b6 fromMnemonic() \u00b6 public static fromMnemonic ( mnemonic : string , passphrase? : string ) Generate BIP32 Wallet from mnemonic. Parameters \u00b6 Type Name Required Description string mnemonic Yes INSERT_DESCRIPTION string passphrase No INSERT_DESCRIPTION Return value \u00b6 BIP32Interface fromKeys() \u00b6 public static fromKeys ( keys : IKeyPair , chainCode : Buffer ) Generate BIP32 Wallet from KeyPair. Parameters \u00b6 Type Name Required Description IKeyPair keys Yes INSERT_DESCRIPTION Buffer chainCode Yes INSERT_DESCRIPTION Return value \u00b6 BIP32Interface getKeys() \u00b6 public static getKeys ( node : BIP32Interface ) Get keys for BIP32 Wallet. Parameters \u00b6 Type Name Required Description BIP32Interface node Yes BIP32 Wallet to get keys for Return value \u00b6 IKeyPair deriveSlip44() \u00b6 public static deriveSlip44 ( root : BIP32Interface , hardened : boolean = true ) Determine Slip44 for BIP32 Wallet. Parameters \u00b6 Type Name Required Description BIP32Interface root Yes BIP32 Wallet to determine Slip44 for boolean hardened Yes INSERT_DESCRIPTION Return value \u00b6 BIP32Interface deriveNetwork() \u00b6 public static deriveNetwork ( root : BIP32Interface ) Determine Network for BIP32 Wallet. Parameters \u00b6 Type Name Required Description BIP32Interface root Yes BIP32 Wallet to determine network for Return value \u00b6 BIP32Interface Crypto\\Crypto\\Message \u00b6 sign() \u00b6 public static sign ( message : string , passphrase : string ) Sign a message using the given passphrase. Parameters \u00b6 Type Name Required Description string message Yes Message string passphrase Yes Passphrase Return value \u00b6 IMessage signWithWif() \u00b6 public static signWithWif ( message : string , wif : string , network? : INetwork ) Sign a message using the given WIF string. Parameters \u00b6 Type Name Required Description string message Yes Message string wif Yes Network WIF INetwork network No Network Return value \u00b6 IMessage verify() \u00b6 public static verify ({ message , publicKey , signature } : IMessage ) Verify the message contents Parameters \u00b6 Type Name Required Description IMessage object Yes Message Return value \u00b6 boolean Crypto\\Crypto\\Slots \u00b6 getTime() \u00b6 public static getTime ( time? : number ) Get the time diff between now and network start. Parameters \u00b6 Type Name Required Description number time No Network start time Return value \u00b6 number getTimeInMsUntilNextSlot() \u00b6 public static getTimeInMsUntilNextSlot () Get the time (in milliseconds) until the start of the next slot. Return value \u00b6 number getSlotNumber() \u00b6 public static getSlotNumber ( epoch? : number ) Get the slot number. Parameters \u00b6 Type Name Required Description number epoch No Epoch time Return value \u00b6 number getSlotTime() \u00b6 public static getSlotTime ( slot : number ) Get the slot time. Parameters \u00b6 Type Name Required Description number slot Yes Slot Return value \u00b6 number getNextSlot() \u00b6 public static getNextSlot () Get the next slot. Return value \u00b6 number isForgingAllowed() \u00b6 public static isForgingAllowed ( epoch? : number ) Verify is forging is allowed. Parameters \u00b6 Type Name Required Description number epoch No Epoch time Return value \u00b6 boolean Crypto\\Identities\\Address \u00b6 fromPassphrase() \u00b6 public static fromPassphrase ( passphrase : string , networkVersion? : number ) Derive the address from the given passphrase. Parameters \u00b6 Type Name Required Description string passphrase Yes Passphrase number networkVersion No Version of the network Return value \u00b6 string fromPublicKey() \u00b6 public static fromPublicKey ( publicKey : string , networkVersion? : number ) Derive a (multisig) address from a multi signature asset. Parameters \u00b6 Type Name Required Description string publicKey Yes Public key number networkVersion No Version of the network Return value \u00b6 string fromWIF() \u00b6 public static fromWIF ( wif : string , network? : NetworkType ) Derive the address from a WIF string. Parameters \u00b6 Type Name Required Description string wif Yes WIF NetworkType network No Network to generate address for Return value \u00b6 string fromMultiSignatureAsset() \u00b6 public static fromMultiSignatureAsset ( asset : IMultiSignatureAsset , networkVersion? : number ) Derive the address from the given multi signature asset. Parameters \u00b6 Type Name Required Description IMultiSignatureAsset asset Yes Address to validate number networkVersion No Version of the network Return value \u00b6 string fromPrivateKey() \u00b6 public static fromPrivateKey ( privateKey , networkVersion? : number ) Derive the address from the given private key. Parameters \u00b6 Type Name Required Description any privateKey Yes Private key to derive address for number networkVersion No Version of the network Return value \u00b6 string fromBuffer() \u00b6 public static fromBuffer ( buffer : Buffer ) Derive the address from a Buffer. Parameters \u00b6 Type Name Required Description Buffer buffer Yes Buffer to derive address from Return value \u00b6 string toBuffer() \u00b6 public static toBuffer ( address : string ) Convert address to a Buffer. Parameters \u00b6 Type Name Required Description string address Yes Address to convert to buffer Return value \u00b6 { addressBuffer: Buffer; addressError?: string } validate() \u00b6 public static validate ( address : string , networkVersion? : number ) Validate the given address. Parameters \u00b6 Type Name Required Description string address Yes Address to validate number networkVersion No Version of the network Return value \u00b6 boolean Crypto\\Identities\\Keys \u00b6 fromPassphrase() \u00b6 public static fromPassphrase ( passphrase : string , compressed : boolean = true ) Derive the keys from the given passphrase. Parameters \u00b6 Type Name Required Description string passphrase Yes Passphrase boolean compressed Yes Compression flag Return value \u00b6 IKeyPair fromPrivateKey() \u00b6 public static fromPrivateKey ( privateKey : Buffer | string , compressed : boolean = true ) Derive the keys from the given private key. Parameters \u00b6 Type Name Required Description Buffer, string privateKey Yes Private Key to derive keys from boolean compressed Yes Compression flag Return value \u00b6 IKeyPair fromWIF() \u00b6 public static fromWIF ( wifKey : string , network? : INetwork ) Derive the keys from the given WIF. Parameters \u00b6 Type Name Required Description string wifKey Yes Private key INetwork network No Network Return value \u00b6 IKeyPair Crypto\\Identities\\PrivateKey \u00b6 fromPassphrase() \u00b6 public static fromPassphrase ( passphrase : string ) Derive the private key for the given passphrase. Parameters \u00b6 Type Name Required Description string passphrase Yes Passphrase Return value \u00b6 string fromWIF() \u00b6 public static fromWIF ( wif : string , network? : NetworkType ) Create a private key instance from a hex string. Parameters \u00b6 Type Name Required Description string wif Yes Network WIF NetworkType network No Network Return value \u00b6 string Crypto\\Identities\\PublicKey \u00b6 fromPassphrase() \u00b6 public static fromPassphrase ( passphrase : string ) Derive the public key from the given passphrase. Parameters \u00b6 Type Name Required Description string passphrase Yes Passphrase Return value \u00b6 string fromWIF() \u00b6 public static fromWIF ( wif : string , network? : NetworkType ) Derive the public key from the given WIF. Parameters \u00b6 Type Name Required Description string wif Yes WIF to derive public key from NetworkType network No Network Return value \u00b6 string fromMultiSignatureAsset() \u00b6 public static fromMultiSignatureAsset ( asset : IMultiSignatureAsset ) Derive the public key from the given multi signature asset. Parameters \u00b6 Type Name Required Description IMultiSignatureAsset asset Yes Asset Return value \u00b6 string validate() \u00b6 public static validate ( publicKey : string , networkVersion? : number ) Validate the given public key. Parameters \u00b6 Type Name Required Description string publicKey Yes Public key number networkVersion No Network version Return value \u00b6 boolean Crypto\\Identities\\WIF \u00b6 fromPassphrase() \u00b6 public static fromPassphrase ( passphrase : string , network? : INetwork ) Derive the WIF from the given passphrase. Parameters \u00b6 Type Name Required Description string passphrase Yes Passphrase to derive WIF from INetwork network No Network wif Return value \u00b6 string fromKeys() \u00b6 public static fromKeys ( keys : IKeyPair , network? : INetwork ) Derive the WIF from the given keys. Parameters \u00b6 Type Name Required Description IKeyPair keys Yes Keys INetwork network No Network Return value \u00b6 string Crypto\\Managers\\ConfigManager \u00b6 setConfig() \u00b6 public setConfig ( config : INetworkConfig ) Set the configuration. Parameters \u00b6 Type Name Required Description INetworkConfig config Yes Network configuration object Return value \u00b6 void setFromPreset() \u00b6 public setFromPreset ( network : NetworkName ) Set the configuration from given presets. Parameters \u00b6 Type Name Required Description NetworkName network Yes Preset Return value \u00b6 void getPreset() \u00b6 public getPreset ( network : NetworkName ) Get configuration preset. Parameters \u00b6 Type Name Required Description NetworkName network Yes Preset Return value \u00b6 INetworkConfig all() \u00b6 public all () Get all configs. Return value \u00b6 INetworkConfig set() \u00b6 public set < T = any > ( key : string , value : T ) Set a value for the specified network config key. Parameters \u00b6 Type Name Required Description string key Yes Key to set T value Yes Value to set Return value \u00b6 void get() \u00b6 public get < T = any > ( key : string ) Get key. Parameters \u00b6 Type Name Required Description string key Yes Key to get Return value \u00b6 T setHeight() \u00b6 public setHeight ( value : number ) Set network height. Parameters \u00b6 Type Name Required Description number value Yes Network height Return value \u00b6 void getHeight() \u00b6 public getHeight () Get network height. Return value \u00b6 number isNewMilestone() \u00b6 public isNewMilestone ( height? : number ) Verify if current height contains a milestone. Parameters \u00b6 Type Name Required Description number height No Height to check for milestone Return value \u00b6 boolean getMilestone() \u00b6 public getMilestone ( height? : number ) Get milestone. Parameters \u00b6 Type Name Required Description number height No Network height Return value \u00b6 { [key: string]: any } getMilestones() \u00b6 public getMilestones () Get all milestones. Return value \u00b6 any Crypto\\Managers\\NetworkManager \u00b6 all() \u00b6 public static all () Get settings for all networks. Return value \u00b6 Record<NetworkName, INetworkConfig> findByName() \u00b6 public static findByName ( name : NetworkName ) Get settings for a selected network, default network is testnet. Parameters \u00b6 Type Name Required Description NetworkName name Yes Network name Return value \u00b6 INetworkConfig Crypto\\Transactions\\Deserialiser \u00b6 deserialise() \u00b6 public static deserialise ( serialised : string | Buffer , options : IDeserialiseOptions = {}) Deserialise Transaction into object. Parameters \u00b6 Type Name Required Description string, Buffer serialised Yes Serialised transaction IDeserialiseOptions options Yes Options for deserialising Return value \u00b6 ITransaction applyV1Compatibility() \u00b6 public static applyV1Compatibility ( transaction : ITransactionData ) Modify transaction to be v1 compatible. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction object Return value \u00b6 void Crypto\\Transactions\\TransactionFactory \u00b6 fromHex() \u00b6 public static fromHex ( hex : string ) Create Transaction object from HEX. Parameters \u00b6 Type Name Required Description string hex Yes HEX of transaction Return value \u00b6 ITransaction fromBytes() \u00b6 public static fromBytes ( buffer : Buffer , strict : boolean = true ) Create Transaction object from Buffer. Parameters \u00b6 Type Name Required Description Buffer buffer Yes Transaction buffer boolean strict Yes Strict creation from buffer Return value \u00b6 ITransaction fromBytesUnsafe() \u00b6 public static fromBytesUnsafe ( buffer : Buffer , id? : string ) Create Transaction object from Buffer (unsafe). NOTE: Only use this internally when it is safe to assume the buffer has already been verified. Parameters \u00b6 Type Name Required Description Buffer buffer Yes Transaction buffer string id No ID override Return value \u00b6 ITransaction fromJson() \u00b6 public static fromJson ( json : ITransactionJson ) Create Transaction object from JSON. Parameters \u00b6 Type Name Required Description ITransactionJson json Yes Transaction JSON object Return value \u00b6 ITransaction fromData() \u00b6 public static fromData ( data : ITransactionData , strict : boolean = true ) Create Transaction object from Transaction data. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction object boolean strict Yes Strict conversion Return value \u00b6 ITransaction Crypto\\Transactions\\Serialiser \u00b6 getBytes() \u00b6 public static getBytes ( transaction : ITransactionData , options : ISerialiseOptions = {}) Convert the transaction to its byte representation. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction ISerialiseOptions options Yes Options Return value \u00b6 Buffer serialise() \u00b6 public static serialise ( transaction : ITransaction , options : ISerialiseOptions = {}) Perform serialisation. Parameters \u00b6 Type Name Required Description ITransaction transaction Yes Transaction ISerialiseOptions options Yes Options Return value \u00b6 Buffer Crypto\\Transactions\\Signer \u00b6 sign() \u00b6 public static sign ( transaction : ITransactionData , keys : IKeyPair , options? : ISerialiseOptions ) Sign the given transaction with the provided keys. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys ISerialiseOptions options No Options Return value \u00b6 string secondSign() \u00b6 public static secondSign ( transaction : ITransactionData , keys : IKeyPair ) Second sign the given transaction with the provided keys. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys Return value \u00b6 string multiSign() \u00b6 public static multiSign ( transaction : ITransactionData , keys : IKeyPair , index : number = - 1 ) Multi sign the given transaction with the provided keys. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys number index Yes Index Return value \u00b6 string Crypto\\Transactions\\Utils \u00b6 toBytes() \u00b6 public static toBytes ( data : ITransactionData ) Convert Transaction object to Buffer. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction object Return value \u00b6 Buffer toHash() \u00b6 public static toHash ( transaction : ITransactionData , options? : ISerialieOptions ) Convert Transaction object to Hash. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction object ISerialiseOptions options No Serialisation options for generating hash Return value \u00b6 Buffer getId() \u00b6 public static getId ( transaction : ITransactionData , options : ISerialiseOptions = {}) Get Transaction ID of Transaction object. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction object ISerialiseOptions options Yes Serialisation options for generating hash Return value \u00b6 string Crypto\\Transactions\\Verifier \u00b6 verify() \u00b6 public static verify ( data : ITransactionData ) Verify transaction. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction object Return value \u00b6 boolean verifySecondSignature() \u00b6 public static verifySecondSignature ( transaction : ITransactionData , publicKey : string ) Verify second signature. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction object string publicKey Yes Public key Return value \u00b6 boolean verifySignatures() \u00b6 public static verifySignatures ( transaction : ITransactionData , multiSignature : IMultiSignatureAsset ) Verify the signatures of a Transaction object. Parameters \u00b6 Type Name Required Description ITransactionData transaction Yes Transaction object IMultiSignatureAsset multiSignature Yes Asset for Multi-Signature wallets/transactions Return value \u00b6 boolean verifyHash() \u00b6 public static verifyHash ( data : ITransactionData ) Verify transaction hash. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction Return value \u00b6 boolean verifySchema() \u00b6 public static verifySchema ( data : ITransactionData , strict : boolean = true ) Verify transaction schema. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction boolean strict Yes Strict flag Return value \u00b6 ISchemaValidationResult Crypto\\Transactions\\Builders\\BuilderFactory \u00b6 transfer() \u00b6 public static transfer () Initiate a Transfer transaction type. Return value \u00b6 TransferBuilder secondSignature() \u00b6 public static secondSignature () Initiate a Second Signature transaction type. Return value \u00b6 SecondSignatureBuilder delegateRegistration() \u00b6 public static delegateRegistration () Initiate a Delegate Resignation transaction type. Return value \u00b6 DelegateRegistrationBuilder vote() \u00b6 public static vote () Initiate a Vote transaction type. Return value \u00b6 VoteBuilder multiSignature() \u00b6 public static multiSignature () Initiate a Multi-Signature transaction type. Return value \u00b6 MultiSignatureBuilder ipfs() \u00b6 public static ipfs () Initiate an IPFS transaction type. Return value \u00b6 IPFSBuilder multiPayment() \u00b6 public static multiPayment () Initiate a Multi-Payment transaction type. Return value \u00b6 MultiPaymentBuilder delegateResignation() \u00b6 public static delegateResignation () Initiate a Delegate Resignation transaction type. Return value \u00b6 DelegateResignationBuilder htlcLock() \u00b6 public static htlcLock () Initiate a HTLC Lock transaction type. Return value \u00b6 HtlcLockBuilder htlcClaim() \u00b6 public static htlcClaim () Initiate a HTLC Claim transaction type. Return value \u00b6 HtlcClaimBuilder htlcRefund() \u00b6 public static htlcRefund () Initiate a HTLC Refund transaction type. Return value \u00b6 HtlcRefundBuilder Crypto\\Transactions\\Builders\\Transactions\\DelegateRegistrationBuilder \u00b6 usernameAsset() \u00b6 public usernameAsset ( username : string ) Set the username to assign. Parameters \u00b6 Type Name Required Description string username Yes Delegate username Return value \u00b6 DelegateRegistrationBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\DelegateResignationBuilder \u00b6 getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\HtlcClaimBuilder \u00b6 htlcClaimAsset() \u00b6 public htlcClaimAsset ( claimAsset : IHtlcClaimAsset ) Specify the HTLC Claim asset data for the Transaction. Parameters \u00b6 Type Name Required Description IHtlcClaimAsset claimAsset Yes Asset for a HTLC Claim Return value \u00b6 HtlcClaimBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\HtlcLockBuilder \u00b6 htlcLockAsset() \u00b6 public htlcLockAsset ( lockAsset : IHtlcLockAsset ) Specify the HTLC Lock asset data for the Transaction. Parameters \u00b6 Type Name Required Description IHtlcLockAsset lockAsset Yes Asset for a HTLC Lock Return value \u00b6 HtlcLockBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\HtlcRefundBuilder \u00b6 htlcRefundAsset() \u00b6 public htlcRefundAsset ( refundAsset : IHtlcRefundAsset ) Specify the HTLC Refund asset data for the Transaction. Parameters \u00b6 Type Name Required Description IHtlcRefundAsset refundAsset Yes Asset for a HTLC Refund Return value \u00b6 HtlcRefundBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\IPFSBuilder \u00b6 ipfsAsset() \u00b6 public ipfsAsset ( ipfsId : string ) Set IPFS asset. Parameters \u00b6 Type Name Required Description string ipfsId Yes IPFS ID Return value \u00b6 IPFSBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\MultiPaymentBuilder \u00b6 addPayment() \u00b6 public addPayment ( recipientId : string , amount : string ) Add a new payment to the collection. Parameters \u00b6 Type Name Required Description string recipientId Yes Recipient identifier string amount Yes Transaction amount Return value \u00b6 MultiPaymentBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\MultiSignatureBuilder \u00b6 participant() \u00b6 public participant ( publicKey : string ) Add participant to multi signature transaction. Parameters \u00b6 Type Name Required Description string publicKey Yes Public key Return value \u00b6 MultiSignatureBuilder min() \u00b6 public min ( min : number ) Set the minimum required signatures. Parameters \u00b6 Type Name Required Description number min Yes Minimum required signatures Return value \u00b6 MultiSignatureBuilder multiSignatureAsset() \u00b6 public multiSignatureAsset ( multiSignature : IMultiSignatureAsset ) Derive the address from the given multi signature asset. Parameters \u00b6 Type Name Required Description IMultiSignatureAsset multiSignature Yes Multi signature asset Return value \u00b6 MultiSignatureBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\SecondSignatureBuilder \u00b6 signatureAsset() \u00b6 public signatureAsset ( secondPassphrase : string ) Specify the Second Signature asset data for the Transaction. Parameters \u00b6 Type Name Required Description string secondPassphrase Yes Asset for a Second Signature Return value \u00b6 SecondSignatureBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\TransferBuilder \u00b6 expiration() \u00b6 public expiration ( expiration : number ) Set Transfer expiration. Parameters \u00b6 Type Name Required Description number expiration Yes The block-height or time when the transaction should expire Return value \u00b6 TransferBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Builders\\Transactions\\VoteBuilder \u00b6 votesAsset() \u00b6 public votesAsset ( votes : { [ vote : string ] : number }) Specify the Vote asset data for the Transaction. Parameters \u00b6 Type Name Required Description string votes Yes Asset for a Vote Return value \u00b6 VoteBuilder getStruct() \u00b6 public getStruct () Get transaction structure. Return value \u00b6 ITransactionData Crypto\\Transactions\\Types\\DelegateRegistrationTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"delegate registration\" data. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"delegate registration\" data. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer Return value \u00b6 void Crypto\\Transactions\\Types\\DelegateResignationTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"delegate resignation\" data. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"delegate resignation\" data. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer Return value \u00b6 void Crypto\\Transactions\\Types\\TransactionTypeFactory \u00b6 initialise() \u00b6 public static initialise ( transactionTypes : Map < InternalTransactionType , TransactionConstructor > ) Initialise new transaction types factory. Parameters \u00b6 Type Name Required Description Map transactionTypes Yes INSERT_DESCRIPTION create() \u00b6 public static create ( data : ITransactionData ) Create new transaction type. Parameters \u00b6 Type Name Required Description ITransactionData data Yes Transaction object Return value \u00b6 ITransaction get() \u00b6 public static get ( type : number , typeGroup? : number ) Get a transaction type. Parameters \u00b6 Type Name Required Description number type Yes Transaction type number typeGroup No Transaction group Return value \u00b6 TransactionConstructor Crypto\\Transactions\\Types\\HtlcClaimTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\HtlcLockTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean hasVendorField() \u00b6 public hasVendorField () Verify if the transaction contains a vendorfield. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\HtlcRefundTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\InternalTransactionType \u00b6 from() \u00b6 public static from ( type : number , typeGroup? : number ) Create new internal transaction type from existing type. Parameters \u00b6 Type Name Required Description number type Yes Transaction type number typeGroup No Transaction group Return value \u00b6 InternalTransactionType toString() \u00b6 public toString () Convert transaction type to a group/type string representation (E.g. 1/0) Return value \u00b6 string Crypto\\Transactions\\Types\\IpfsTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"IPFS\" data. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"IPFS\" data. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer Return value \u00b6 void Crypto\\Transactions\\Types\\MultiPaymentTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean hasVendorField() \u00b6 public hasVendorField () Verify if the transaction contains a vendorfield. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\MultiSignatureRegistrationTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema staticFee() \u00b6 public static staticFee ( feeContext : { height? : number ; data? : ITransactionData } = {}) Get the static fee for the Multi-Signature transaction type. Parameters \u00b6 Type Name Required Description object feeContext Yes Context for determining the static fee Return value \u00b6 BigNumber verify() \u00b6 public verify () Verify transaction. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\SecondSignatureRegistrationTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\TransferTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema hasVendorField() \u00b6 public hasVendorField () Verify if the transaction contains a vendorfield. Return value \u00b6 boolean serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Perform serialisation. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Perform deserialisation. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Transactions\\Types\\VoteTransaction \u00b6 getSchema() \u00b6 public static getSchema () Get transaction schema. Return value \u00b6 schemas.TransactionSchema serialise() \u00b6 public serialise ( options? : ISerialiseOptions ) Perform serialisation. Parameters \u00b6 Type Name Required Description ISerialiseOptions options No Serialisation options Return value \u00b6 ByteBuffer deserialise() \u00b6 public deserialise ( buf : ByteBuffer ) Perform deserialisation. Parameters \u00b6 Type Name Required Description ByteBuffer buf Yes Buffer to deserialise Return value \u00b6 void Crypto\\Validation\\Validator \u00b6 getInstance() \u00b6 public getInstance () Get an instance of the Validator object. Return value \u00b6 Ajv.Ajv validate() \u00b6 public validate < T = any > ( schemaKeyRef : string | boolean | object , data : T ) Validate a schema object. Parameters \u00b6 Type Name Required Description string, boolean, object schemaKeyRef Yes Schema to validate against T data Yes Data to validate Return value \u00b6 ISchemaValidationResult<T> validateException() \u00b6 public validateException < T = any > ( schemaKeyRef : string | boolean | object , data : T ) Validate a schema object for an exception. Parameters \u00b6 Type Name Required Description string, boolean, object schemaKeyRef Yes Schema to validate against T data Yes Data to validate Return value \u00b6 ISchemaValidationResult<T> addFormat() \u00b6 public addFormat ( name : string , format : Ajv.FormatDefinition ) Add formatting definition used for validation. Parameters \u00b6 Type Name Required Description string name Yes Name of definition Ajv format Yes Format definition Return value \u00b6 void addKeyword() \u00b6 public addKeyword ( keyword : string , definition : Ajv.KeywordDefinition ) Add keyword definition used for validation. Parameters \u00b6 Type Name Required Description string keyword Yes Name of definition Ajv definition Yes Keyword definition Return value \u00b6 void addSchema() \u00b6 public addSchema ( schema : object | object [], key? : string ) Add schema used for validation. Parameters \u00b6 Type Name Required Description object schema Yes Name of schema string key No Schema Return value \u00b6 void removeKeyword() \u00b6 public removeKeyword ( keyword : string ) Remove keyword definition from validation. Parameters \u00b6 Type Name Required Description string keyword Yes Name of definition Return value \u00b6 void removeSchema() \u00b6 public removeSchema ( schemaKeyRef : string | boolean | object | RegExp ) Remove schema from validation. Parameters \u00b6 Type Name Required Description string, boolean, object, RegExp schemaKeyRef Yes Schema to remove Return value \u00b6 void extendTransaction() \u00b6 public extendTransaction ( schema : TransactionSchema , remove? : boolean ) Extend a Transaction's schema for validation. Parameters \u00b6 Type Name Required Description TransactionSchema schema Yes Schema of transaction to extend boolean remove No Whether to remove the schema","title":"API Documentation"},{"location":"sdk/typescript/crypto/api-documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoblocksblockfactory","text":"","title":"Crypto\\Blocks\\BlockFactory"},{"location":"sdk/typescript/crypto/api-documentation/#fromhex","text":"public static fromHex ( hex : string ) Generate Block object from HEX.","title":"fromHex()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters","text":"Type Name Required Description string hex Yes Block content","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value","text":"IBlock","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frombytes","text":"public static fromBytes ( buffer : Buffer ) Generate Block object from a Buffer.","title":"fromBytes()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_1","text":"Type Name Required Description Buffer buffer Yes Block content","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_1","text":"IBlock","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromjson","text":"public static fromJson ( json : IBlockJson ) Generate Block object from JSON.","title":"fromJson()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_2","text":"Type Name Required Description IBlockJson json Yes Block content","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_2","text":"IBlock","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromdata","text":"public static fromData ( data : IBlockData , options : { deserialiseTransactionsUnchecked? : boolean } = {}) Generate Block object from Block data.","title":"fromData()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_3","text":"Type Name Required Description IBlockData data Yes Block content object options Yes Options used for parsing block data","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_3","text":"IBlock","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoblocksserialiser","text":"","title":"Crypto\\Blocks\\Serialiser"},{"location":"sdk/typescript/crypto/api-documentation/#size","text":"public static size ( block : IBlock ) Get size of Block.","title":"size()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_4","text":"Type Name Required Description IBlock block Yes Block object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_4","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialisewithtransactions","text":"public static serialiseWithTransactions ( block : IBlockData ) Serialise Block with Transactions.","title":"serialiseWithTransactions()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_5","text":"Type Name Required Description IBlockData block Yes Block object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_5","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise","text":"public static serialise ( block : IBlockData , includeSignature : boolean = true ) Serialise Block without Transactions.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_6","text":"Type Name Required Description IBlockData block Yes Block object boolean includeSignature Yes Whether to include signature in serialisation","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_6","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptocryptohashalgorithms","text":"","title":"Crypto\\Crypto\\HashAlgorithms"},{"location":"sdk/typescript/crypto/api-documentation/#ripemd160","text":"public static ripemd160 ( buffer : Buffer | string ) Hash with RIPEMD-160.","title":"ripemd160()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_7","text":"Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_7","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#sha1","text":"public static sha1 ( buffer : Buffer | string ) Hash with SHA-1.","title":"sha1()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_8","text":"Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_8","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#sha256","text":"public static sha256 ( buffer : Buffer | string | Buffer []) Hash with SHA-256.","title":"sha256()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_9","text":"Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_9","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#hash160","text":"public static hash160 ( buffer : Buffer | string ) Hash with Hash160.","title":"hash160()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_10","text":"Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_10","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#hash256","text":"public static hash256 ( buffer : Buffer | string ) Hash with Hash256.","title":"hash256()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_11","text":"Type Name Required Description Buffer, string buffer Yes String or Buffer to generate hash for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_11","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptocryptohash","text":"","title":"Crypto\\Crypto\\Hash"},{"location":"sdk/typescript/crypto/api-documentation/#signschnorr","text":"public static signSchnorr ( hash : Buffer , keys : IKeyPair ) Sign hash with Schnorr.","title":"signSchnorr()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_12","text":"Type Name Required Description Buffer hash Yes Hash to sign IKeyPair keys Yes Keys to sign hash with","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_12","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verifyschnorr","text":"public static verifySchnorr ( hash : Buffer , signature : Buffer | string , publicKey : Buffer | string ) Verify Schnorr signature.","title":"verifySchnorr()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_13","text":"Type Name Required Description Buffer hash Yes Hash to verify Buffer, string signature Yes Signature of hash Buffer, string publicKey Yes Public key of wallet which signed the hash","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_13","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptocryptohdwallet","text":"","title":"Crypto\\Crypto\\HDWallet"},{"location":"sdk/typescript/crypto/api-documentation/#frommnemonic","text":"public static fromMnemonic ( mnemonic : string , passphrase? : string ) Generate BIP32 Wallet from mnemonic.","title":"fromMnemonic()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_14","text":"Type Name Required Description string mnemonic Yes INSERT_DESCRIPTION string passphrase No INSERT_DESCRIPTION","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_14","text":"BIP32Interface","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromkeys","text":"public static fromKeys ( keys : IKeyPair , chainCode : Buffer ) Generate BIP32 Wallet from KeyPair.","title":"fromKeys()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_15","text":"Type Name Required Description IKeyPair keys Yes INSERT_DESCRIPTION Buffer chainCode Yes INSERT_DESCRIPTION","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_15","text":"BIP32Interface","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getkeys","text":"public static getKeys ( node : BIP32Interface ) Get keys for BIP32 Wallet.","title":"getKeys()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_16","text":"Type Name Required Description BIP32Interface node Yes BIP32 Wallet to get keys for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_16","text":"IKeyPair","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deriveslip44","text":"public static deriveSlip44 ( root : BIP32Interface , hardened : boolean = true ) Determine Slip44 for BIP32 Wallet.","title":"deriveSlip44()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_17","text":"Type Name Required Description BIP32Interface root Yes BIP32 Wallet to determine Slip44 for boolean hardened Yes INSERT_DESCRIPTION","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_17","text":"BIP32Interface","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#derivenetwork","text":"public static deriveNetwork ( root : BIP32Interface ) Determine Network for BIP32 Wallet.","title":"deriveNetwork()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_18","text":"Type Name Required Description BIP32Interface root Yes BIP32 Wallet to determine network for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_18","text":"BIP32Interface","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptocryptomessage","text":"","title":"Crypto\\Crypto\\Message"},{"location":"sdk/typescript/crypto/api-documentation/#sign","text":"public static sign ( message : string , passphrase : string ) Sign a message using the given passphrase.","title":"sign()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_19","text":"Type Name Required Description string message Yes Message string passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_19","text":"IMessage","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#signwithwif","text":"public static signWithWif ( message : string , wif : string , network? : INetwork ) Sign a message using the given WIF string.","title":"signWithWif()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_20","text":"Type Name Required Description string message Yes Message string wif Yes Network WIF INetwork network No Network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_20","text":"IMessage","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify","text":"public static verify ({ message , publicKey , signature } : IMessage ) Verify the message contents","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_21","text":"Type Name Required Description IMessage object Yes Message","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_21","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptocryptoslots","text":"","title":"Crypto\\Crypto\\Slots"},{"location":"sdk/typescript/crypto/api-documentation/#gettime","text":"public static getTime ( time? : number ) Get the time diff between now and network start.","title":"getTime()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_22","text":"Type Name Required Description number time No Network start time","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_22","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#gettimeinmsuntilnextslot","text":"public static getTimeInMsUntilNextSlot () Get the time (in milliseconds) until the start of the next slot.","title":"getTimeInMsUntilNextSlot()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_23","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getslotnumber","text":"public static getSlotNumber ( epoch? : number ) Get the slot number.","title":"getSlotNumber()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_23","text":"Type Name Required Description number epoch No Epoch time","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_24","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getslottime","text":"public static getSlotTime ( slot : number ) Get the slot time.","title":"getSlotTime()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_24","text":"Type Name Required Description number slot Yes Slot","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_25","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getnextslot","text":"public static getNextSlot () Get the next slot.","title":"getNextSlot()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_26","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#isforgingallowed","text":"public static isForgingAllowed ( epoch? : number ) Verify is forging is allowed.","title":"isForgingAllowed()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_25","text":"Type Name Required Description number epoch No Epoch time","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_27","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoidentitiesaddress","text":"","title":"Crypto\\Identities\\Address"},{"location":"sdk/typescript/crypto/api-documentation/#frompassphrase","text":"public static fromPassphrase ( passphrase : string , networkVersion? : number ) Derive the address from the given passphrase.","title":"fromPassphrase()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_26","text":"Type Name Required Description string passphrase Yes Passphrase number networkVersion No Version of the network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_28","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frompublickey","text":"public static fromPublicKey ( publicKey : string , networkVersion? : number ) Derive a (multisig) address from a multi signature asset.","title":"fromPublicKey()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_27","text":"Type Name Required Description string publicKey Yes Public key number networkVersion No Version of the network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_29","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromwif","text":"public static fromWIF ( wif : string , network? : NetworkType ) Derive the address from a WIF string.","title":"fromWIF()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_28","text":"Type Name Required Description string wif Yes WIF NetworkType network No Network to generate address for","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_30","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frommultisignatureasset","text":"public static fromMultiSignatureAsset ( asset : IMultiSignatureAsset , networkVersion? : number ) Derive the address from the given multi signature asset.","title":"fromMultiSignatureAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_29","text":"Type Name Required Description IMultiSignatureAsset asset Yes Address to validate number networkVersion No Version of the network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_31","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromprivatekey","text":"public static fromPrivateKey ( privateKey , networkVersion? : number ) Derive the address from the given private key.","title":"fromPrivateKey()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_30","text":"Type Name Required Description any privateKey Yes Private key to derive address for number networkVersion No Version of the network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_32","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frombuffer","text":"public static fromBuffer ( buffer : Buffer ) Derive the address from a Buffer.","title":"fromBuffer()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_31","text":"Type Name Required Description Buffer buffer Yes Buffer to derive address from","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_33","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#tobuffer","text":"public static toBuffer ( address : string ) Convert address to a Buffer.","title":"toBuffer()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_32","text":"Type Name Required Description string address Yes Address to convert to buffer","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_34","text":"{ addressBuffer: Buffer; addressError?: string }","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#validate","text":"public static validate ( address : string , networkVersion? : number ) Validate the given address.","title":"validate()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_33","text":"Type Name Required Description string address Yes Address to validate number networkVersion No Version of the network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_35","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoidentitieskeys","text":"","title":"Crypto\\Identities\\Keys"},{"location":"sdk/typescript/crypto/api-documentation/#frompassphrase_1","text":"public static fromPassphrase ( passphrase : string , compressed : boolean = true ) Derive the keys from the given passphrase.","title":"fromPassphrase()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_34","text":"Type Name Required Description string passphrase Yes Passphrase boolean compressed Yes Compression flag","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_36","text":"IKeyPair","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromprivatekey_1","text":"public static fromPrivateKey ( privateKey : Buffer | string , compressed : boolean = true ) Derive the keys from the given private key.","title":"fromPrivateKey()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_35","text":"Type Name Required Description Buffer, string privateKey Yes Private Key to derive keys from boolean compressed Yes Compression flag","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_37","text":"IKeyPair","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromwif_1","text":"public static fromWIF ( wifKey : string , network? : INetwork ) Derive the keys from the given WIF.","title":"fromWIF()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_36","text":"Type Name Required Description string wifKey Yes Private key INetwork network No Network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_38","text":"IKeyPair","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoidentitiesprivatekey","text":"","title":"Crypto\\Identities\\PrivateKey"},{"location":"sdk/typescript/crypto/api-documentation/#frompassphrase_2","text":"public static fromPassphrase ( passphrase : string ) Derive the private key for the given passphrase.","title":"fromPassphrase()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_37","text":"Type Name Required Description string passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_39","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromwif_2","text":"public static fromWIF ( wif : string , network? : NetworkType ) Create a private key instance from a hex string.","title":"fromWIF()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_38","text":"Type Name Required Description string wif Yes Network WIF NetworkType network No Network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_40","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoidentitiespublickey","text":"","title":"Crypto\\Identities\\PublicKey"},{"location":"sdk/typescript/crypto/api-documentation/#frompassphrase_3","text":"public static fromPassphrase ( passphrase : string ) Derive the public key from the given passphrase.","title":"fromPassphrase()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_39","text":"Type Name Required Description string passphrase Yes Passphrase","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_41","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromwif_3","text":"public static fromWIF ( wif : string , network? : NetworkType ) Derive the public key from the given WIF.","title":"fromWIF()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_40","text":"Type Name Required Description string wif Yes WIF to derive public key from NetworkType network No Network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_42","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frommultisignatureasset_1","text":"public static fromMultiSignatureAsset ( asset : IMultiSignatureAsset ) Derive the public key from the given multi signature asset.","title":"fromMultiSignatureAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_41","text":"Type Name Required Description IMultiSignatureAsset asset Yes Asset","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_43","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#validate_1","text":"public static validate ( publicKey : string , networkVersion? : number ) Validate the given public key.","title":"validate()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_42","text":"Type Name Required Description string publicKey Yes Public key number networkVersion No Network version","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_44","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptoidentitieswif","text":"","title":"Crypto\\Identities\\WIF"},{"location":"sdk/typescript/crypto/api-documentation/#frompassphrase_4","text":"public static fromPassphrase ( passphrase : string , network? : INetwork ) Derive the WIF from the given passphrase.","title":"fromPassphrase()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_43","text":"Type Name Required Description string passphrase Yes Passphrase to derive WIF from INetwork network No Network wif","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_45","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromkeys_1","text":"public static fromKeys ( keys : IKeyPair , network? : INetwork ) Derive the WIF from the given keys.","title":"fromKeys()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_44","text":"Type Name Required Description IKeyPair keys Yes Keys INetwork network No Network","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_46","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptomanagersconfigmanager","text":"","title":"Crypto\\Managers\\ConfigManager"},{"location":"sdk/typescript/crypto/api-documentation/#setconfig","text":"public setConfig ( config : INetworkConfig ) Set the configuration.","title":"setConfig()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_45","text":"Type Name Required Description INetworkConfig config Yes Network configuration object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_47","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#setfrompreset","text":"public setFromPreset ( network : NetworkName ) Set the configuration from given presets.","title":"setFromPreset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_46","text":"Type Name Required Description NetworkName network Yes Preset","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_48","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getpreset","text":"public getPreset ( network : NetworkName ) Get configuration preset.","title":"getPreset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_47","text":"Type Name Required Description NetworkName network Yes Preset","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_49","text":"INetworkConfig","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#all","text":"public all () Get all configs.","title":"all()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_50","text":"INetworkConfig","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#set","text":"public set < T = any > ( key : string , value : T ) Set a value for the specified network config key.","title":"set()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_48","text":"Type Name Required Description string key Yes Key to set T value Yes Value to set","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_51","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#get","text":"public get < T = any > ( key : string ) Get key.","title":"get()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_49","text":"Type Name Required Description string key Yes Key to get","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_52","text":"T","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#setheight","text":"public setHeight ( value : number ) Set network height.","title":"setHeight()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_50","text":"Type Name Required Description number value Yes Network height","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_53","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getheight","text":"public getHeight () Get network height.","title":"getHeight()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_54","text":"number","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#isnewmilestone","text":"public isNewMilestone ( height? : number ) Verify if current height contains a milestone.","title":"isNewMilestone()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_51","text":"Type Name Required Description number height No Height to check for milestone","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_55","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getmilestone","text":"public getMilestone ( height? : number ) Get milestone.","title":"getMilestone()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_52","text":"Type Name Required Description number height No Network height","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_56","text":"{ [key: string]: any }","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getmilestones","text":"public getMilestones () Get all milestones.","title":"getMilestones()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_57","text":"any","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptomanagersnetworkmanager","text":"","title":"Crypto\\Managers\\NetworkManager"},{"location":"sdk/typescript/crypto/api-documentation/#all_1","text":"public static all () Get settings for all networks.","title":"all()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_58","text":"Record<NetworkName, INetworkConfig>","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#findbyname","text":"public static findByName ( name : NetworkName ) Get settings for a selected network, default network is testnet.","title":"findByName()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_53","text":"Type Name Required Description NetworkName name Yes Network name","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_59","text":"INetworkConfig","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsdeserialiser","text":"","title":"Crypto\\Transactions\\Deserialiser"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise","text":"public static deserialise ( serialised : string | Buffer , options : IDeserialiseOptions = {}) Deserialise Transaction into object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_54","text":"Type Name Required Description string, Buffer serialised Yes Serialised transaction IDeserialiseOptions options Yes Options for deserialising","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_60","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#applyv1compatibility","text":"public static applyV1Compatibility ( transaction : ITransactionData ) Modify transaction to be v1 compatible.","title":"applyV1Compatibility()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_55","text":"Type Name Required Description ITransactionData transaction Yes Transaction object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_61","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstransactionfactory","text":"","title":"Crypto\\Transactions\\TransactionFactory"},{"location":"sdk/typescript/crypto/api-documentation/#fromhex_1","text":"public static fromHex ( hex : string ) Create Transaction object from HEX.","title":"fromHex()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_56","text":"Type Name Required Description string hex Yes HEX of transaction","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_62","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frombytes_1","text":"public static fromBytes ( buffer : Buffer , strict : boolean = true ) Create Transaction object from Buffer.","title":"fromBytes()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_57","text":"Type Name Required Description Buffer buffer Yes Transaction buffer boolean strict Yes Strict creation from buffer","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_63","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#frombytesunsafe","text":"public static fromBytesUnsafe ( buffer : Buffer , id? : string ) Create Transaction object from Buffer (unsafe). NOTE: Only use this internally when it is safe to assume the buffer has already been verified.","title":"fromBytesUnsafe()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_58","text":"Type Name Required Description Buffer buffer Yes Transaction buffer string id No ID override","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_64","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromjson_1","text":"public static fromJson ( json : ITransactionJson ) Create Transaction object from JSON.","title":"fromJson()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_59","text":"Type Name Required Description ITransactionJson json Yes Transaction JSON object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_65","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#fromdata_1","text":"public static fromData ( data : ITransactionData , strict : boolean = true ) Create Transaction object from Transaction data.","title":"fromData()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_60","text":"Type Name Required Description ITransactionData data Yes Transaction object boolean strict Yes Strict conversion","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_66","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsserialiser","text":"","title":"Crypto\\Transactions\\Serialiser"},{"location":"sdk/typescript/crypto/api-documentation/#getbytes","text":"public static getBytes ( transaction : ITransactionData , options : ISerialiseOptions = {}) Convert the transaction to its byte representation.","title":"getBytes()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_61","text":"Type Name Required Description ITransactionData transaction Yes Transaction ISerialiseOptions options Yes Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_67","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_1","text":"public static serialise ( transaction : ITransaction , options : ISerialiseOptions = {}) Perform serialisation.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_62","text":"Type Name Required Description ITransaction transaction Yes Transaction ISerialiseOptions options Yes Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_68","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionssigner","text":"","title":"Crypto\\Transactions\\Signer"},{"location":"sdk/typescript/crypto/api-documentation/#sign_1","text":"public static sign ( transaction : ITransactionData , keys : IKeyPair , options? : ISerialiseOptions ) Sign the given transaction with the provided keys.","title":"sign()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_63","text":"Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys ISerialiseOptions options No Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_69","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#secondsign","text":"public static secondSign ( transaction : ITransactionData , keys : IKeyPair ) Second sign the given transaction with the provided keys.","title":"secondSign()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_64","text":"Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_70","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#multisign","text":"public static multiSign ( transaction : ITransactionData , keys : IKeyPair , index : number = - 1 ) Multi sign the given transaction with the provided keys.","title":"multiSign()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_65","text":"Type Name Required Description ITransactionData transaction Yes Transaction IKeyPair keys Yes Keys number index Yes Index","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_71","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsutils","text":"","title":"Crypto\\Transactions\\Utils"},{"location":"sdk/typescript/crypto/api-documentation/#tobytes","text":"public static toBytes ( data : ITransactionData ) Convert Transaction object to Buffer.","title":"toBytes()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_66","text":"Type Name Required Description ITransactionData data Yes Transaction object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_72","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#tohash","text":"public static toHash ( transaction : ITransactionData , options? : ISerialieOptions ) Convert Transaction object to Hash.","title":"toHash()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_67","text":"Type Name Required Description ITransactionData transaction Yes Transaction object ISerialiseOptions options No Serialisation options for generating hash","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_73","text":"Buffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getid","text":"public static getId ( transaction : ITransactionData , options : ISerialiseOptions = {}) Get Transaction ID of Transaction object.","title":"getId()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_68","text":"Type Name Required Description ITransactionData transaction Yes Transaction object ISerialiseOptions options Yes Serialisation options for generating hash","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_74","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsverifier","text":"","title":"Crypto\\Transactions\\Verifier"},{"location":"sdk/typescript/crypto/api-documentation/#verify_1","text":"public static verify ( data : ITransactionData ) Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_69","text":"Type Name Required Description ITransactionData data Yes Transaction object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_75","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verifysecondsignature","text":"public static verifySecondSignature ( transaction : ITransactionData , publicKey : string ) Verify second signature.","title":"verifySecondSignature()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_70","text":"Type Name Required Description ITransactionData transaction Yes Transaction object string publicKey Yes Public key","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_76","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verifysignatures","text":"public static verifySignatures ( transaction : ITransactionData , multiSignature : IMultiSignatureAsset ) Verify the signatures of a Transaction object.","title":"verifySignatures()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_71","text":"Type Name Required Description ITransactionData transaction Yes Transaction object IMultiSignatureAsset multiSignature Yes Asset for Multi-Signature wallets/transactions","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_77","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verifyhash","text":"public static verifyHash ( data : ITransactionData ) Verify transaction hash.","title":"verifyHash()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_72","text":"Type Name Required Description ITransactionData data Yes Transaction","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_78","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verifyschema","text":"public static verifySchema ( data : ITransactionData , strict : boolean = true ) Verify transaction schema.","title":"verifySchema()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_73","text":"Type Name Required Description ITransactionData data Yes Transaction boolean strict Yes Strict flag","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_79","text":"ISchemaValidationResult","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuildersbuilderfactory","text":"","title":"Crypto\\Transactions\\Builders\\BuilderFactory"},{"location":"sdk/typescript/crypto/api-documentation/#transfer","text":"public static transfer () Initiate a Transfer transaction type.","title":"transfer()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_80","text":"TransferBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#secondsignature","text":"public static secondSignature () Initiate a Second Signature transaction type.","title":"secondSignature()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_81","text":"SecondSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#delegateregistration","text":"public static delegateRegistration () Initiate a Delegate Resignation transaction type.","title":"delegateRegistration()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_82","text":"DelegateRegistrationBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#vote","text":"public static vote () Initiate a Vote transaction type.","title":"vote()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_83","text":"VoteBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#multisignature","text":"public static multiSignature () Initiate a Multi-Signature transaction type.","title":"multiSignature()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_84","text":"MultiSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#ipfs","text":"public static ipfs () Initiate an IPFS transaction type.","title":"ipfs()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_85","text":"IPFSBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#multipayment","text":"public static multiPayment () Initiate a Multi-Payment transaction type.","title":"multiPayment()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_86","text":"MultiPaymentBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#delegateresignation","text":"public static delegateResignation () Initiate a Delegate Resignation transaction type.","title":"delegateResignation()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_87","text":"DelegateResignationBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#htlclock","text":"public static htlcLock () Initiate a HTLC Lock transaction type.","title":"htlcLock()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_88","text":"HtlcLockBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#htlcclaim","text":"public static htlcClaim () Initiate a HTLC Claim transaction type.","title":"htlcClaim()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_89","text":"HtlcClaimBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#htlcrefund","text":"public static htlcRefund () Initiate a HTLC Refund transaction type.","title":"htlcRefund()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_90","text":"HtlcRefundBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsdelegateregistrationbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\DelegateRegistrationBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#usernameasset","text":"public usernameAsset ( username : string ) Set the username to assign.","title":"usernameAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_74","text":"Type Name Required Description string username Yes Delegate username","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_91","text":"DelegateRegistrationBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_92","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsdelegateresignationbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\DelegateResignationBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_1","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_93","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionshtlcclaimbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\HtlcClaimBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#htlcclaimasset","text":"public htlcClaimAsset ( claimAsset : IHtlcClaimAsset ) Specify the HTLC Claim asset data for the Transaction.","title":"htlcClaimAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_75","text":"Type Name Required Description IHtlcClaimAsset claimAsset Yes Asset for a HTLC Claim","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_94","text":"HtlcClaimBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_2","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_95","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionshtlclockbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\HtlcLockBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#htlclockasset","text":"public htlcLockAsset ( lockAsset : IHtlcLockAsset ) Specify the HTLC Lock asset data for the Transaction.","title":"htlcLockAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_76","text":"Type Name Required Description IHtlcLockAsset lockAsset Yes Asset for a HTLC Lock","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_96","text":"HtlcLockBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_3","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_97","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionshtlcrefundbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\HtlcRefundBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#htlcrefundasset","text":"public htlcRefundAsset ( refundAsset : IHtlcRefundAsset ) Specify the HTLC Refund asset data for the Transaction.","title":"htlcRefundAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_77","text":"Type Name Required Description IHtlcRefundAsset refundAsset Yes Asset for a HTLC Refund","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_98","text":"HtlcRefundBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_4","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_99","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsipfsbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\IPFSBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#ipfsasset","text":"public ipfsAsset ( ipfsId : string ) Set IPFS asset.","title":"ipfsAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_78","text":"Type Name Required Description string ipfsId Yes IPFS ID","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_100","text":"IPFSBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_5","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_101","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsmultipaymentbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\MultiPaymentBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#addpayment","text":"public addPayment ( recipientId : string , amount : string ) Add a new payment to the collection.","title":"addPayment()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_79","text":"Type Name Required Description string recipientId Yes Recipient identifier string amount Yes Transaction amount","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_102","text":"MultiPaymentBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_6","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_103","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsmultisignaturebuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\MultiSignatureBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#participant","text":"public participant ( publicKey : string ) Add participant to multi signature transaction.","title":"participant()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_80","text":"Type Name Required Description string publicKey Yes Public key","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_104","text":"MultiSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#min","text":"public min ( min : number ) Set the minimum required signatures.","title":"min()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_81","text":"Type Name Required Description number min Yes Minimum required signatures","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_105","text":"MultiSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#multisignatureasset","text":"public multiSignatureAsset ( multiSignature : IMultiSignatureAsset ) Derive the address from the given multi signature asset.","title":"multiSignatureAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_82","text":"Type Name Required Description IMultiSignatureAsset multiSignature Yes Multi signature asset","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_106","text":"MultiSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_7","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_107","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionssecondsignaturebuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\SecondSignatureBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#signatureasset","text":"public signatureAsset ( secondPassphrase : string ) Specify the Second Signature asset data for the Transaction.","title":"signatureAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_83","text":"Type Name Required Description string secondPassphrase Yes Asset for a Second Signature","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_108","text":"SecondSignatureBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_8","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_109","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionstransferbuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\TransferBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#expiration","text":"public expiration ( expiration : number ) Set Transfer expiration.","title":"expiration()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_84","text":"Type Name Required Description number expiration Yes The block-height or time when the transaction should expire","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_110","text":"TransferBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_9","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_111","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionsbuilderstransactionsvotebuilder","text":"","title":"Crypto\\Transactions\\Builders\\Transactions\\VoteBuilder"},{"location":"sdk/typescript/crypto/api-documentation/#votesasset","text":"public votesAsset ( votes : { [ vote : string ] : number }) Specify the Vote asset data for the Transaction.","title":"votesAsset()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_85","text":"Type Name Required Description string votes Yes Asset for a Vote","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_112","text":"VoteBuilder","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#getstruct_10","text":"public getStruct () Get transaction structure.","title":"getStruct()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_113","text":"ITransactionData","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesdelegateregistrationtransaction","text":"","title":"Crypto\\Transactions\\Types\\DelegateRegistrationTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_114","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_2","text":"public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"delegate registration\" data.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_86","text":"Type Name Required Description ISerialiseOptions options No Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_115","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_1","text":"public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"delegate registration\" data.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_87","text":"Type Name Required Description ByteBuffer buf Yes Buffer","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_116","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesdelegateresignationtransaction","text":"","title":"Crypto\\Transactions\\Types\\DelegateResignationTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_1","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_117","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_2","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_118","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_3","text":"public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"delegate resignation\" data.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_88","text":"Type Name Required Description ISerialiseOptions options No Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_119","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_2","text":"public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"delegate resignation\" data.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_89","text":"Type Name Required Description ByteBuffer buf Yes Buffer","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_120","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypestransactiontypefactory","text":"","title":"Crypto\\Transactions\\Types\\TransactionTypeFactory"},{"location":"sdk/typescript/crypto/api-documentation/#initialise","text":"public static initialise ( transactionTypes : Map < InternalTransactionType , TransactionConstructor > ) Initialise new transaction types factory.","title":"initialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_90","text":"Type Name Required Description Map transactionTypes Yes INSERT_DESCRIPTION","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#create","text":"public static create ( data : ITransactionData ) Create new transaction type.","title":"create()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_91","text":"Type Name Required Description ITransactionData data Yes Transaction object","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_121","text":"ITransaction","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#get_1","text":"public static get ( type : number , typeGroup? : number ) Get a transaction type.","title":"get()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_92","text":"Type Name Required Description number type Yes Transaction type number typeGroup No Transaction group","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_122","text":"TransactionConstructor","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypeshtlcclaimtransaction","text":"","title":"Crypto\\Transactions\\Types\\HtlcClaimTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_2","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_123","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_3","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_124","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_4","text":"public serialise ( options? : ISerialiseOptions ) Serialise Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_93","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_125","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_3","text":"public deserialise ( buf : ByteBuffer ) Deserialise into Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_94","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_126","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypeshtlclocktransaction","text":"","title":"Crypto\\Transactions\\Types\\HtlcLockTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_3","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_127","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_4","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_128","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#hasvendorfield","text":"public hasVendorField () Verify if the transaction contains a vendorfield.","title":"hasVendorField()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_129","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_5","text":"public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_95","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_130","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_4","text":"public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_96","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_131","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypeshtlcrefundtransaction","text":"","title":"Crypto\\Transactions\\Types\\HtlcRefundTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_4","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_132","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_5","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_133","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_6","text":"public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_97","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_134","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_5","text":"public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_98","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_135","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesinternaltransactiontype","text":"","title":"Crypto\\Transactions\\Types\\InternalTransactionType"},{"location":"sdk/typescript/crypto/api-documentation/#from","text":"public static from ( type : number , typeGroup? : number ) Create new internal transaction type from existing type.","title":"from()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_99","text":"Type Name Required Description number type Yes Transaction type number typeGroup No Transaction group","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_136","text":"InternalTransactionType","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#tostring","text":"public toString () Convert transaction type to a group/type string representation (E.g. 1/0)","title":"toString()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_137","text":"string","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesipfstransaction","text":"","title":"Crypto\\Transactions\\Types\\IpfsTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_5","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_138","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_6","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_139","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_7","text":"public serialise ( options? : ISerialiseOptions ) Handle the serialisation of \"IPFS\" data.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_100","text":"Type Name Required Description ISerialiseOptions options No Options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_140","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_6","text":"public deserialise ( buf : ByteBuffer ) Handle the deserialisation of \"IPFS\" data.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_101","text":"Type Name Required Description ByteBuffer buf Yes Buffer","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_141","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesmultipaymenttransaction","text":"","title":"Crypto\\Transactions\\Types\\MultiPaymentTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_6","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_142","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_7","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_143","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#hasvendorfield_1","text":"public hasVendorField () Verify if the transaction contains a vendorfield.","title":"hasVendorField()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_144","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_8","text":"public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_102","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_145","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_7","text":"public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_103","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_146","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesmultisignatureregistrationtransaction","text":"","title":"Crypto\\Transactions\\Types\\MultiSignatureRegistrationTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_7","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_147","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#staticfee","text":"public static staticFee ( feeContext : { height? : number ; data? : ITransactionData } = {}) Get the static fee for the Multi-Signature transaction type.","title":"staticFee()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_104","text":"Type Name Required Description object feeContext Yes Context for determining the static fee","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_148","text":"BigNumber","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#verify_8","text":"public verify () Verify transaction.","title":"verify()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_149","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_9","text":"public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_105","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_150","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_8","text":"public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_106","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_151","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypessecondsignatureregistrationtransaction","text":"","title":"Crypto\\Transactions\\Types\\SecondSignatureRegistrationTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_8","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_152","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_10","text":"public serialise ( options? : ISerialiseOptions ) Serialise a Transaction object.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_107","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_153","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_9","text":"public deserialise ( buf : ByteBuffer ) Deserialise into a Transaction object.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_108","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_154","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypestransfertransaction","text":"","title":"Crypto\\Transactions\\Types\\TransferTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_9","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_155","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#hasvendorfield_2","text":"public hasVendorField () Verify if the transaction contains a vendorfield.","title":"hasVendorField()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_156","text":"boolean","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_11","text":"public serialise ( options? : ISerialiseOptions ) Perform serialisation.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_109","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_157","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_10","text":"public deserialise ( buf : ByteBuffer ) Perform deserialisation.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_110","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_158","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptotransactionstypesvotetransaction","text":"","title":"Crypto\\Transactions\\Types\\VoteTransaction"},{"location":"sdk/typescript/crypto/api-documentation/#getschema_10","text":"public static getSchema () Get transaction schema.","title":"getSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_159","text":"schemas.TransactionSchema","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#serialise_12","text":"public serialise ( options? : ISerialiseOptions ) Perform serialisation.","title":"serialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_111","text":"Type Name Required Description ISerialiseOptions options No Serialisation options","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_160","text":"ByteBuffer","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#deserialise_11","text":"public deserialise ( buf : ByteBuffer ) Perform deserialisation.","title":"deserialise()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_112","text":"Type Name Required Description ByteBuffer buf Yes Buffer to deserialise","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_161","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#cryptovalidationvalidator","text":"","title":"Crypto\\Validation\\Validator"},{"location":"sdk/typescript/crypto/api-documentation/#getinstance","text":"public getInstance () Get an instance of the Validator object.","title":"getInstance()"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_162","text":"Ajv.Ajv","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#validate_2","text":"public validate < T = any > ( schemaKeyRef : string | boolean | object , data : T ) Validate a schema object.","title":"validate()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_113","text":"Type Name Required Description string, boolean, object schemaKeyRef Yes Schema to validate against T data Yes Data to validate","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_163","text":"ISchemaValidationResult<T>","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#validateexception","text":"public validateException < T = any > ( schemaKeyRef : string | boolean | object , data : T ) Validate a schema object for an exception.","title":"validateException()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_114","text":"Type Name Required Description string, boolean, object schemaKeyRef Yes Schema to validate against T data Yes Data to validate","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_164","text":"ISchemaValidationResult<T>","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#addformat","text":"public addFormat ( name : string , format : Ajv.FormatDefinition ) Add formatting definition used for validation.","title":"addFormat()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_115","text":"Type Name Required Description string name Yes Name of definition Ajv format Yes Format definition","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_165","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#addkeyword","text":"public addKeyword ( keyword : string , definition : Ajv.KeywordDefinition ) Add keyword definition used for validation.","title":"addKeyword()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_116","text":"Type Name Required Description string keyword Yes Name of definition Ajv definition Yes Keyword definition","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_166","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#addschema","text":"public addSchema ( schema : object | object [], key? : string ) Add schema used for validation.","title":"addSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_117","text":"Type Name Required Description object schema Yes Name of schema string key No Schema","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_167","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#removekeyword","text":"public removeKeyword ( keyword : string ) Remove keyword definition from validation.","title":"removeKeyword()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_118","text":"Type Name Required Description string keyword Yes Name of definition","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_168","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#removeschema","text":"public removeSchema ( schemaKeyRef : string | boolean | object | RegExp ) Remove schema from validation.","title":"removeSchema()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_119","text":"Type Name Required Description string, boolean, object, RegExp schemaKeyRef Yes Schema to remove","title":"Parameters"},{"location":"sdk/typescript/crypto/api-documentation/#return-value_169","text":"void","title":"Return value"},{"location":"sdk/typescript/crypto/api-documentation/#extendtransaction","text":"public extendTransaction ( schema : TransactionSchema , remove? : boolean ) Extend a Transaction's schema for validation.","title":"extendTransaction()"},{"location":"sdk/typescript/crypto/api-documentation/#parameters_120","text":"Type Name Required Description TransactionSchema schema Yes Schema of transaction to extend boolean remove No Whether to remove the schema","title":"Parameters"},{"location":"sdk/typescript/crypto/examples/","text":"Examples \u00b6 Initialisation \u00b6 import { Identities } from \"@solar-network/crypto\" ; // Throughout this document, the keys object used is: const keys = Identities . Keys . fromPassphrase ( \"this is a top secret passphrase\" ); // Throughout this document, the recipientId variable used is: const recipientId = Identities . Address . fromPassphrase ( \"this is a top secret passphrase\" ); // Throughout this document, the senderPublicKey variable used is: const senderPublicKey = Identities . PublicKey . fromPassphrase ( \"this is a top secret passphrase\" ); Transactions \u00b6 A transaction is an object specifying the transfer of funds from the sender's wallet to the recipient's. Each transaction must be signed by the sender's private key to prove authenticity and origin. After broadcasting through the client SDK , a transaction is permanently incorporated in the blockchain by a Delegate Node. Sign \u00b6 The crypto SDK can sign a transaction using your private key or passphrase (from which the private key is generated). Ensure you are familiar with digital signatures before using the crypto SDKs. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . addTransfer ( \"Address of Recipient 1\" , \"100000000\" ) . addTransfer ( \"Address of Recipient 2\" , \"100000000\" ) . memo ( \"Hello World\" ) // Memo is optional . sign ( \"this is a top secret passphrase\" ); Serialise \u00b6 Serialisation of a transaction object ensures it is compact and properly formatted to be incorporated in the SXP blockchain. If you are using the crypto SDK in combination with the public API SDK, you should not need to serialise manually. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . memo ( \"This is an example memo\" ) . addTransfer ( \"Address of Recipient Wallet 1\" , \"100000000\" ) . addTransfer ( \"Address of Recipient Wallet 2\" , \"100000000\" ) . addTransfer ( \"Address of Recipient Wallet 3\" , \"100000000\" ) . sign ( \"this is a top secret passphrase\" ) . build (); const serialised = Transactions . Serialiser . serialise ( transaction ). toString ( \"hex\" ); >>> string Deserialise \u00b6 A serialised transaction may be deserialised for inspection purposes. The public API does not return serialised transactions, so you should only need to deserialise in exceptional circumstances. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const deserialised = Transactions . Deserialiser . deserialise ( serialised ); >>> ITransaction Message \u00b6 The crypto SDK not only supports transactions but can also work with other arbitrary data (expressed as strings). Sign \u00b6 Signing a string works much like signing a transaction: in most implementations, the message is hashed, and the resulting hash is signed using the private key or passphrase . import { Crypto , Identities } from \"@solar-network/crypto\" ; const keys = Identities . Keys . fromPassphrase ( \"This is a secret passphrase\" ); const message = \"Arbitrary entry of data\" ; const hash = Crypto . HashAlgorithms . sha256 ( message ); const signature = Crypto . Hash . signSchnorrBip340 ( hash , keys ); const signed = { message , hash , signature }; >>> IMessage Verify \u00b6 A message's signature can easily be verified by hash, without the private key that signed the message, by using the verify method. import { Crypto , Identities } from \"@solar-network/crypto\" ; const publicKey = Identities . PublicKey . fromPassphrase ( \"This is a secret passphrase\" ); const isVerified = Crypto . Hash . verifySchnorrBip340 ( signed . hash , signed . signature , publicKey ); >>> boolean Identities \u00b6 The identities class allows for the creation and inspection of keyPairs from passphrases . Here you find vital functions when creating transactions and managing wallets. Derive the address from a passphrase \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string Derive the address from a public key \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromPublicKey ( \"validPublicKey\" ); >>> string Derive the address from a wif \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromWIF ( \"validWif\" ); >>> string Validate an address \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . Address . validate ( \"validAddress\" ); >>> boolean PrivateKey \u00b6 As the name implies, privateKeys and passphrases are to remain private. Never store these unencrypted and minimise access to these secrets Derive the privateKey from a passphrase \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . PrivateKey . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string Derive the private key from a WIF \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . PrivateKey . fromWIF ( \"validWif\" ); >>> string PublicKey \u00b6 Public Keys may be freely shared, and are included in transaction objects to validate the authenticity. Derive the publicKey from a passphrase \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . PublicKey . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string Validate a publicKey \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . PublicKey . verify ( \"validPublicKey\" ); >>> boolean WIF \u00b6 The WIF should remain secret, just like your passphrase and private key . Derive the WIF from a passphrase \u00b6 import { Identities } from \"@solar-network/crypto\" ; Identities . WIF . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string","title":"Examples"},{"location":"sdk/typescript/crypto/examples/#examples","text":"","title":"Examples"},{"location":"sdk/typescript/crypto/examples/#initialisation","text":"import { Identities } from \"@solar-network/crypto\" ; // Throughout this document, the keys object used is: const keys = Identities . Keys . fromPassphrase ( \"this is a top secret passphrase\" ); // Throughout this document, the recipientId variable used is: const recipientId = Identities . Address . fromPassphrase ( \"this is a top secret passphrase\" ); // Throughout this document, the senderPublicKey variable used is: const senderPublicKey = Identities . PublicKey . fromPassphrase ( \"this is a top secret passphrase\" );","title":"Initialisation"},{"location":"sdk/typescript/crypto/examples/#transactions","text":"A transaction is an object specifying the transfer of funds from the sender's wallet to the recipient's. Each transaction must be signed by the sender's private key to prove authenticity and origin. After broadcasting through the client SDK , a transaction is permanently incorporated in the blockchain by a Delegate Node.","title":"Transactions"},{"location":"sdk/typescript/crypto/examples/#sign","text":"The crypto SDK can sign a transaction using your private key or passphrase (from which the private key is generated). Ensure you are familiar with digital signatures before using the crypto SDKs. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . fee ( \"30000000\" ) . addTransfer ( \"Address of Recipient 1\" , \"100000000\" ) . addTransfer ( \"Address of Recipient 2\" , \"100000000\" ) . memo ( \"Hello World\" ) // Memo is optional . sign ( \"this is a top secret passphrase\" );","title":"Sign"},{"location":"sdk/typescript/crypto/examples/#serialise","text":"Serialisation of a transaction object ensures it is compact and properly formatted to be incorporated in the SXP blockchain. If you are using the crypto SDK in combination with the public API SDK, you should not need to serialise manually. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const transaction = Transactions . BuilderFactory . transfer () . nonce ( senderNonce . toFixed ()) . memo ( \"This is an example memo\" ) . addTransfer ( \"Address of Recipient Wallet 1\" , \"100000000\" ) . addTransfer ( \"Address of Recipient Wallet 2\" , \"100000000\" ) . addTransfer ( \"Address of Recipient Wallet 3\" , \"100000000\" ) . sign ( \"this is a top secret passphrase\" ) . build (); const serialised = Transactions . Serialiser . serialise ( transaction ). toString ( \"hex\" ); >>> string","title":"Serialise"},{"location":"sdk/typescript/crypto/examples/#deserialise","text":"A serialised transaction may be deserialised for inspection purposes. The public API does not return serialised transactions, so you should only need to deserialise in exceptional circumstances. import { Transactions , Managers , Utils } from \"@solar-network/crypto\" ; const deserialised = Transactions . Deserialiser . deserialise ( serialised ); >>> ITransaction","title":"Deserialise"},{"location":"sdk/typescript/crypto/examples/#message","text":"The crypto SDK not only supports transactions but can also work with other arbitrary data (expressed as strings).","title":"Message"},{"location":"sdk/typescript/crypto/examples/#sign_1","text":"Signing a string works much like signing a transaction: in most implementations, the message is hashed, and the resulting hash is signed using the private key or passphrase . import { Crypto , Identities } from \"@solar-network/crypto\" ; const keys = Identities . Keys . fromPassphrase ( \"This is a secret passphrase\" ); const message = \"Arbitrary entry of data\" ; const hash = Crypto . HashAlgorithms . sha256 ( message ); const signature = Crypto . Hash . signSchnorrBip340 ( hash , keys ); const signed = { message , hash , signature }; >>> IMessage","title":"Sign"},{"location":"sdk/typescript/crypto/examples/#verify","text":"A message's signature can easily be verified by hash, without the private key that signed the message, by using the verify method. import { Crypto , Identities } from \"@solar-network/crypto\" ; const publicKey = Identities . PublicKey . fromPassphrase ( \"This is a secret passphrase\" ); const isVerified = Crypto . Hash . verifySchnorrBip340 ( signed . hash , signed . signature , publicKey ); >>> boolean","title":"Verify"},{"location":"sdk/typescript/crypto/examples/#identities","text":"The identities class allows for the creation and inspection of keyPairs from passphrases . Here you find vital functions when creating transactions and managing wallets.","title":"Identities"},{"location":"sdk/typescript/crypto/examples/#derive-the-address-from-a-passphrase","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string","title":"Derive the address from a passphrase"},{"location":"sdk/typescript/crypto/examples/#derive-the-address-from-a-public-key","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromPublicKey ( \"validPublicKey\" ); >>> string","title":"Derive the address from a public key"},{"location":"sdk/typescript/crypto/examples/#derive-the-address-from-a-wif","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . Address . fromWIF ( \"validWif\" ); >>> string","title":"Derive the address from a wif"},{"location":"sdk/typescript/crypto/examples/#validate-an-address","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . Address . validate ( \"validAddress\" ); >>> boolean","title":"Validate an address"},{"location":"sdk/typescript/crypto/examples/#privatekey","text":"As the name implies, privateKeys and passphrases are to remain private. Never store these unencrypted and minimise access to these secrets","title":"PrivateKey"},{"location":"sdk/typescript/crypto/examples/#derive-the-privatekey-from-a-passphrase","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . PrivateKey . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string","title":"Derive the privateKey from a passphrase"},{"location":"sdk/typescript/crypto/examples/#derive-the-private-key-from-a-wif","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . PrivateKey . fromWIF ( \"validWif\" ); >>> string","title":"Derive the private key from a WIF"},{"location":"sdk/typescript/crypto/examples/#publickey","text":"Public Keys may be freely shared, and are included in transaction objects to validate the authenticity.","title":"PublicKey"},{"location":"sdk/typescript/crypto/examples/#derive-the-publickey-from-a-passphrase","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . PublicKey . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string","title":"Derive the publicKey from a passphrase"},{"location":"sdk/typescript/crypto/examples/#validate-a-publickey","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . PublicKey . verify ( \"validPublicKey\" ); >>> boolean","title":"Validate a publicKey"},{"location":"sdk/typescript/crypto/examples/#wif","text":"The WIF should remain secret, just like your passphrase and private key .","title":"WIF"},{"location":"sdk/typescript/crypto/examples/#derive-the-wif-from-a-passphrase","text":"import { Identities } from \"@solar-network/crypto\" ; Identities . WIF . fromPassphrase ( \"this is a top secret passphrase\" ); >>> string","title":"Derive the WIF from a passphrase"},{"location":"sdk/typescript/crypto/intro/","text":"Installation \u00b6 NodeJS installation \u00b6 NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM . Install a package manager \u00b6 Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation Install package with pnpm \u00b6 pnpm install @solar-network/crypto","title":"Getting Started"},{"location":"sdk/typescript/crypto/intro/#installation","text":"","title":"Installation"},{"location":"sdk/typescript/crypto/intro/#nodejs-installation","text":"NodeJS can be downloaded here: nodejs.org/en/download Alternatively you can install NodeJS through your operating system packager manager . An excellent way to manage your NodeJS installation and be able to work with multiple version is to go through NVM .","title":"NodeJS installation"},{"location":"sdk/typescript/crypto/intro/#install-a-package-manager","text":"Install a package manager for nodejs like pnpm, npm or yarn. pnpm is recommended. Instructions on how to install pnpm can be found here: pnpm.io/installation","title":"Install a package manager"},{"location":"sdk/typescript/crypto/intro/#install-package-with-pnpm","text":"pnpm install @solar-network/crypto","title":"Install package with pnpm"}]}